/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

"use strict";
eval("\"use strict\";\n/**\n * Get Extension of file thought the path\n * @param path\n * @returns {any}\n */\nexports.extension = function (path) {\n    return path.slice((path.lastIndexOf(\".\") - 1 >>> 0) + 2);\n};\nexports.countKeys = function (object) {\n    var count = 0;\n    for (var k in object)\n        if (object.hasOwnProperty(k))\n            ++count;\n    return count;\n};\nexports.random = function (min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n//cloud\n//let l_Var = new findSuitObjectByProbability(0,totalValue);\n//push as many as you want\n//l_Var.addProbability()....\n//l_Var.getIndex();\nvar findSuitObjectByProbability = (function () {\n    function findSuitObjectByProbability() {\n        this.m_ProbabilityWeightArray = [];\n        this.m_MaxValue = 0;\n    }\n    findSuitObjectByProbability.prototype.addProbability = function (e_Weight) {\n        this.m_ProbabilityWeightArray.push(e_Weight);\n        this.m_MaxValue += e_Weight;\n    };\n    findSuitObjectByProbability.prototype.getIndex = function () {\n        var this$1 = this;\n\n        var l_TargetValue = exports.random(0, this.m_MaxValue);\n        var l_Length = this.m_ProbabilityWeightArray.length;\n        var l_CurrentValue = 0;\n        for (var i = 0; i < l_Length; ++i) {\n            var l_CurrentWeight = this$1.m_ProbabilityWeightArray[i];\n            l_CurrentValue += l_CurrentWeight;\n            if (l_CurrentValue >= l_TargetValue) {\n                return i;\n            }\n        }\n        //it should't happen\n        return -1;\n    };\n    return findSuitObjectByProbability;\n}());\nexports.findSuitObjectByProbability = findSuitObjectByProbability;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkhlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7QUFDUSxpQkFBUyxHQUFHLFVBQVUsSUFBSTtJQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzdELENBQUMsQ0FBQTtBQUVVLGlCQUFTLEdBQUcsVUFBVSxNQUFNO0lBQ25DLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNkLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQztRQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBQyxFQUFFLEtBQUssQ0FBQztJQUM1RCxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ2pCLENBQUMsQ0FBQTtBQUlVLGNBQU0sR0FBRyxVQUFDLEdBQUcsRUFBQyxHQUFHO0lBQ3hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDN0QsQ0FBQyxDQUFBO0FBRUQsT0FBTztBQUNQLDREQUE0RDtBQUM1RCwwQkFBMEI7QUFDMUIsNEJBQTRCO0FBQzVCLG1CQUFtQjtBQUNuQjtJQUFBO1FBQ1ksNkJBQXdCLEdBQWlCLEVBQUUsQ0FBQztRQUM1QyxlQUFVLEdBQUcsQ0FBQyxDQUFDO0lBbUIzQixDQUFDO0lBbEJHLG9EQUFjLEdBQWQsVUFBZSxRQUFRO1FBQ25CLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFVBQVUsSUFBSSxRQUFRLENBQUM7SUFDaEMsQ0FBQztJQUNELDhDQUFRLEdBQVI7UUFDSSxJQUFJLGFBQWEsR0FBVyxjQUFNLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN0RCxJQUFJLFFBQVEsR0FBVSxJQUFJLENBQUMsd0JBQXdCLENBQUMsTUFBTSxDQUFDO1FBQzNELElBQUksY0FBYyxHQUFVLENBQUMsQ0FBQztRQUM5QixHQUFHLENBQUEsQ0FBQyxJQUFJLENBQUMsR0FBVSxDQUFDLEVBQUMsQ0FBQyxHQUFDLFFBQVEsRUFBQyxFQUFFLENBQUMsRUFBQyxDQUFDO1lBQ2pDLElBQUksZUFBZSxHQUFVLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5RCxjQUFjLElBQUksZUFBZSxDQUFDO1lBQ2xDLEVBQUUsQ0FBQSxDQUFDLGNBQWMsSUFBSSxhQUFhLENBQUMsQ0FBQSxDQUFDO2dCQUNoQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2IsQ0FBQztRQUNMLENBQUM7UUFDRCxvQkFBb0I7UUFDcEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2QsQ0FBQztJQUNMLGtDQUFDO0FBQUQsQ0FBQyxBQXJCRCxJQXFCQztBQXJCWSxtQ0FBMkIsOEJBcUJ2QyxDQUFBIn0=//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL3R5cGVzY3JpcHQvUGx1Z2lucy9IZWxwZXJzLmpzPzRiYTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEdldCBFeHRlbnNpb24gb2YgZmlsZSB0aG91Z2h0IHRoZSBwYXRoXG4gKiBAcGFyYW0gcGF0aFxuICogQHJldHVybnMge2FueX1cbiAqL1xuZXhwb3J0cy5leHRlbnNpb24gPSBmdW5jdGlvbiAocGF0aCkge1xuICAgIHJldHVybiBwYXRoLnNsaWNlKChwYXRoLmxhc3RJbmRleE9mKFwiLlwiKSAtIDEgPj4+IDApICsgMik7XG59O1xuZXhwb3J0cy5jb3VudEtleXMgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICBmb3IgKHZhciBrIGluIG9iamVjdClcbiAgICAgICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrKSlcbiAgICAgICAgICAgICsrY291bnQ7XG4gICAgcmV0dXJuIGNvdW50O1xufTtcbmV4cG9ydHMucmFuZG9tID0gZnVuY3Rpb24gKG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XG59O1xuLy9jbG91ZFxuLy9sZXQgbF9WYXIgPSBuZXcgZmluZFN1aXRPYmplY3RCeVByb2JhYmlsaXR5KDAsdG90YWxWYWx1ZSk7XG4vL3B1c2ggYXMgbWFueSBhcyB5b3Ugd2FudFxuLy9sX1Zhci5hZGRQcm9iYWJpbGl0eSgpLi4uLlxuLy9sX1Zhci5nZXRJbmRleCgpO1xudmFyIGZpbmRTdWl0T2JqZWN0QnlQcm9iYWJpbGl0eSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZmluZFN1aXRPYmplY3RCeVByb2JhYmlsaXR5KCkge1xuICAgICAgICB0aGlzLm1fUHJvYmFiaWxpdHlXZWlnaHRBcnJheSA9IFtdO1xuICAgICAgICB0aGlzLm1fTWF4VmFsdWUgPSAwO1xuICAgIH1cbiAgICBmaW5kU3VpdE9iamVjdEJ5UHJvYmFiaWxpdHkucHJvdG90eXBlLmFkZFByb2JhYmlsaXR5ID0gZnVuY3Rpb24gKGVfV2VpZ2h0KSB7XG4gICAgICAgIHRoaXMubV9Qcm9iYWJpbGl0eVdlaWdodEFycmF5LnB1c2goZV9XZWlnaHQpO1xuICAgICAgICB0aGlzLm1fTWF4VmFsdWUgKz0gZV9XZWlnaHQ7XG4gICAgfTtcbiAgICBmaW5kU3VpdE9iamVjdEJ5UHJvYmFiaWxpdHkucHJvdG90eXBlLmdldEluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbF9UYXJnZXRWYWx1ZSA9IGV4cG9ydHMucmFuZG9tKDAsIHRoaXMubV9NYXhWYWx1ZSk7XG4gICAgICAgIHZhciBsX0xlbmd0aCA9IHRoaXMubV9Qcm9iYWJpbGl0eVdlaWdodEFycmF5Lmxlbmd0aDtcbiAgICAgICAgdmFyIGxfQ3VycmVudFZhbHVlID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsX0xlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgbF9DdXJyZW50V2VpZ2h0ID0gdGhpcy5tX1Byb2JhYmlsaXR5V2VpZ2h0QXJyYXlbaV07XG4gICAgICAgICAgICBsX0N1cnJlbnRWYWx1ZSArPSBsX0N1cnJlbnRXZWlnaHQ7XG4gICAgICAgICAgICBpZiAobF9DdXJyZW50VmFsdWUgPj0gbF9UYXJnZXRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vaXQgc2hvdWxkJ3QgaGFwcGVuXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIHJldHVybiBmaW5kU3VpdE9iamVjdEJ5UHJvYmFiaWxpdHk7XG59KCkpO1xuZXhwb3J0cy5maW5kU3VpdE9iamVjdEJ5UHJvYmFiaWxpdHkgPSBmaW5kU3VpdE9iamVjdEJ5UHJvYmFiaWxpdHk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lTR1ZzY0dWeWN5NXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWtobGJIQmxjbk11ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPenM3TzBkQlNVYzdRVUZEVVN4cFFrRkJVeXhIUVVGSExGVkJRVlVzU1VGQlNUdEpRVU5xUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRemRFTEVOQlFVTXNRMEZCUVR0QlFVVlZMR2xDUVVGVExFZEJRVWNzVlVGQlZTeE5RVUZOTzBsQlEyNURMRWxCUVVrc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU5rTEVkQlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFMUJRVTBzUTBGQlF6dFJRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZCUXl4RlFVRkZMRXRCUVVzc1EwRkJRenRKUVVNMVJDeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRPMEZCUTJwQ0xFTkJRVU1zUTBGQlFUdEJRVWxWTEdOQlFVMHNSMEZCUnl4VlFVRkRMRWRCUVVjc1JVRkJReXhIUVVGSE8wbEJRM2hDTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4RFFVRkRMRWRCUVVjc1IwRkJSeXhIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVNN1FVRkROMFFzUTBGQlF5eERRVUZCTzBGQlJVUXNUMEZCVHp0QlFVTlFMRFJFUVVFMFJEdEJRVU0xUkN3d1FrRkJNRUk3UVVGRE1VSXNORUpCUVRSQ08wRkJRelZDTEcxQ1FVRnRRanRCUVVOdVFqdEpRVUZCTzFGQlExa3NOa0pCUVhkQ0xFZEJRV2xDTEVWQlFVVXNRMEZCUXp0UlFVTTFReXhsUVVGVkxFZEJRVWNzUTBGQlF5eERRVUZETzBsQmJVSXpRaXhEUVVGRE8wbEJiRUpITEc5RVFVRmpMRWRCUVdRc1ZVRkJaU3hSUVVGUk8xRkJRMjVDTEVsQlFVa3NRMEZCUXl4M1FrRkJkMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1VVRkROME1zU1VGQlNTeERRVUZETEZWQlFWVXNTVUZCU1N4UlFVRlJMRU5CUVVNN1NVRkRhRU1zUTBGQlF6dEpRVU5FTERoRFFVRlJMRWRCUVZJN1VVRkRTU3hKUVVGSkxHRkJRV0VzUjBGQlZ5eGpRVUZOTEVOQlFVTXNRMEZCUXl4RlFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dFJRVU4wUkN4SlFVRkpMRkZCUVZFc1IwRkJWU3hKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1RVRkJUU3hEUVVGRE8xRkJRek5FTEVsQlFVa3NZMEZCWXl4SFFVRlZMRU5CUVVNc1EwRkJRenRSUVVNNVFpeEhRVUZITEVOQlFVRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJWU3hEUVVGRExFVkJRVU1zUTBGQlF5eEhRVUZETEZGQlFWRXNSVUZCUXl4RlFVRkZMRU5CUVVNc1JVRkJReXhEUVVGRE8xbEJRMnBETEVsQlFVa3NaVUZCWlN4SFFVRlZMRWxCUVVrc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNNVJDeGpRVUZqTEVsQlFVa3NaVUZCWlN4RFFVRkRPMWxCUTJ4RExFVkJRVVVzUTBGQlFTeERRVUZETEdOQlFXTXNTVUZCU1N4aFFVRmhMRU5CUVVNc1EwRkJRU3hEUVVGRE8yZENRVU5vUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMklzUTBGQlF6dFJRVU5NTEVOQlFVTTdVVUZEUkN4dlFrRkJiMEk3VVVGRGNFSXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMlFzUTBGQlF6dEpRVU5NTEd0RFFVRkRPMEZCUVVRc1EwRkJReXhCUVhKQ1JDeEpRWEZDUXp0QlFYSkNXU3h0UTBGQk1rSXNPRUpCY1VKMlF5eERRVUZCSW4wPVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyByZXNvdXJjZXMvYXNzZXRzL3R5cGVzY3JpcHQvUGx1Z2lucy9IZWxwZXJzLmpzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("//author cloud\n//date 1/Aug/2016\n//import {ItemInterface} from \"./ItemInterface\";\n\"use strict\";\nvar Helpers_1 = __webpack_require__(0);\nvar g_StageJsonTest = {\n    \"ProjectName\": \"Test\",\n    \"Creator\": \"Me\",\n    \"StageName\": \"Idea\",\n    \"GiveRewardMax\": \"3\",\n    \"GiveRewardMin\": \"1\",\n    \"GroupAndProbability\": [\n        { GroupID: \"A\", Probability: \"70\" },\n        { GroupID: \"B\", Probability: \"35\" },\n        { GroupID: \"C\", Probability: \"17\" },\n    ]\n};\nvar ItemData = (function () {\n    //constructor({e_Json}){\n    function ItemData(e_Json) {\n        var this$1 = this;\n\n        this.groupID = \"0\";\n        this.name = \"unknow\";\n        this.id = \"0\";\n        this.imageUrl = \"\";\n        this.probabilityToShow = 0.1;\n        //if items combined result is failed,return virtual coins.\n        this.cost = 10;\n        var l_TargetElement = e_Json[\"ItemData\"];\n        if (l_TargetElement) {\n            for (var l_Element in e_Json) {\n                this$1[l_Element] = e_Json[l_Element];\n            }\n        }\n        else {\n            console.log(\"item data json forma is wrong!\");\n        }\n    }\n    return ItemData;\n}());\nexports.ItemData = ItemData;\n;\nvar GroupAndItem = (function () {\n    function GroupAndItem(e_Json) {\n        var this$1 = this;\n\n        this.m_findSuitObjectByProbability = null;\n        //public points;\n        this.groupID = \"0\";\n        this.itemArray = [];\n        this.groupID = e_Json.groupID;\n        this.m_findSuitObjectByProbability = new Helpers_1.findSuitObjectByProbability();\n        var l_Element = e_Json[\"GroupAndItem\"];\n        if (l_Element) {\n            for (var l_ItemElement in l_Element) {\n                var l_TargetElement = l_Element[l_ItemElement];\n                if (\"ItemData\" == l_TargetElement) {\n                    var l_ItemData = new ItemData(l_TargetElement);\n                    this$1.addItem(l_ItemData);\n                    this$1.m_findSuitObjectByProbability.addProbability(l_ItemData.probabilityToShow);\n                }\n            }\n        }\n    }\n    GroupAndItem.prototype.getRandomItemID = function () {\n        var l_Index = this.m_findSuitObjectByProbability.getIndex();\n        if (this.itemArray.length > l_Index) {\n            var l_Item = this.itemArray[l_Index];\n            return l_Item.id;\n        }\n        return null;\n    };\n    GroupAndItem.prototype.addItem = function (e_ItemData) {\n        var this$1 = this;\n\n        //avoid add same id again\n        for (var i = 0; i < this.itemArray.length; ++i) {\n            var l_ItemData = this$1.itemArray[i];\n            if (l_ItemData.id == e_ItemData.id) {\n                return false;\n            }\n        }\n        this.itemArray.push(e_ItemData);\n        return true;\n    };\n    return GroupAndItem;\n}());\nexports.GroupAndItem = GroupAndItem;\n;\nvar ItemManager = (function () {\n    function ItemManager(e_Json) {\n        this.groupAndItemArray = null;\n        this.assignItemsData(e_Json);\n        //do something\n    }\n    ItemManager.prototype.assignItemsData = function (e_Json) {\n        var this$1 = this;\n\n        this.groupAndItemArray = [];\n        if (e_Json) {\n            for (var l_Json in e_Json) {\n                var l_groupID = l_Json[\"groupID\"];\n                if (l_groupID) {\n                    var l_GroupAndItem = new GroupAndItem(e_Json[l_Json]);\n                    l_GroupAndItem.groupID = l_groupID;\n                    this$1.groupAndItemArray.push(l_GroupAndItem);\n                }\n            }\n        }\n    };\n    //     var g_StageJsonTest = {\n    //     \"ProjectName\":\"Test\",\n    //     \"Creator\":\"Me\",//to link db\n    //     \"StageName\":\"Idea\",\n    //     \"GiveRewardMax\":\"3\",\n    //     \"GiveRewardMin\":\"1\",\n    //     \"GeoupAndProbability\":[\n    //         {GroupID:\"A\",Probability:\"70\"},\n    //         {GroupID:\"B\",Probability:\"35\"},\n    //         {GroupID:\"C\",Probability:\"17\"},\n    //     ]\n    // }\n    //return array\n    //[groupID,itemID],[7groupID,itemID]....\n    ItemManager.prototype.getItemsFromStageData = function (e_StageDataJson) {\n        var this$1 = this;\n\n        var l_findSuitObjectByProbability = new Helpers_1.findSuitObjectByProbability();\n        var l_ProjectNAme = e_StageDataJson.ProjectName;\n        var l_Creator = e_StageDataJson.Creator;\n        var l_StageName = e_StageDataJson.StageName;\n        var l_GiveRewardMax = e_StageDataJson.GiveRewardMax;\n        var l_GiveRewardMin = e_StageDataJson.GiveRewardMin;\n        var l_GivRewardCount = Helpers_1.random(l_GiveRewardMin, l_GiveRewardMax);\n        var l_GroupAndProbability = e_StageDataJson.GroupAndProbability;\n        if (l_GroupAndProbability) {\n            for (var i in l_GroupAndProbability) {\n                var l_Object = l_GroupAndProbability[i];\n                if (l_Object) {\n                    l_Object.GroupID;\n                    l_Object.Probability;\n                    l_findSuitObjectByProbability.addProbability(l_Object.Probability);\n                }\n            }\n            var l_TargetGroup = [];\n            for (var i = 0; i < l_GivRewardCount; ++i) {\n                var l_TargetGroupID = l_findSuitObjectByProbability.getIndex();\n                l_TargetGroup.push(l_TargetGroupID);\n            }\n            var l_ReturnJsonResult = [];\n            for (var i = 0; i < l_TargetGroup.length; ++i) {\n                var l_GroupID = l_TargetGroup[i];\n                //avoid some stupid things wrong\n                if (this$1.groupAndItemArray.length > l_GroupID) {\n                    var l_GroupAndItem = this$1.groupAndItemArray[l_GroupID_1];\n                    var l_GroupID_1 = l_GroupAndItem.groupID;\n                    var l_ItemID = l_GroupAndItem.getRandomItemID();\n                    var l_GroupIDAndItemID = [l_GroupID_1, l_ItemID];\n                    l_ReturnJsonResult.push(l_GroupIDAndItemID);\n                }\n            }\n            return l_ReturnJsonResult;\n        }\n        //groupAndItemArray\n        //return reward;\n        return null;\n    };\n    ItemManager.prototype.getItemByGroupIdAndItemID = function (e_GroupID, e_ItemID) {\n        var this$1 = this;\n\n        for (var i = 0; i < this.groupAndItemArray.length; ++i) {\n            var l_Group = this$1.groupAndItemArray[i];\n            if (l_Group.groupID == e_GroupID) {\n                for (var j = 0; j < l_Group.itemArray.length; ++j) {\n                    var l_Item = l_Group.itemArray[j];\n                    if (l_Item.imageUrl == e_ItemID) {\n                        return l_Item;\n                    }\n                }\n            }\n        }\n        return null;\n    };\n    ItemManager.prototype.getItemByID = function (e_ItemID) {\n        var this$1 = this;\n\n        for (var i = 0; i < this.groupAndItemArray; ++i) {\n            var l_Group = this$1.groupAndItemArray[i];\n            for (var j = 0; j < l_Group.itemArray.length; ++j) {\n                var l_Item = l_Group.itemArray[j];\n                if (l_Item.imageUrl == e_ItemID) {\n                    return l_Item;\n                }\n            }\n        }\n        return null;\n    };\n    return ItemManager;\n}());\nexports.ItemManager = ItemManager;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSXRlbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkl0ZW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYztBQUNkLGlCQUFpQjtBQUNqQixnREFBZ0Q7O0FBRWhELHdCQUFrRCxZQUFZLENBQUMsQ0FBQTtBQUUvRCxJQUFJLGVBQWUsR0FBRztJQUNsQixhQUFhLEVBQUMsTUFBTTtJQUNwQixTQUFTLEVBQUMsSUFBSTtJQUNkLFdBQVcsRUFBQyxNQUFNO0lBQ2xCLGVBQWUsRUFBQyxHQUFHO0lBQ25CLGVBQWUsRUFBQyxHQUFHO0lBQ25CLHFCQUFxQixFQUFDO1FBQ2xCLEVBQUMsT0FBTyxFQUFDLEdBQUcsRUFBQyxXQUFXLEVBQUMsSUFBSSxFQUFDO1FBQzlCLEVBQUMsT0FBTyxFQUFDLEdBQUcsRUFBQyxXQUFXLEVBQUMsSUFBSSxFQUFDO1FBQzlCLEVBQUMsT0FBTyxFQUFDLEdBQUcsRUFBQyxXQUFXLEVBQUMsSUFBSSxFQUFDO0tBQ2pDO0NBQ0osQ0FBQTtBQUVEO0lBUUksd0JBQXdCO0lBQ3hCLGtCQUFZLE1BQU07UUFSWCxZQUFPLEdBQVUsR0FBRyxDQUFDO1FBQ3JCLFNBQUksR0FBVSxRQUFRLENBQUM7UUFDdkIsT0FBRSxHQUFVLEdBQUcsQ0FBQztRQUNoQixhQUFRLEdBQVUsRUFBRSxDQUFDO1FBQ3JCLHNCQUFpQixHQUFVLEdBQUcsQ0FBQztRQUN0QywwREFBMEQ7UUFDbkQsU0FBSSxHQUFHLEVBQUUsQ0FBQztRQUdiLElBQUksZUFBZSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN6QyxFQUFFLENBQUEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLEdBQUcsQ0FBQyxDQUFDLElBQUksU0FBUyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDeEMsQ0FBQztRQUNMLENBQUM7UUFBQSxJQUFJ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//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ]);