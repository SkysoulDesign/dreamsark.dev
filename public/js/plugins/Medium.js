/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

eval("// shim for using process in browser\n\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\n(function () {\n  try {\n    cachedSetTimeout = setTimeout;\n  } catch (e) {\n    cachedSetTimeout = function () {\n      throw new Error('setTimeout is not defined');\n    }\n  }\n  try {\n    cachedClearTimeout = clearTimeout;\n  } catch (e) {\n    cachedClearTimeout = function () {\n      throw new Error('clearTimeout is not defined');\n    }\n  }\n} ())\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = cachedSetTimeout.call(null, cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    cachedClearTimeout.call(null, timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var arguments$1 = arguments;\n\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments$1[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        cachedSetTimeout.call(null, drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzPzgzOTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNhY2hlZFNldFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaXMgbm90IGRlZmluZWQnKTtcbiAgICB9XG4gIH1cbiAgdHJ5IHtcbiAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBpcyBub3QgZGVmaW5lZCcpO1xuICAgIH1cbiAgfVxufSAoKSlcbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgdGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZHJhaW5RdWV1ZSwgMCk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\n  'use strict';\n  var isElectron = typeof module === 'object' && process && process.versions && process.versions.electron;\n  if (!isElectron && typeof module === 'object') {\n    module.exports = factory;\n  } else if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n        return factory;\n    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    root.MediumEditorTable = factory;\n  }\n}(this, function () {\n\n  'use strict';\n\nfunction extend(dest, source) {\n    var prop;\n    dest = dest || {};\n    for (prop in source) {\n        if (source.hasOwnProperty(prop) && !dest.hasOwnProperty(prop)) {\n            dest[prop] = source[prop];\n        }\n    }\n    return dest;\n}\n\nfunction getSelectionText(doc) {\n    if (doc.getSelection) {\n        return doc.getSelection().toString();\n    }\n    if (doc.selection && doc.selection.type !== 'Control') {\n        return doc.selection.createRange().text;\n    }\n    return '';\n}\n\nfunction getSelectionStart(doc) {\n    var node = doc.getSelection().anchorNode,\n        startNode = (node && node.nodeType === 3 ? node.parentNode : node);\n\n    return startNode;\n}\n\nfunction placeCaretAtNode(doc, node, before) {\n    if (doc.getSelection !== undefined && node) {\n        var range = doc.createRange(),\n            selection = doc.getSelection();\n\n        if (before) {\n            range.setStartBefore(node);\n        } else {\n            range.setStartAfter(node);\n        }\n\n        range.collapse(true);\n\n        selection.removeAllRanges();\n        selection.addRange(range);\n    }\n}\n\nfunction isInsideElementOfTag(node, tag) {\n    if (!node) {\n        return false;\n    }\n\n    var parentNode = node.parentNode,\n        tagName = parentNode.tagName.toLowerCase();\n\n    while (tagName !== 'body') {\n        if (tagName === tag) {\n            return true;\n        }\n        parentNode = parentNode.parentNode;\n\n        if (parentNode && parentNode.tagName) {\n            tagName = parentNode.tagName.toLowerCase();\n        } else {\n            return false;\n        }\n    }\n\n    return false;\n}\n\nfunction getParentOf(el, tagTarget) {\n    var tagName = el && el.tagName ? el.tagName.toLowerCase() : false;\n\n    if (!tagName) {\n        return false;\n    }\n    while (tagName && tagName !== 'body') {\n        if (tagName === tagTarget) {\n            return el;\n        }\n        el = el.parentNode;\n        tagName = el && el.tagName ? el.tagName.toLowerCase() : false;\n    }\n}\n\nfunction Grid(el, callback, rows, columns) {\n    return this.init(el, callback, rows, columns);\n}\n\nGrid.prototype = {\n    init: function (el, callback, rows, columns) {\n        this._root = el;\n        this._callback = callback;\n        this.rows = rows;\n        this.columns = columns;\n        return this._render();\n    },\n\n    setCurrentCell: function (cell) {\n        this._currentCell = cell;\n    },\n\n    markCells: function () {\n        [].forEach.call(this._cellsElements, function (el) {\n            var cell = {\n                    column: parseInt(el.dataset.column, 10),\n                    row: parseInt(el.dataset.row, 10)\n                },\n                active = this._currentCell &&\n                         cell.row <= this._currentCell.row &&\n                         cell.column <= this._currentCell.column;\n\n            if (active === true) {\n                el.classList.add('active');\n            } else {\n                el.classList.remove('active');\n            }\n        }.bind(this));\n    },\n\n    _generateCells: function () {\n        var this$1 = this;\n\n        var row = -1;\n\n        this._cells = [];\n\n        for (var i = 0; i < this.rows * this.columns; i++) {\n            var column = i % this$1.columns;\n\n            if (column === 0) {\n                row++;\n            }\n\n            this$1._cells.push({\n                column: column,\n                row: row,\n                active: false\n            });\n        }\n    },\n\n    _html: function () {\n        var width = this.columns * COLUMN_WIDTH + BORDER_WIDTH * 2,\n            height = this.rows * COLUMN_WIDTH + BORDER_WIDTH * 2,\n            html = '<div class=\"medium-editor-table-builder-grid clearfix\" style=\"width:' + width + 'px;height:' + height + 'px;\">';\n        html += this._cellsHTML();\n        html += '</div>';\n        return html;\n    },\n\n    _cellsHTML: function () {\n        var html = '';\n        this._generateCells();\n        this._cells.map(function (cell) {\n            html += '<a href=\"#\" class=\"medium-editor-table-builder-cell' +\n                    (cell.active === true ? ' active' : '') +\n                    '\" ' + 'data-row=\"' + cell.row +\n                    '\" data-column=\"' + cell.column + '\">';\n            html += '</a>';\n        });\n        return html;\n    },\n\n    _render: function () {\n        this._root.innerHTML = this._html();\n        this._cellsElements = this._root.querySelectorAll('a');\n        this._bindEvents();\n    },\n\n    _bindEvents: function () {\n        [].forEach.call(this._cellsElements, function (el) {\n            this._onMouseEnter(el);\n            this._onClick(el);\n        }.bind(this));\n    },\n\n    _onMouseEnter: function (el) {\n        var self = this,\n            timer;\n\n        el.addEventListener('mouseenter', function () {\n            clearTimeout(timer);\n\n            var dataset = this.dataset;\n\n            timer = setTimeout(function () {\n                self._currentCell = {\n                    column: parseInt(dataset.column, 10),\n                    row: parseInt(dataset.row, 10)\n                };\n                self.markCells();\n            }, 50);\n        });\n    },\n\n    _onClick: function (el) {\n        var self = this;\n        el.addEventListener('click', function (e) {\n            e.preventDefault();\n            self._callback(this.dataset.row, this.dataset.column);\n        });\n    }\n};\n\nfunction Builder(options) {\n    return this.init(options);\n}\n\nBuilder.prototype = {\n    init: function (options) {\n        this.options = options;\n        this._doc = options.ownerDocument || document;\n        this._root = this._doc.createElement('div');\n        this._root.className = 'medium-editor-table-builder';\n        this.grid = new Grid(\n          this._root,\n          this.options.onClick,\n          this.options.rows,\n          this.options.columns\n        );\n\n        this._range = null;\n        this._toolbar = this._doc.createElement('div');\n        this._toolbar.className = 'medium-editor-table-builder-toolbar';\n\n        var spanRow = this._doc.createElement('span');\n        spanRow.innerHTML = 'Row:';\n        this._toolbar.appendChild(spanRow);\n        var addRowBefore = this._doc.createElement('button');\n        addRowBefore.title = 'Add row before';\n        addRowBefore.innerHTML = '<i class=\"fa fa-long-arrow-up\"></i>';\n        addRowBefore.onclick = this.addRow.bind(this, true);\n        this._toolbar.appendChild(addRowBefore);\n\n        var addRowAfter = this._doc.createElement('button');\n        addRowAfter.title = 'Add row after';\n        addRowAfter.innerHTML = '<i class=\"fa fa-long-arrow-down\"></i>';\n        addRowAfter.onclick = this.addRow.bind(this, false);\n        this._toolbar.appendChild(addRowAfter);\n\n        var remRow = this._doc.createElement('button');\n        remRow.title = 'Remove row';\n        remRow.innerHTML = '<i class=\"fa fa-close\"></i>';\n        remRow.onclick = this.removeRow.bind(this);\n        this._toolbar.appendChild(remRow);\n\n        var spanCol = this._doc.createElement('span');\n        spanCol.innerHTML = 'Column:';\n        this._toolbar.appendChild(spanCol);\n        var addColumnBefore = this._doc.createElement('button');\n        addColumnBefore.title = 'Add column before';\n        addColumnBefore.innerHTML = '<i class=\"fa fa-long-arrow-left\"></i>';\n        addColumnBefore.onclick = this.addColumn.bind(this, true);\n        this._toolbar.appendChild(addColumnBefore);\n\n        var addColumnAfter = this._doc.createElement('button');\n        addColumnAfter.title = 'Add column after';\n        addColumnAfter.innerHTML = '<i class=\"fa fa-long-arrow-right\"></i>';\n        addColumnAfter.onclick = this.addColumn.bind(this, false);\n        this._toolbar.appendChild(addColumnAfter);\n\n        var remColumn = this._doc.createElement('button');\n        remColumn.title = 'Remove column';\n        remColumn.innerHTML = '<i class=\"fa fa-close\"></i>';\n        remColumn.onclick = this.removeColumn.bind(this);\n        this._toolbar.appendChild(remColumn);\n\n        var remTable = this._doc.createElement('button');\n        remTable.title = 'Remove table';\n        remTable.innerHTML = '<i class=\"fa fa-trash-o\"></i>';\n        remTable.onclick = this.removeTable.bind(this);\n        this._toolbar.appendChild(remTable);\n\n        var grid = this._root.childNodes[0];\n        this._root.insertBefore(this._toolbar, grid);\n    },\n\n    getElement: function () {\n        return this._root;\n    },\n\n    hide: function () {\n        this._root.style.display = '';\n        this.grid.setCurrentCell({ column: -1, row: -1 });\n        this.grid.markCells();\n    },\n\n    show: function (left) {\n        this._root.style.display = 'block';\n        this._root.style.left = left + 'px';\n    },\n\n    setEditor: function (range) {\n        this._range = range;\n        this._toolbar.style.display = 'block';\n    },\n\n    setBuilder: function () {\n        var this$1 = this;\n\n        this._range = null;\n        this._toolbar.style.display = 'none';\n        var elements = this._doc.getElementsByClassName('medium-editor-table-builder-grid');\n        for (var i = 0; i < elements.length; i++) {\n            elements[i].style.height = (COLUMN_WIDTH * this$1.rows + BORDER_WIDTH * 2) + 'px';\n            elements[i].style.width = (COLUMN_WIDTH * this$1.columns + BORDER_WIDTH * 2) + 'px';\n        }\n    },\n\n    addRow: function (before, e) {\n        var this$1 = this;\n\n        e.preventDefault();\n        e.stopPropagation();\n        var tbody = this._range.parentNode.parentNode,\n            tr = this._doc.createElement('tr'),\n            td;\n        for (var i = 0; i < this._range.parentNode.childNodes.length; i++) {\n            td = this$1._doc.createElement('td');\n            td.appendChild(this$1._doc.createElement('br'));\n            tr.appendChild(td);\n        }\n        if (before !== true && this._range.parentNode.nextSibling) {\n            tbody.insertBefore(tr, this._range.parentNode.nextSibling);\n        } else if (before === true) {\n            tbody.insertBefore(tr, this._range.parentNode);\n        } else {\n            tbody.appendChild(tr);\n        }\n        this.options.onClick(0, 0);\n    },\n\n    removeRow: function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n        this._range.parentNode.parentNode.removeChild(this._range.parentNode);\n        this.options.onClick(0, 0);\n    },\n\n    addColumn: function (before, e) {\n        var this$1 = this;\n\n        e.preventDefault();\n        e.stopPropagation();\n        var cell = Array.prototype.indexOf.call(this._range.parentNode.childNodes, this._range),\n            tbody = this._range.parentNode.parentNode,\n            td;\n\n        for (var i = 0; i < tbody.childNodes.length; i++) {\n            td = this$1._doc.createElement('td');\n            td.appendChild(this$1._doc.createElement('br'));\n            if (before === true) {\n                tbody.childNodes[i].insertBefore(td, tbody.childNodes[i].childNodes[cell]);\n            } else if (this$1._range.parentNode.parentNode.childNodes[i].childNodes[cell].nextSibling) {\n                tbody.childNodes[i].insertBefore(td, tbody.childNodes[i].childNodes[cell].nextSibling);\n            } else {\n                tbody.childNodes[i].appendChild(td);\n            }\n        }\n\n        this.options.onClick(0, 0);\n    },\n\n    removeColumn: function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n        var cell = Array.prototype.indexOf.call(this._range.parentNode.childNodes, this._range),\n            tbody = this._range.parentNode.parentNode,\n            rows = tbody.childNodes.length;\n\n        for (var i = 0; i < rows; i++) {\n            tbody.childNodes[i].removeChild(tbody.childNodes[i].childNodes[cell]);\n        }\n        this.options.onClick(0, 0);\n    },\n\n    removeTable: function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n        var cell = Array.prototype.indexOf.call(this._range.parentNode.childNodes, this._range),\n            table = this._range.parentNode.parentNode.parentNode;\n\n        table.parentNode.removeChild(table);\n        this.options.onClick(0, 0);\n    }\n};\n\nfunction Table(editor) {\n    return this.init(editor);\n}\n\nvar TAB_KEY_CODE = 9;\n\nTable.prototype = {\n    init: function (editor) {\n        this._editor = editor;\n        this._doc = this._editor.options.ownerDocument;\n        this._bindTabBehavior();\n    },\n\n    insert: function (rows, cols) {\n        var html = this._html(rows, cols);\n\n        this._editor.pasteHTML(\n            '<table class=\"medium-editor-table\" id=\"medium-editor-table\"' +\n            ' width=\"100%\">' +\n            '<tbody>' +\n            html +\n            '</tbody>' +\n            '</table>', {\n                cleanAttrs: [],\n                cleanTags: []\n            }\n        );\n\n        var table = this._doc.getElementById('medium-editor-table');\n        table.removeAttribute('id');\n        placeCaretAtNode(this._doc, table.querySelector('td'), true);\n\n        this._editor.checkSelection();\n    },\n\n    _html: function (rows, cols) {\n        var html = '',\n            x, y,\n            text = getSelectionText(this._doc);\n\n        for (x = 0; x <= rows; x++) {\n            html += '<tr>';\n            for (y = 0; y <= cols; y++) {\n                html += '<td>' + (x === 0 && y === 0 ? text : '<br />') + '</td>';\n            }\n            html += '</tr>';\n        }\n        return html;\n    },\n\n    _bindTabBehavior: function () {\n        var self = this;\n        [].forEach.call(this._editor.elements, function (el) {\n            el.addEventListener('keydown', function (e) {\n                self._onKeyDown(e);\n            });\n        });\n    },\n\n    _onKeyDown: function (e) {\n        var el = getSelectionStart(this._doc),\n            table;\n\n        if (e.which === TAB_KEY_CODE && isInsideElementOfTag(el, 'table')) {\n            e.preventDefault();\n            e.stopPropagation();\n            table = this._getTableElements(el);\n            if (e.shiftKey) {\n                this._tabBackwards(el.previousSibling, table.row);\n            } else {\n                if (this._isLastCell(el, table.row, table.root)) {\n                    this._insertRow(getParentOf(el, 'tbody'), table.row.cells.length);\n                }\n                placeCaretAtNode(this._doc, el);\n            }\n        }\n    },\n\n    _getTableElements: function (el) {\n        return {\n            cell: getParentOf(el, 'td'),\n            row: getParentOf(el, 'tr'),\n            root: getParentOf(el, 'table')\n        };\n    },\n\n    _tabBackwards: function (el, row) {\n        el = el || this._getPreviousRowLastCell(row);\n        placeCaretAtNode(this._doc, el, true);\n    },\n\n    _insertRow: function (tbody, cols) {\n        var tr = document.createElement('tr'),\n            html = '',\n            i;\n\n        for (i = 0; i < cols; i += 1) {\n            html += '<td><br /></td>';\n        }\n        tr.innerHTML = html;\n        tbody.appendChild(tr);\n    },\n\n    _isLastCell: function (el, row, table) {\n        return (\n          (row.cells.length - 1) === el.cellIndex &&\n          (table.rows.length - 1) === row.rowIndex\n        );\n    },\n\n    _getPreviousRowLastCell: function (row) {\n        row = row.previousSibling;\n        if (row) {\n            return row.cells[row.cells.length - 1];\n        }\n    }\n};\n\nvar COLUMN_WIDTH = 16,\n    BORDER_WIDTH = 1,\n    MediumEditorTable;\n\nMediumEditorTable = MediumEditor.extensions.form.extend({\n    name: 'table',\n\n    aria: 'create table',\n    action: 'table',\n    contentDefault: 'TBL',\n    contentFA: '<i class=\"fa fa-table\"></i>',\n\n    handleClick: function (event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this[this.isActive() === true ? 'hide' : 'show']();\n    },\n\n    hide: function () {\n        this.setInactive();\n        this.builder.hide();\n    },\n\n    show: function () {\n        this.setActive();\n\n        var range = MediumEditor.selection.getSelectionRange(this.document);\n        if (range.startContainer.nodeName.toLowerCase() === 'td' ||\n          range.endContainer.nodeName.toLowerCase() === 'td' ||\n          MediumEditor.util.getClosestTag(MediumEditor.selection.getSelectedParentElement(range), 'td')) {\n            this.builder.setEditor(MediumEditor.selection.getSelectedParentElement(range));\n        } else {\n            this.builder.setBuilder();\n        }\n        this.builder.show(this.button.offsetLeft);\n    },\n\n    getForm: function () {\n        if (!this.builder) {\n            this.builder = new Builder({\n                onClick: function (rows, columns) {\n                    if (rows > 0 || columns > 0) {\n                        this.table.insert(rows, columns);\n                    }\n                    this.hide();\n                }.bind(this),\n                ownerDocument: this.document,\n                rows: this.rows || 10,\n                columns: this.columns || 10\n            });\n\n            this.table = new Table(this.base);\n        }\n\n        return this.builder.getElement();\n    }\n});\n\n  return MediumEditorTable;\n}()));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var __WEBPACK_AMD_DEFINE_RESULT__;/*global self, document, DOMException */\n\n/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */\n\n// Full polyfill for browsers with no classList support\nif (!(\"classList\" in document.createElement(\"_\"))) {\n  (function (view) {\n\n  \"use strict\";\n\n  if (!('Element' in view)) return;\n\n  var\n      classListProp = \"classList\"\n    , protoProp = \"prototype\"\n    , elemCtrProto = view.Element[protoProp]\n    , objCtr = Object\n    , strTrim = String[protoProp].trim || function () {\n      return this.replace(/^\\s+|\\s+$/g, \"\");\n    }\n    , arrIndexOf = Array[protoProp].indexOf || function (item) {\n      var this$1 = this;\n\n      var\n          i = 0\n        , len = this.length\n      ;\n      for (; i < len; i++) {\n        if (i in this$1 && this$1[i] === item) {\n          return i;\n        }\n      }\n      return -1;\n    }\n    // Vendors: please allow content code to instantiate DOMExceptions\n    , DOMEx = function (type, message) {\n      this.name = type;\n      this.code = DOMException[type];\n      this.message = message;\n    }\n    , checkTokenAndGetIndex = function (classList, token) {\n      if (token === \"\") {\n        throw new DOMEx(\n            \"SYNTAX_ERR\"\n          , \"An invalid or illegal string was specified\"\n        );\n      }\n      if (/\\s/.test(token)) {\n        throw new DOMEx(\n            \"INVALID_CHARACTER_ERR\"\n          , \"String contains an invalid character\"\n        );\n      }\n      return arrIndexOf.call(classList, token);\n    }\n    , ClassList = function (elem) {\n      var this$1 = this;\n\n      var\n          trimmedClasses = strTrim.call(elem.getAttribute(\"class\") || \"\")\n        , classes = trimmedClasses ? trimmedClasses.split(/\\s+/) : []\n        , i = 0\n        , len = classes.length\n      ;\n      for (; i < len; i++) {\n        this$1.push(classes[i]);\n      }\n      this._updateClassName = function () {\n        elem.setAttribute(\"class\", this.toString());\n      };\n    }\n    , classListProto = ClassList[protoProp] = []\n    , classListGetter = function () {\n      return new ClassList(this);\n    }\n  ;\n  // Most DOMException implementations don't allow calling DOMException's toString()\n  // on non-DOMExceptions. Error's toString() is sufficient here.\n  DOMEx[protoProp] = Error[protoProp];\n  classListProto.item = function (i) {\n    return this[i] || null;\n  };\n  classListProto.contains = function (token) {\n    token += \"\";\n    return checkTokenAndGetIndex(this, token) !== -1;\n  };\n  classListProto.add = function () {\n    var this$1 = this;\n\n    var\n        tokens = arguments\n      , i = 0\n      , l = tokens.length\n      , token\n      , updated = false\n    ;\n    do {\n      token = tokens[i] + \"\";\n      if (checkTokenAndGetIndex(this$1, token) === -1) {\n        this$1.push(token);\n        updated = true;\n      }\n    }\n    while (++i < l);\n\n    if (updated) {\n      this._updateClassName();\n    }\n  };\n  classListProto.remove = function () {\n    var this$1 = this;\n\n    var\n        tokens = arguments\n      , i = 0\n      , l = tokens.length\n      , token\n      , updated = false\n      , index\n    ;\n    do {\n      token = tokens[i] + \"\";\n      index = checkTokenAndGetIndex(this$1, token);\n      while (index !== -1) {\n        this$1.splice(index, 1);\n        updated = true;\n        index = checkTokenAndGetIndex(this$1, token);\n      }\n    }\n    while (++i < l);\n\n    if (updated) {\n      this._updateClassName();\n    }\n  };\n  classListProto.toggle = function (token, force) {\n    token += \"\";\n\n    var\n        result = this.contains(token)\n      , method = result ?\n        force !== true && \"remove\"\n      :\n        force !== false && \"add\"\n    ;\n\n    if (method) {\n      this[method](token);\n    }\n\n    if (force === true || force === false) {\n      return force;\n    } else {\n      return !result;\n    }\n  };\n  classListProto.toString = function () {\n    return this.join(\" \");\n  };\n\n  if (objCtr.defineProperty) {\n    var classListPropDesc = {\n        get: classListGetter\n      , enumerable: true\n      , configurable: true\n    };\n    try {\n      objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n    } catch (ex) { // IE 8 doesn't support enumerable:true\n      if (ex.number === -0x7FF5EC54) {\n        classListPropDesc.enumerable = false;\n        objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n      }\n    }\n  } else if (objCtr[protoProp].__defineGetter__) {\n    elemCtrProto.__defineGetter__(classListProp, classListGetter);\n  }\n\n  }(self));\n}\n\n/* Blob.js\n * A Blob implementation.\n * 2014-07-24\n *\n * By Eli Grey, http://eligrey.com\n * By Devin Samarin, https://github.com/dsamarin\n * License: X11/MIT\n *   See https://github.com/eligrey/Blob.js/blob/master/LICENSE.md\n */\n\n/*global self, unescape */\n/*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,\n  plusplus: true */\n\n/*! @source http://purl.eligrey.com/github/Blob.js/blob/master/Blob.js */\n\n(function (view) {\n  \"use strict\";\n\n  view.URL = view.URL || view.webkitURL;\n\n  if (view.Blob && view.URL) {\n    try {\n      new Blob;\n      return;\n    } catch (e) {}\n  }\n\n  // Internally we use a BlobBuilder implementation to base Blob off of\n  // in order to support older browsers that only have BlobBuilder\n  var BlobBuilder = view.BlobBuilder || view.WebKitBlobBuilder || view.MozBlobBuilder || (function(view) {\n    var\n        get_class = function(object) {\n        return Object.prototype.toString.call(object).match(/^\\[object\\s(.*)\\]$/)[1];\n      }\n      , FakeBlobBuilder = function BlobBuilder() {\n        this.data = [];\n      }\n      , FakeBlob = function Blob(data, type, encoding) {\n        this.data = data;\n        this.size = data.length;\n        this.type = type;\n        this.encoding = encoding;\n      }\n      , FBB_proto = FakeBlobBuilder.prototype\n      , FB_proto = FakeBlob.prototype\n      , FileReaderSync = view.FileReaderSync\n      , FileException = function(type) {\n        this.code = this[this.name = type];\n      }\n      , file_ex_codes = (\n          \"NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR \"\n        + \"NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR\"\n      ).split(\" \")\n      , file_ex_code = file_ex_codes.length\n      , real_URL = view.URL || view.webkitURL || view\n      , real_create_object_URL = real_URL.createObjectURL\n      , real_revoke_object_URL = real_URL.revokeObjectURL\n      , URL = real_URL\n      , btoa = view.btoa\n      , atob = view.atob\n\n      , ArrayBuffer = view.ArrayBuffer\n      , Uint8Array = view.Uint8Array\n\n      , origin = /^[\\w-]+:\\/*\\[?[\\w\\.:-]+\\]?(?::[0-9]+)?/\n    ;\n    FakeBlob.fake = FB_proto.fake = true;\n    while (file_ex_code--) {\n      FileException.prototype[file_ex_codes[file_ex_code]] = file_ex_code + 1;\n    }\n    // Polyfill URL\n    if (!real_URL.createObjectURL) {\n      URL = view.URL = function(uri) {\n        var\n            uri_info = document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")\n          , uri_origin\n        ;\n        uri_info.href = uri;\n        if (!(\"origin\" in uri_info)) {\n          if (uri_info.protocol.toLowerCase() === \"data:\") {\n            uri_info.origin = null;\n          } else {\n            uri_origin = uri.match(origin);\n            uri_info.origin = uri_origin && uri_origin[1];\n          }\n        }\n        return uri_info;\n      };\n    }\n    URL.createObjectURL = function(blob) {\n      var\n          type = blob.type\n        , data_URI_header\n      ;\n      if (type === null) {\n        type = \"application/octet-stream\";\n      }\n      if (blob instanceof FakeBlob) {\n        data_URI_header = \"data:\" + type;\n        if (blob.encoding === \"base64\") {\n          return data_URI_header + \";base64,\" + blob.data;\n        } else if (blob.encoding === \"URI\") {\n          return data_URI_header + \",\" + decodeURIComponent(blob.data);\n        } if (btoa) {\n          return data_URI_header + \";base64,\" + btoa(blob.data);\n        } else {\n          return data_URI_header + \",\" + encodeURIComponent(blob.data);\n        }\n      } else if (real_create_object_URL) {\n        return real_create_object_URL.call(real_URL, blob);\n      }\n    };\n    URL.revokeObjectURL = function(object_URL) {\n      if (object_URL.substring(0, 5) !== \"data:\" && real_revoke_object_URL) {\n        real_revoke_object_URL.call(real_URL, object_URL);\n      }\n    };\n    FBB_proto.append = function(data/*, endings*/) {\n      var bb = this.data;\n      // decode data to a binary string\n      if (Uint8Array && (data instanceof ArrayBuffer || data instanceof Uint8Array)) {\n        var\n            str = \"\"\n          , buf = new Uint8Array(data)\n          , i = 0\n          , buf_len = buf.length\n        ;\n        for (; i < buf_len; i++) {\n          str += String.fromCharCode(buf[i]);\n        }\n        bb.push(str);\n      } else if (get_class(data) === \"Blob\" || get_class(data) === \"File\") {\n        if (FileReaderSync) {\n          var fr = new FileReaderSync;\n          bb.push(fr.readAsBinaryString(data));\n        } else {\n          // async FileReader won't work as BlobBuilder is sync\n          throw new FileException(\"NOT_READABLE_ERR\");\n        }\n      } else if (data instanceof FakeBlob) {\n        if (data.encoding === \"base64\" && atob) {\n          bb.push(atob(data.data));\n        } else if (data.encoding === \"URI\") {\n          bb.push(decodeURIComponent(data.data));\n        } else if (data.encoding === \"raw\") {\n          bb.push(data.data);\n        }\n      } else {\n        if (typeof data !== \"string\") {\n          data += \"\"; // convert unsupported types to strings\n        }\n        // decode UTF-16 to binary string\n        bb.push(unescape(encodeURIComponent(data)));\n      }\n    };\n    FBB_proto.getBlob = function(type) {\n      if (!arguments.length) {\n        type = null;\n      }\n      return new FakeBlob(this.data.join(\"\"), type, \"raw\");\n    };\n    FBB_proto.toString = function() {\n      return \"[object BlobBuilder]\";\n    };\n    FB_proto.slice = function(start, end, type) {\n      var args = arguments.length;\n      if (args < 3) {\n        type = null;\n      }\n      return new FakeBlob(\n          this.data.slice(start, args > 1 ? end : this.data.length)\n        , type\n        , this.encoding\n      );\n    };\n    FB_proto.toString = function() {\n      return \"[object Blob]\";\n    };\n    FB_proto.close = function() {\n      this.size = 0;\n      delete this.data;\n    };\n    return FakeBlobBuilder;\n  }(view));\n\n  view.Blob = function(blobParts, options) {\n    var type = options ? (options.type || \"\") : \"\";\n    var builder = new BlobBuilder();\n    if (blobParts) {\n      for (var i = 0, len = blobParts.length; i < len; i++) {\n        if (Uint8Array && blobParts[i] instanceof Uint8Array) {\n          builder.append(blobParts[i].buffer);\n        }\n        else {\n          builder.append(blobParts[i]);\n        }\n      }\n    }\n    var blob = builder.getBlob(type);\n    if (!blob.slice && blob.webkitSlice) {\n      blob.slice = blob.webkitSlice;\n    }\n    return blob;\n  };\n\n  var getPrototypeOf = Object.getPrototypeOf || function(object) {\n    return object.__proto__;\n  };\n  view.Blob.prototype = getPrototypeOf(new view.Blob());\n}(typeof self !== \"undefined\" && self || typeof window !== \"undefined\" && window || this.content || this));\n\n(function (root, factory) {\n    'use strict';\n    var isElectron = typeof module === 'object' && process && process.versions && process.versions.electron;\n    if (!isElectron && typeof module === 'object') {\n        module.exports = factory;\n    } else if (true) {\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n            return factory;\n        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {\n        root.MediumEditor = factory;\n    }\n}(this, function () {\n\n    'use strict';\n\nfunction MediumEditor(elements, options) {\n    'use strict';\n    return this.init(elements, options);\n}\n\nMediumEditor.extensions = {};\n/*jshint unused: true */\n(function (window) {\n    'use strict';\n\n    function copyInto(overwrite, dest) {\n        var prop,\n            sources = Array.prototype.slice.call(arguments, 2);\n        dest = dest || {};\n        for (var i = 0; i < sources.length; i++) {\n            var source = sources[i];\n            if (source) {\n                for (prop in source) {\n                    if (source.hasOwnProperty(prop) &&\n                        typeof source[prop] !== 'undefined' &&\n                        (overwrite || dest.hasOwnProperty(prop) === false)) {\n                        dest[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        return dest;\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/Node/contains\n    // Some browsers (including phantom) don't return true for Node.contains(child)\n    // if child is a text node.  Detect these cases here and use a fallback\n    // for calls to Util.isDescendant()\n    var nodeContainsWorksWithTextNodes = false;\n    try {\n        var testParent = document.createElement('div'),\n            testText = document.createTextNode(' ');\n        testParent.appendChild(testText);\n        nodeContainsWorksWithTextNodes = testParent.contains(testText);\n    } catch (exc) {}\n\n    var Util = {\n\n        // http://stackoverflow.com/questions/17907445/how-to-detect-ie11#comment30165888_17907562\n        // by rg89\n        isIE: ((navigator.appName === 'Microsoft Internet Explorer') || ((navigator.appName === 'Netscape') && (new RegExp('Trident/.*rv:([0-9]{1,}[.0-9]{0,})').exec(navigator.userAgent) !== null))),\n\n        isEdge: (/Edge\\/\\d+/).exec(navigator.userAgent) !== null,\n\n        // if firefox\n        isFF: (navigator.userAgent.toLowerCase().indexOf('firefox') > -1),\n\n        // http://stackoverflow.com/a/11752084/569101\n        isMac: (window.navigator.platform.toUpperCase().indexOf('MAC') >= 0),\n\n        // https://github.com/jashkenas/underscore\n        // Lonely letter MUST USE the uppercase code\n        keyCode: {\n            BACKSPACE: 8,\n            TAB: 9,\n            ENTER: 13,\n            ESCAPE: 27,\n            SPACE: 32,\n            DELETE: 46,\n            K: 75, // K keycode, and not k\n            M: 77,\n            V: 86\n        },\n\n        /**\n         * Returns true if it's metaKey on Mac, or ctrlKey on non-Mac.\n         * See #591\n         */\n        isMetaCtrlKey: function (event) {\n            if ((Util.isMac && event.metaKey) || (!Util.isMac && event.ctrlKey)) {\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * Returns true if the key associated to the event is inside keys array\n         *\n         * @see : https://github.com/jquery/jquery/blob/0705be475092aede1eddae01319ec931fb9c65fc/src/event.js#L473-L484\n         * @see : http://stackoverflow.com/q/4471582/569101\n         */\n        isKey: function (event, keys) {\n            var keyCode = Util.getKeyCode(event);\n\n            // it's not an array let's just compare strings!\n            if (false === Array.isArray(keys)) {\n                return keyCode === keys;\n            }\n\n            if (-1 === keys.indexOf(keyCode)) {\n                return false;\n            }\n\n            return true;\n        },\n\n        getKeyCode: function (event) {\n            var keyCode = event.which;\n\n            // getting the key code from event\n            if (null === keyCode) {\n                keyCode = event.charCode !== null ? event.charCode : event.keyCode;\n            }\n\n            return keyCode;\n        },\n\n        blockContainerElementNames: [\n            // elements our editor generates\n            'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'pre', 'ul', 'li', 'ol',\n            // all other known block elements\n            'address', 'article', 'aside', 'audio', 'canvas', 'dd', 'dl', 'dt', 'fieldset',\n            'figcaption', 'figure', 'footer', 'form', 'header', 'hgroup', 'main', 'nav',\n            'noscript', 'output', 'section', 'video',\n            'table', 'thead', 'tbody', 'tfoot', 'tr', 'th', 'td'\n        ],\n\n        emptyElementNames: ['br', 'col', 'colgroup', 'hr', 'img', 'input', 'source', 'wbr'],\n\n        extend: function extend(/* dest, source1, source2, ...*/) {\n            var args = [true].concat(Array.prototype.slice.call(arguments));\n            return copyInto.apply(this, args);\n        },\n\n        defaults: function defaults(/*dest, source1, source2, ...*/) {\n            var args = [false].concat(Array.prototype.slice.call(arguments));\n            return copyInto.apply(this, args);\n        },\n\n        /*\n         * Create a link around the provided text nodes which must be adjacent to each other and all be\n         * descendants of the same closest block container. If the preconditions are not met, unexpected\n         * behavior will result.\n         */\n        createLink: function (document, textNodes, href, target) {\n            var anchor = document.createElement('a');\n            Util.moveTextRangeIntoElement(textNodes[0], textNodes[textNodes.length - 1], anchor);\n            anchor.setAttribute('href', href);\n            if (target) {\n                anchor.setAttribute('target', target);\n            }\n            return anchor;\n        },\n\n        /*\n         * Given the provided match in the format {start: 1, end: 2} where start and end are indices into the\n         * textContent of the provided element argument, modify the DOM inside element to ensure that the text\n         * identified by the provided match can be returned as text nodes that contain exactly that text, without\n         * any additional text at the beginning or end of the returned array of adjacent text nodes.\n         *\n         * The only DOM manipulation performed by this function is splitting the text nodes, non-text nodes are\n         * not affected in any way.\n         */\n        findOrCreateMatchingTextNodes: function (document, element, match) {\n            var treeWalker = document.createTreeWalker(element, NodeFilter.SHOW_ALL, null, false),\n                matchedNodes = [],\n                currentTextIndex = 0,\n                startReached = false,\n                currentNode = null,\n                newNode = null;\n\n            while ((currentNode = treeWalker.nextNode()) !== null) {\n                if (currentNode.nodeType > 3) {\n                    continue;\n                } else if (currentNode.nodeType === 3) {\n                    if (!startReached && match.start < (currentTextIndex + currentNode.nodeValue.length)) {\n                        startReached = true;\n                        newNode = Util.splitStartNodeIfNeeded(currentNode, match.start, currentTextIndex);\n                    }\n                    if (startReached) {\n                        Util.splitEndNodeIfNeeded(currentNode, newNode, match.end, currentTextIndex);\n                    }\n                    if (startReached && currentTextIndex === match.end) {\n                        break; // Found the node(s) corresponding to the link. Break out and move on to the next.\n                    } else if (startReached && currentTextIndex > (match.end + 1)) {\n                        throw new Error('PerformLinking overshot the target!'); // should never happen...\n                    }\n\n                    if (startReached) {\n                        matchedNodes.push(newNode || currentNode);\n                    }\n\n                    currentTextIndex += currentNode.nodeValue.length;\n                    if (newNode !== null) {\n                        currentTextIndex += newNode.nodeValue.length;\n                        // Skip the newNode as we'll already have pushed it to the matches\n                        treeWalker.nextNode();\n                    }\n                    newNode = null;\n                } else if (currentNode.tagName.toLowerCase() === 'img') {\n                    if (!startReached && (match.start <= currentTextIndex)) {\n                        startReached = true;\n                    }\n                    if (startReached) {\n                        matchedNodes.push(currentNode);\n                    }\n                }\n            }\n            return matchedNodes;\n        },\n\n        /*\n         * Given the provided text node and text coordinates, split the text node if needed to make it align\n         * precisely with the coordinates.\n         *\n         * This function is intended to be called from Util.findOrCreateMatchingTextNodes.\n         */\n        splitStartNodeIfNeeded: function (currentNode, matchStartIndex, currentTextIndex) {\n            if (matchStartIndex !== currentTextIndex) {\n                return currentNode.splitText(matchStartIndex - currentTextIndex);\n            }\n            return null;\n        },\n\n        /*\n         * Given the provided text node and text coordinates, split the text node if needed to make it align\n         * precisely with the coordinates. The newNode argument should from the result of Util.splitStartNodeIfNeeded,\n         * if that function has been called on the same currentNode.\n         *\n         * This function is intended to be called from Util.findOrCreateMatchingTextNodes.\n         */\n        splitEndNodeIfNeeded: function (currentNode, newNode, matchEndIndex, currentTextIndex) {\n            var textIndexOfEndOfFarthestNode,\n                endSplitPoint;\n            textIndexOfEndOfFarthestNode = currentTextIndex + (newNode || currentNode).nodeValue.length +\n                    (newNode ? currentNode.nodeValue.length : 0) -\n                    1;\n            endSplitPoint = (newNode || currentNode).nodeValue.length -\n                    (textIndexOfEndOfFarthestNode + 1 - matchEndIndex);\n            if (textIndexOfEndOfFarthestNode >= matchEndIndex &&\n                    currentTextIndex !== textIndexOfEndOfFarthestNode &&\n                    endSplitPoint !== 0) {\n                (newNode || currentNode).splitText(endSplitPoint);\n            }\n        },\n\n        /*\n        * Take an element, and break up all of its text content into unique pieces such that:\n         * 1) All text content of the elements are in separate blocks. No piece of text content should span\n         *    across multiple blocks. This means no element return by this function should have\n         *    any blocks as children.\n         * 2) The union of the textcontent of all of the elements returned here covers all\n         *    of the text within the element.\n         *\n         *\n         * EXAMPLE:\n         * In the event that we have something like:\n         *\n         * <blockquote>\n         *   <p>Some Text</p>\n         *   <ol>\n         *     <li>List Item 1</li>\n         *     <li>List Item 2</li>\n         *   </ol>\n         * </blockquote>\n         *\n         * This function would return these elements as an array:\n         *   [ <p>Some Text</p>, <li>List Item 1</li>, <li>List Item 2</li> ]\n         *\n         * Since the <blockquote> and <ol> elements contain blocks within them they are not returned.\n         * Since the <p> and <li>'s don't contain block elements and cover all the text content of the\n         * <blockquote> container, they are the elements returned.\n         */\n        splitByBlockElements: function (element) {\n            if (element.nodeType !== 3 && element.nodeType !== 1) {\n                return [];\n            }\n\n            var toRet = [],\n                blockElementQuery = MediumEditor.util.blockContainerElementNames.join(',');\n\n            if (element.nodeType === 3 || element.querySelectorAll(blockElementQuery).length === 0) {\n                return [element];\n            }\n\n            for (var i = 0; i < element.childNodes.length; i++) {\n                var child = element.childNodes[i];\n                if (child.nodeType === 3) {\n                    toRet.push(child);\n                } else if (child.nodeType === 1) {\n                    var blockElements = child.querySelectorAll(blockElementQuery);\n                    if (blockElements.length === 0) {\n                        toRet.push(child);\n                    } else {\n                        toRet = toRet.concat(MediumEditor.util.splitByBlockElements(child));\n                    }\n                }\n            }\n\n            return toRet;\n        },\n\n        // Find the next node in the DOM tree that represents any text that is being\n        // displayed directly next to the targetNode (passed as an argument)\n        // Text that appears directly next to the current node can be:\n        //  - A sibling text node\n        //  - A descendant of a sibling element\n        //  - A sibling text node of an ancestor\n        //  - A descendant of a sibling element of an ancestor\n        findAdjacentTextNodeWithContent: function findAdjacentTextNodeWithContent(rootNode, targetNode, ownerDocument) {\n            var pastTarget = false,\n                nextNode,\n                nodeIterator = ownerDocument.createNodeIterator(rootNode, NodeFilter.SHOW_TEXT, null, false);\n\n            // Use a native NodeIterator to iterate over all the text nodes that are descendants\n            // of the rootNode.  Once past the targetNode, choose the first non-empty text node\n            nextNode = nodeIterator.nextNode();\n            while (nextNode) {\n                if (nextNode === targetNode) {\n                    pastTarget = true;\n                } else if (pastTarget) {\n                    if (nextNode.nodeType === 3 && nextNode.nodeValue && nextNode.nodeValue.trim().length > 0) {\n                        break;\n                    }\n                }\n                nextNode = nodeIterator.nextNode();\n            }\n\n            return nextNode;\n        },\n\n        // Find an element's previous sibling within a medium-editor element\n        // If one doesn't exist, find the closest ancestor's previous sibling\n        findPreviousSibling: function (node) {\n            if (!node || Util.isMediumEditorElement(node)) {\n                return false;\n            }\n\n            var previousSibling = node.previousSibling;\n            while (!previousSibling && !Util.isMediumEditorElement(node.parentNode)) {\n                node = node.parentNode;\n                previousSibling = node.previousSibling;\n            }\n\n            return previousSibling;\n        },\n\n        isDescendant: function isDescendant(parent, child, checkEquality) {\n            if (!parent || !child) {\n                return false;\n            }\n            if (parent === child) {\n                return !!checkEquality;\n            }\n            // If parent is not an element, it can't have any descendants\n            if (parent.nodeType !== 1) {\n                return false;\n            }\n            if (nodeContainsWorksWithTextNodes || child.nodeType !== 3) {\n                return parent.contains(child);\n            }\n            var node = child.parentNode;\n            while (node !== null) {\n                if (node === parent) {\n                    return true;\n                }\n                node = node.parentNode;\n            }\n            return false;\n        },\n\n        // https://github.com/jashkenas/underscore\n        isElement: function isElement(obj) {\n            return !!(obj && obj.nodeType === 1);\n        },\n\n        // https://github.com/jashkenas/underscore\n        throttle: function (func, wait) {\n            var THROTTLE_INTERVAL = 50,\n                context,\n                args,\n                result,\n                timeout = null,\n                previous = 0,\n                later = function () {\n                    previous = Date.now();\n                    timeout = null;\n                    result = func.apply(context, args);\n                    if (!timeout) {\n                        context = args = null;\n                    }\n                };\n\n            if (!wait && wait !== 0) {\n                wait = THROTTLE_INTERVAL;\n            }\n\n            return function () {\n                var now = Date.now(),\n                    remaining = wait - (now - previous);\n\n                context = this;\n                args = arguments;\n                if (remaining <= 0 || remaining > wait) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        timeout = null;\n                    }\n                    previous = now;\n                    result = func.apply(context, args);\n                    if (!timeout) {\n                        context = args = null;\n                    }\n                } else if (!timeout) {\n                    timeout = setTimeout(later, remaining);\n                }\n                return result;\n            };\n        },\n\n        traverseUp: function (current, testElementFunction) {\n            if (!current) {\n                return false;\n            }\n\n            do {\n                if (current.nodeType === 1) {\n                    if (testElementFunction(current)) {\n                        return current;\n                    }\n                    // do not traverse upwards past the nearest containing editor\n                    if (Util.isMediumEditorElement(current)) {\n                        return false;\n                    }\n                }\n\n                current = current.parentNode;\n            } while (current);\n\n            return false;\n        },\n\n        htmlEntities: function (str) {\n            // converts special characters (like <) into their escaped/encoded values (like &lt;).\n            // This allows you to show to display the string without the browser reading it as HTML.\n            return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n        },\n\n        // http://stackoverflow.com/questions/6690752/insert-html-at-caret-in-a-contenteditable-div\n        insertHTMLCommand: function (doc, html) {\n            var selection, range, el, fragment, node, lastNode, toReplace,\n                res = false,\n                ecArgs = ['insertHTML', false, html];\n\n            /* Edge's implementation of insertHTML is just buggy right now:\n             * - Doesn't allow leading white space at the beginning of an element\n             * - Found a case when a <font size=\"2\"> tag was inserted when calling alignCenter inside a blockquote\n             *\n             * There are likely other bugs, these are just the ones we found so far.\n             * For now, let's just use the same fallback we did for IE\n             */\n            if (!MediumEditor.util.isEdge && doc.queryCommandSupported('insertHTML')) {\n                try {\n                    return doc.execCommand.apply(doc, ecArgs);\n                } catch (ignore) {}\n            }\n\n            selection = doc.getSelection();\n            if (selection.rangeCount) {\n                range = selection.getRangeAt(0);\n                toReplace = range.commonAncestorContainer;\n\n                // https://github.com/yabwe/medium-editor/issues/748\n                // If the selection is an empty editor element, create a temporary text node inside of the editor\n                // and select it so that we don't delete the editor element\n                if (Util.isMediumEditorElement(toReplace) && !toReplace.firstChild) {\n                    range.selectNode(toReplace.appendChild(doc.createTextNode('')));\n                } else if ((toReplace.nodeType === 3 && range.startOffset === 0 && range.endOffset === toReplace.nodeValue.length) ||\n                        (toReplace.nodeType !== 3 && toReplace.innerHTML === range.toString())) {\n                    // Ensure range covers maximum amount of nodes as possible\n                    // By moving up the DOM and selecting ancestors whose only child is the range\n                    while (!Util.isMediumEditorElement(toReplace) &&\n                            toReplace.parentNode &&\n                            toReplace.parentNode.childNodes.length === 1 &&\n                            !Util.isMediumEditorElement(toReplace.parentNode)) {\n                        toReplace = toReplace.parentNode;\n                    }\n                    range.selectNode(toReplace);\n                }\n                range.deleteContents();\n\n                el = doc.createElement('div');\n                el.innerHTML = html;\n                fragment = doc.createDocumentFragment();\n                while (el.firstChild) {\n                    node = el.firstChild;\n                    lastNode = fragment.appendChild(node);\n                }\n                range.insertNode(fragment);\n\n                // Preserve the selection:\n                if (lastNode) {\n                    range = range.cloneRange();\n                    range.setStartAfter(lastNode);\n                    range.collapse(true);\n                    MediumEditor.selection.selectRange(doc, range);\n                }\n                res = true;\n            }\n\n            // https://github.com/yabwe/medium-editor/issues/992\n            // If we're monitoring calls to execCommand, notify listeners as if a real call had happened\n            if (doc.execCommand.callListeners) {\n                doc.execCommand.callListeners(ecArgs, res);\n            }\n            return res;\n        },\n\n        execFormatBlock: function (doc, tagName) {\n            // Get the top level block element that contains the selection\n            var blockContainer = Util.getTopBlockContainer(MediumEditor.selection.getSelectionStart(doc)),\n                childNodes;\n\n            // Special handling for blockquote\n            if (tagName === 'blockquote') {\n                if (blockContainer) {\n                    childNodes = Array.prototype.slice.call(blockContainer.childNodes);\n                    // Check if the blockquote has a block element as a child (nested blocks)\n                    if (childNodes.some(function (childNode) {\n                        return Util.isBlockContainer(childNode);\n                    })) {\n                        // FF handles blockquote differently on formatBlock\n                        // allowing nesting, we need to use outdent\n                        // https://developer.mozilla.org/en-US/docs/Rich-Text_Editing_in_Mozilla\n                        return doc.execCommand('outdent', false, null);\n                    }\n                }\n\n                // When IE blockquote needs to be called as indent\n                // http://stackoverflow.com/questions/1816223/rich-text-editor-with-blockquote-function/1821777#1821777\n                if (Util.isIE) {\n                    return doc.execCommand('indent', false, tagName);\n                }\n            }\n\n            // If the blockContainer is already the element type being passed in\n            // treat it as 'undo' formatting and just convert it to a <p>\n            if (blockContainer && tagName === blockContainer.nodeName.toLowerCase()) {\n                tagName = 'p';\n            }\n\n            // When IE we need to add <> to heading elements\n            // http://stackoverflow.com/questions/10741831/execcommand-formatblock-headings-in-ie\n            if (Util.isIE) {\n                tagName = '<' + tagName + '>';\n            }\n\n            // When FF, IE and Edge, we have to handle blockquote node seperately as 'formatblock' does not work.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand#Commands\n            if (blockContainer && blockContainer.nodeName.toLowerCase() === 'blockquote') {\n                // For IE, just use outdent\n                if (Util.isIE && tagName === '<p>') {\n                    return doc.execCommand('outdent', false, tagName);\n                }\n\n                // For Firefox and Edge, make sure there's a nested block element before calling outdent\n                if ((Util.isFF || Util.isEdge) && tagName === 'p') {\n                    childNodes = Array.prototype.slice.call(blockContainer.childNodes);\n                    // If there are some non-block elements we need to wrap everything in a <p> before we outdent\n                    if (childNodes.some(function (childNode) {\n                        return !Util.isBlockContainer(childNode);\n                    })) {\n                        doc.execCommand('formatBlock', false, tagName);\n                    }\n                    return doc.execCommand('outdent', false, tagName);\n                }\n            }\n\n            return doc.execCommand('formatBlock', false, tagName);\n        },\n\n        /**\n         * Set target to blank on the given el element\n         *\n         * TODO: not sure if this should be here\n         *\n         * When creating a link (using core -> createLink) the selection returned by Firefox will be the parent of the created link\n         * instead of the created link itself (as it is for Chrome for example), so we retrieve all \"a\" children to grab the good one by\n         * using `anchorUrl` to ensure that we are adding target=\"_blank\" on the good one.\n         * This isn't a bulletproof solution anyway ..\n         */\n        setTargetBlank: function (el, anchorUrl) {\n            var i, url = anchorUrl || false;\n            if (el.nodeName.toLowerCase() === 'a') {\n                el.target = '_blank';\n            } else {\n                el = el.getElementsByTagName('a');\n\n                for (i = 0; i < el.length; i += 1) {\n                    if (false === url || url === el[i].attributes.href.value) {\n                        el[i].target = '_blank';\n                    }\n                }\n            }\n        },\n\n        /*\n         * this function is called to explicitly remove the target='_blank' as FF holds on to _blank value even\n         * after unchecking the checkbox on anchor form\n         */\n        removeTargetBlank: function (el, anchorUrl) {\n            var i;\n            if (el.nodeName.toLowerCase() === 'a') {\n                el.removeAttribute('target');\n            } else {\n                el = el.getElementsByTagName('a');\n\n                for (i = 0; i < el.length; i += 1) {\n                    if (anchorUrl === el[i].attributes.href.value) {\n                        el[i].removeAttribute('target');\n                    }\n                }\n            }\n        },\n\n        addClassToAnchors: function (el, buttonClass) {\n            var classes = buttonClass.split(' '),\n                i,\n                j;\n            if (el.nodeName.toLowerCase() === 'a') {\n                for (j = 0; j < classes.length; j += 1) {\n                    el.classList.add(classes[j]);\n                }\n            } else {\n                el = el.getElementsByTagName('a');\n                for (i = 0; i < el.length; i += 1) {\n                    for (j = 0; j < classes.length; j += 1) {\n                        el[i].classList.add(classes[j]);\n                    }\n                }\n            }\n        },\n\n        isListItem: function (node) {\n            if (!node) {\n                return false;\n            }\n            if (node.nodeName.toLowerCase() === 'li') {\n                return true;\n            }\n\n            var parentNode = node.parentNode,\n                tagName = parentNode.nodeName.toLowerCase();\n            while (tagName === 'li' || (!Util.isBlockContainer(parentNode) && tagName !== 'div')) {\n                if (tagName === 'li') {\n                    return true;\n                }\n                parentNode = parentNode.parentNode;\n                if (parentNode) {\n                    tagName = parentNode.nodeName.toLowerCase();\n                } else {\n                    return false;\n                }\n            }\n            return false;\n        },\n\n        cleanListDOM: function (ownerDocument, element) {\n            if (element.nodeName.toLowerCase() !== 'li') {\n                return;\n            }\n\n            var list = element.parentElement;\n\n            if (list.parentElement.nodeName.toLowerCase() === 'p') { // yes we need to clean up\n                Util.unwrap(list.parentElement, ownerDocument);\n\n                // move cursor at the end of the text inside the list\n                // for some unknown reason, the cursor is moved to end of the \"visual\" line\n                MediumEditor.selection.moveCursor(ownerDocument, element.firstChild, element.firstChild.textContent.length);\n            }\n        },\n\n        /* splitDOMTree\n         *\n         * Given a root element some descendant element, split the root element\n         * into its own element containing the descendant element and all elements\n         * on the left or right side of the descendant ('right' is default)\n         *\n         * example:\n         *\n         *         <div>\n         *      /    |   \\\n         *  <span> <span> <span>\n         *   / \\    / \\    / \\\n         *  1   2  3   4  5   6\n         *\n         *  If I wanted to split this tree given the <div> as the root and \"4\" as the leaf\n         *  the result would be (the prime ' marks indicates nodes that are created as clones):\n         *\n         *   SPLITTING OFF 'RIGHT' TREE       SPLITTING OFF 'LEFT' TREE\n         *\n         *     <div>            <div>'              <div>'      <div>\n         *      / \\              / \\                 / \\          |\n         * <span> <span>   <span>' <span>       <span> <span>   <span>\n         *   / \\    |        |      / \\           /\\     /\\       /\\\n         *  1   2   3        4     5   6         1  2   3  4     5  6\n         *\n         *  The above example represents splitting off the 'right' or 'left' part of a tree, where\n         *  the <div>' would be returned as an element not appended to the DOM, and the <div>\n         *  would remain in place where it was\n         *\n        */\n        splitOffDOMTree: function (rootNode, leafNode, splitLeft) {\n            var splitOnNode = leafNode,\n                createdNode = null,\n                splitRight = !splitLeft;\n\n            // loop until we hit the root\n            while (splitOnNode !== rootNode) {\n                var currParent = splitOnNode.parentNode,\n                    newParent = currParent.cloneNode(false),\n                    targetNode = (splitRight ? splitOnNode : currParent.firstChild),\n                    appendLast;\n\n                // Create a new parent element which is a clone of the current parent\n                if (createdNode) {\n                    if (splitRight) {\n                        // If we're splitting right, add previous created element before siblings\n                        newParent.appendChild(createdNode);\n                    } else {\n                        // If we're splitting left, add previous created element last\n                        appendLast = createdNode;\n                    }\n                }\n                createdNode = newParent;\n\n                while (targetNode) {\n                    var sibling = targetNode.nextSibling;\n                    // Special handling for the 'splitNode'\n                    if (targetNode === splitOnNode) {\n                        if (!targetNode.hasChildNodes()) {\n                            targetNode.parentNode.removeChild(targetNode);\n                        } else {\n                            // For the node we're splitting on, if it has children, we need to clone it\n                            // and not just move it\n                            targetNode = targetNode.cloneNode(false);\n                        }\n                        // If the resulting split node has content, add it\n                        if (targetNode.textContent) {\n                            createdNode.appendChild(targetNode);\n                        }\n\n                        targetNode = (splitRight ? sibling : null);\n                    } else {\n                        // For general case, just remove the element and only\n                        // add it to the split tree if it contains something\n                        targetNode.parentNode.removeChild(targetNode);\n                        if (targetNode.hasChildNodes() || targetNode.textContent) {\n                            createdNode.appendChild(targetNode);\n                        }\n\n                        targetNode = sibling;\n                    }\n                }\n\n                // If we had an element we wanted to append at the end, do that now\n                if (appendLast) {\n                    createdNode.appendChild(appendLast);\n                }\n\n                splitOnNode = currParent;\n            }\n\n            return createdNode;\n        },\n\n        moveTextRangeIntoElement: function (startNode, endNode, newElement) {\n            if (!startNode || !endNode) {\n                return false;\n            }\n\n            var rootNode = Util.findCommonRoot(startNode, endNode);\n            if (!rootNode) {\n                return false;\n            }\n\n            if (endNode === startNode) {\n                var temp = startNode.parentNode,\n                    sibling = startNode.nextSibling;\n                temp.removeChild(startNode);\n                newElement.appendChild(startNode);\n                if (sibling) {\n                    temp.insertBefore(newElement, sibling);\n                } else {\n                    temp.appendChild(newElement);\n                }\n                return newElement.hasChildNodes();\n            }\n\n            // create rootChildren array which includes all the children\n            // we care about\n            var rootChildren = [],\n                firstChild,\n                lastChild,\n                nextNode;\n            for (var i = 0; i < rootNode.childNodes.length; i++) {\n                nextNode = rootNode.childNodes[i];\n                if (!firstChild) {\n                    if (Util.isDescendant(nextNode, startNode, true)) {\n                        firstChild = nextNode;\n                    }\n                } else {\n                    if (Util.isDescendant(nextNode, endNode, true)) {\n                        lastChild = nextNode;\n                        break;\n                    } else {\n                        rootChildren.push(nextNode);\n                    }\n                }\n            }\n\n            var afterLast = lastChild.nextSibling,\n                fragment = rootNode.ownerDocument.createDocumentFragment();\n\n            // build up fragment on startNode side of tree\n            if (firstChild === startNode) {\n                firstChild.parentNode.removeChild(firstChild);\n                fragment.appendChild(firstChild);\n            } else {\n                fragment.appendChild(Util.splitOffDOMTree(firstChild, startNode));\n            }\n\n            // add any elements between firstChild & lastChild\n            rootChildren.forEach(function (element) {\n                element.parentNode.removeChild(element);\n                fragment.appendChild(element);\n            });\n\n            // build up fragment on endNode side of the tree\n            if (lastChild === endNode) {\n                lastChild.parentNode.removeChild(lastChild);\n                fragment.appendChild(lastChild);\n            } else {\n                fragment.appendChild(Util.splitOffDOMTree(lastChild, endNode, true));\n            }\n\n            // Add fragment into passed in element\n            newElement.appendChild(fragment);\n\n            if (lastChild.parentNode === rootNode) {\n                // If last child is in the root, insert newElement in front of it\n                rootNode.insertBefore(newElement, lastChild);\n            } else if (afterLast) {\n                // If last child was removed, but it had a sibling, insert in front of it\n                rootNode.insertBefore(newElement, afterLast);\n            } else {\n                // lastChild was removed and was the last actual element just append\n                rootNode.appendChild(newElement);\n            }\n\n            return newElement.hasChildNodes();\n        },\n\n        /* based on http://stackoverflow.com/a/6183069 */\n        depthOfNode: function (inNode) {\n            var theDepth = 0,\n                node = inNode;\n            while (node.parentNode !== null) {\n                node = node.parentNode;\n                theDepth++;\n            }\n            return theDepth;\n        },\n\n        findCommonRoot: function (inNode1, inNode2) {\n            var depth1 = Util.depthOfNode(inNode1),\n                depth2 = Util.depthOfNode(inNode2),\n                node1 = inNode1,\n                node2 = inNode2;\n\n            while (depth1 !== depth2) {\n                if (depth1 > depth2) {\n                    node1 = node1.parentNode;\n                    depth1 -= 1;\n                } else {\n                    node2 = node2.parentNode;\n                    depth2 -= 1;\n                }\n            }\n\n            while (node1 !== node2) {\n                node1 = node1.parentNode;\n                node2 = node2.parentNode;\n            }\n\n            return node1;\n        },\n        /* END - based on http://stackoverflow.com/a/6183069 */\n\n        isElementAtBeginningOfBlock: function (node) {\n            var textVal,\n                sibling;\n            while (!Util.isBlockContainer(node) && !Util.isMediumEditorElement(node)) {\n                sibling = node;\n                while (sibling = sibling.previousSibling) {\n                    textVal = sibling.nodeType === 3 ? sibling.nodeValue : sibling.textContent;\n                    if (textVal.length > 0) {\n                        return false;\n                    }\n                }\n                node = node.parentNode;\n            }\n            return true;\n        },\n\n        isMediumEditorElement: function (element) {\n            return element && element.getAttribute && !!element.getAttribute('data-medium-editor-element');\n        },\n\n        getContainerEditorElement: function (element) {\n            return Util.traverseUp(element, function (node) {\n                return Util.isMediumEditorElement(node);\n            });\n        },\n\n        isBlockContainer: function (element) {\n            return element && element.nodeType !== 3 && Util.blockContainerElementNames.indexOf(element.nodeName.toLowerCase()) !== -1;\n        },\n\n        /* Finds the closest ancestor which is a block container element\n         * If element is within editor element but not within any other block element,\n         * the editor element is returned\n         */\n        getClosestBlockContainer: function (node) {\n            return Util.traverseUp(node, function (node) {\n                return Util.isBlockContainer(node) || Util.isMediumEditorElement(node);\n            });\n        },\n\n        /* Finds highest level ancestor element which is a block container element\n         * If element is within editor element but not within any other block element,\n         * the editor element is returned\n         */\n        getTopBlockContainer: function (element) {\n            var topBlock = Util.isBlockContainer(element) ? element : false;\n            Util.traverseUp(element, function (el) {\n                if (Util.isBlockContainer(el)) {\n                    topBlock = el;\n                }\n                if (!topBlock && Util.isMediumEditorElement(el)) {\n                    topBlock = el;\n                    return true;\n                }\n                return false;\n            });\n            return topBlock;\n        },\n\n        getFirstSelectableLeafNode: function (element) {\n            while (element && element.firstChild) {\n                element = element.firstChild;\n            }\n\n            // We don't want to set the selection to an element that can't have children, this messes up Gecko.\n            element = Util.traverseUp(element, function (el) {\n                return Util.emptyElementNames.indexOf(el.nodeName.toLowerCase()) === -1;\n            });\n            // Selecting at the beginning of a table doesn't work in PhantomJS.\n            if (element.nodeName.toLowerCase() === 'table') {\n                var firstCell = element.querySelector('th, td');\n                if (firstCell) {\n                    element = firstCell;\n                }\n            }\n            return element;\n        },\n\n        // TODO: remove getFirstTextNode AND _getFirstTextNode when jumping in 6.0.0 (no code references)\n        getFirstTextNode: function (element) {\n            Util.warn('getFirstTextNode is deprecated and will be removed in version 6.0.0');\n            return Util._getFirstTextNode(element);\n        },\n\n        _getFirstTextNode: function (element) {\n            if (element.nodeType === 3) {\n                return element;\n            }\n\n            for (var i = 0; i < element.childNodes.length; i++) {\n                var textNode = Util._getFirstTextNode(element.childNodes[i]);\n                if (textNode !== null) {\n                    return textNode;\n                }\n            }\n            return null;\n        },\n\n        ensureUrlHasProtocol: function (url) {\n            if (url.indexOf('://') === -1) {\n                return 'http://' + url;\n            }\n            return url;\n        },\n\n        warn: function () {\n            if (window.console !== undefined && typeof window.console.warn === 'function') {\n                window.console.warn.apply(window.console, arguments);\n            }\n        },\n\n        deprecated: function (oldName, newName, version) {\n            // simple deprecation warning mechanism.\n            var m = oldName + ' is deprecated, please use ' + newName + ' instead.';\n            if (version) {\n                m += ' Will be removed in ' + version;\n            }\n            Util.warn(m);\n        },\n\n        deprecatedMethod: function (oldName, newName, args, version) {\n            // run the replacement and warn when someone calls a deprecated method\n            Util.deprecated(oldName, newName, version);\n            if (typeof this[newName] === 'function') {\n                this[newName].apply(this, args);\n            }\n        },\n\n        cleanupAttrs: function (el, attrs) {\n            attrs.forEach(function (attr) {\n                el.removeAttribute(attr);\n            });\n        },\n\n        cleanupTags: function (el, tags) {\n            tags.forEach(function (tag) {\n                if (el.nodeName.toLowerCase() === tag) {\n                    el.parentNode.removeChild(el);\n                }\n            });\n        },\n\n        // get the closest parent\n        getClosestTag: function (el, tag) {\n            return Util.traverseUp(el, function (element) {\n                return element.nodeName.toLowerCase() === tag.toLowerCase();\n            });\n        },\n\n        unwrap: function (el, doc) {\n            var fragment = doc.createDocumentFragment(),\n                nodes = Array.prototype.slice.call(el.childNodes);\n\n            // cast nodeList to array since appending child\n            // to a different node will alter length of el.childNodes\n            for (var i = 0; i < nodes.length; i++) {\n                fragment.appendChild(nodes[i]);\n            }\n\n            if (fragment.childNodes.length) {\n                el.parentNode.replaceChild(fragment, el);\n            } else {\n                el.parentNode.removeChild(el);\n            }\n        },\n\n        guid: function () {\n            function _s4() {\n                return Math\n                    .floor((1 + Math.random()) * 0x10000)\n                    .toString(16)\n                    .substring(1);\n            }\n\n            return _s4() + _s4() + '-' + _s4() + '-' + _s4() + '-' + _s4() + '-' + _s4() + _s4() + _s4();\n        }\n    };\n\n    MediumEditor.util = Util;\n}(window));\n\n(function () {\n    'use strict';\n\n    var Extension = function (options) {\n        MediumEditor.util.extend(this, options);\n    };\n\n    Extension.extend = function (protoProps) {\n        // magic extender thinger. mostly borrowed from backbone/goog.inherits\n        // place this function on some thing you want extend-able.\n        //\n        // example:\n        //\n        //      function Thing(args){\n        //          this.options = args;\n        //      }\n        //\n        //      Thing.prototype = { foo: \"bar\" };\n        //      Thing.extend = extenderify;\n        //\n        //      var ThingTwo = Thing.extend({ foo: \"baz\" });\n        //\n        //      var thingOne = new Thing(); // foo === \"bar\"\n        //      var thingTwo = new ThingTwo(); // foo === \"baz\"\n        //\n        //      which seems like some simply shallow copy nonsense\n        //      at first, but a lot more is going on there.\n        //\n        //      passing a `constructor` to the extend props\n        //      will cause the instance to instantiate through that\n        //      instead of the parent's constructor.\n\n        var parent = this,\n            child;\n\n        // The constructor function for the new subclass is either defined by you\n        // (the \"constructor\" property in your `extend` definition), or defaulted\n        // by us to simply call the parent's constructor.\n\n        if (protoProps && protoProps.hasOwnProperty('constructor')) {\n            child = protoProps.constructor;\n        } else {\n            child = function () {\n                return parent.apply(this, arguments);\n            };\n        }\n\n        // das statics (.extend comes over, so your subclass can have subclasses too)\n        MediumEditor.util.extend(child, parent);\n\n        // Set the prototype chain to inherit from `parent`, without calling\n        // `parent`'s constructor function.\n        var Surrogate = function () {\n            this.constructor = child;\n        };\n        Surrogate.prototype = parent.prototype;\n        child.prototype = new Surrogate();\n\n        if (protoProps) {\n            MediumEditor.util.extend(child.prototype, protoProps);\n        }\n\n        // todo: $super?\n\n        return child;\n    };\n\n    Extension.prototype = {\n        /* init: [function]\n         *\n         * Called by MediumEditor during initialization.\n         * The .base property will already have been set to\n         * current instance of MediumEditor when this is called.\n         * All helper methods will exist as well\n         */\n        init: function () {},\n\n        /* base: [MediumEditor instance]\n         *\n         * If not overriden, this will be set to the current instance\n         * of MediumEditor, before the init method is called\n         */\n        base: undefined,\n\n        /* name: [string]\n         *\n         * 'name' of the extension, used for retrieving the extension.\n         * If not set, MediumEditor will set this to be the key\n         * used when passing the extension into MediumEditor via the\n         * 'extensions' option\n         */\n        name: undefined,\n\n        /* checkState: [function (node)]\n         *\n         * If implemented, this function will be called one or more times\n         * the state of the editor & toolbar are updated.\n         * When the state is updated, the editor does the following:\n         *\n         * 1) Find the parent node containing the current selection\n         * 2) Call checkState on the extension, passing the node as an argument\n         * 3) Get the parent node of the previous node\n         * 4) Repeat steps #2 and #3 until we move outside the parent contenteditable\n         */\n        checkState: undefined,\n\n        /* destroy: [function ()]\n         *\n         * This method should remove any created html, custom event handlers\n         * or any other cleanup tasks that should be performed.\n         * If implemented, this function will be called when MediumEditor's\n         * destroy method has been called.\n         */\n        destroy: undefined,\n\n        /* As alternatives to checkState, these functions provide a more structured\n         * path to updating the state of an extension (usually a button) whenever\n         * the state of the editor & toolbar are updated.\n         */\n\n        /* queryCommandState: [function ()]\n         *\n         * If implemented, this function will be called once on each extension\n         * when the state of the editor/toolbar is being updated.\n         *\n         * If this function returns a non-null value, the extension will\n         * be ignored as the code climbs the dom tree.\n         *\n         * If this function returns true, and the setActive() function is defined\n         * setActive() will be called\n         */\n        queryCommandState: undefined,\n\n        /* isActive: [function ()]\n         *\n         * If implemented, this function will be called when MediumEditor\n         * has determined that this extension is 'active' for the current selection.\n         * This may be called when the editor & toolbar are being updated,\n         * but only if queryCommandState() or isAlreadyApplied() functions\n         * are implemented, and when called, return true.\n         */\n        isActive: undefined,\n\n        /* isAlreadyApplied: [function (node)]\n         *\n         * If implemented, this function is similar to checkState() in\n         * that it will be called repeatedly as MediumEditor moves up\n         * the DOM to update the editor & toolbar after a state change.\n         *\n         * NOTE: This function will NOT be called if checkState() has\n         * been implemented. This function will NOT be called if\n         * queryCommandState() is implemented and returns a non-null\n         * value when called\n         */\n        isAlreadyApplied: undefined,\n\n        /* setActive: [function ()]\n         *\n         * If implemented, this function is called when MediumEditor knows\n         * that this extension is currently enabled.  Currently, this\n         * function is called when updating the editor & toolbar, and\n         * only if queryCommandState() or isAlreadyApplied(node) return\n         * true when called\n         */\n        setActive: undefined,\n\n        /* setInactive: [function ()]\n         *\n         * If implemented, this function is called when MediumEditor knows\n         * that this extension is currently disabled.  Curently, this\n         * is called at the beginning of each state change for\n         * the editor & toolbar. After calling this, MediumEditor\n         * will attempt to update the extension, either via checkState()\n         * or the combination of queryCommandState(), isAlreadyApplied(node),\n         * isActive(), and setActive()\n         */\n        setInactive: undefined,\n\n        /* getInteractionElements: [function ()]\n         *\n         * If the extension renders any elements that the user can interact with,\n         * this method should be implemented and return the root element or an array\n         * containing all of the root elements. MediumEditor will call this function\n         * during interaction to see if the user clicked on something outside of the editor.\n         * The elements are used to check if the target element of a click or\n         * other user event is a descendant of any extension elements.\n         * This way, the editor can also count user interaction within editor elements as\n         * interactions with the editor, and thus not trigger 'blur'\n         */\n        getInteractionElements: undefined,\n\n        /************************ Helpers ************************\n         * The following are helpers that are either set by MediumEditor\n         * during initialization, or are helper methods which either\n         * route calls to the MediumEditor instance or provide common\n         * functionality for all extensions\n         *********************************************************/\n\n        /* window: [Window]\n         *\n         * If not overriden, this will be set to the window object\n         * to be used by MediumEditor and its extensions.  This is\n         * passed via the 'contentWindow' option to MediumEditor\n         * and is the global 'window' object by default\n         */\n        'window': undefined,\n\n        /* document: [Document]\n         *\n         * If not overriden, this will be set to the document object\n         * to be used by MediumEditor and its extensions. This is\n         * passed via the 'ownerDocument' optin to MediumEditor\n         * and is the global 'document' object by default\n         */\n        'document': undefined,\n\n        /* getEditorElements: [function ()]\n         *\n         * Helper function which returns an array containing\n         * all the contenteditable elements for this instance\n         * of MediumEditor\n         */\n        getEditorElements: function () {\n            return this.base.elements;\n        },\n\n        /* getEditorId: [function ()]\n         *\n         * Helper function which returns a unique identifier\n         * for this instance of MediumEditor\n         */\n        getEditorId: function () {\n            return this.base.id;\n        },\n\n        /* getEditorOptions: [function (option)]\n         *\n         * Helper function which returns the value of an option\n         * used to initialize this instance of MediumEditor\n         */\n        getEditorOption: function (option) {\n            return this.base.options[option];\n        }\n    };\n\n    /* List of method names to add to the prototype of Extension\n     * Each of these methods will be defined as helpers that\n     * just call directly into the MediumEditor instance.\n     *\n     * example for 'on' method:\n     * Extension.prototype.on = function () {\n     *     return this.base.on.apply(this.base, arguments);\n     * }\n     */\n    [\n        // general helpers\n        'execAction',\n\n        // event handling\n        'on',\n        'off',\n        'subscribe',\n        'trigger'\n\n    ].forEach(function (helper) {\n        Extension.prototype[helper] = function () {\n            return this.base[helper].apply(this.base, arguments);\n        };\n    });\n\n    MediumEditor.Extension = Extension;\n})();\n\n(function () {\n    'use strict';\n\n    function filterOnlyParentElements(node) {\n        if (MediumEditor.util.isBlockContainer(node)) {\n            return NodeFilter.FILTER_ACCEPT;\n        } else {\n            return NodeFilter.FILTER_SKIP;\n        }\n    }\n\n    var Selection = {\n        findMatchingSelectionParent: function (testElementFunction, contentWindow) {\n            var selection = contentWindow.getSelection(),\n                range,\n                current;\n\n            if (selection.rangeCount === 0) {\n                return false;\n            }\n\n            range = selection.getRangeAt(0);\n            current = range.commonAncestorContainer;\n\n            return MediumEditor.util.traverseUp(current, testElementFunction);\n        },\n\n        getSelectionElement: function (contentWindow) {\n            return this.findMatchingSelectionParent(function (el) {\n                return MediumEditor.util.isMediumEditorElement(el);\n            }, contentWindow);\n        },\n\n        // http://stackoverflow.com/questions/17678843/cant-restore-selection-after-html-modify-even-if-its-the-same-html\n        // Tim Down\n        exportSelection: function (root, doc) {\n            if (!root) {\n                return null;\n            }\n\n            var selectionState = null,\n                selection = doc.getSelection();\n\n            if (selection.rangeCount > 0) {\n                var range = selection.getRangeAt(0),\n                    preSelectionRange = range.cloneRange(),\n                    start;\n\n                preSelectionRange.selectNodeContents(root);\n                preSelectionRange.setEnd(range.startContainer, range.startOffset);\n                start = preSelectionRange.toString().length;\n\n                selectionState = {\n                    start: start,\n                    end: start + range.toString().length\n                };\n\n                // Check to see if the selection starts with any images\n                // if so we need to make sure the the beginning of the selection is\n                // set correctly when importing selection\n                if (this.doesRangeStartWithImages(range, doc)) {\n                    selectionState.startsWithImage = true;\n                }\n\n                // Check to see if the selection has any trailing images\n                // if so, this this means we need to look for them when we import selection\n                var trailingImageCount = this.getTrailingImageCount(root, selectionState, range.endContainer, range.endOffset);\n                if (trailingImageCount) {\n                    selectionState.trailingImageCount = trailingImageCount;\n                }\n\n                // If start = 0 there may still be an empty paragraph before it, but we don't care.\n                if (start !== 0) {\n                    var emptyBlocksIndex = this.getIndexRelativeToAdjacentEmptyBlocks(doc, root, range.startContainer, range.startOffset);\n                    if (emptyBlocksIndex !== -1) {\n                        selectionState.emptyBlocksIndex = emptyBlocksIndex;\n                    }\n                }\n            }\n\n            return selectionState;\n        },\n\n        // http://stackoverflow.com/questions/17678843/cant-restore-selection-after-html-modify-even-if-its-the-same-html\n        // Tim Down\n        //\n        // {object} selectionState - the selection to import\n        // {DOMElement} root - the root element the selection is being restored inside of\n        // {Document} doc - the document to use for managing selection\n        // {boolean} [favorLaterSelectionAnchor] - defaults to false. If true, import the cursor immediately\n        //      subsequent to an anchor tag if it would otherwise be placed right at the trailing edge inside the\n        //      anchor. This cursor positioning, even though visually equivalent to the user, can affect behavior\n        //      in MS IE.\n        importSelection: function (selectionState, root, doc, favorLaterSelectionAnchor) {\n            if (!selectionState || !root) {\n                return;\n            }\n\n            var range = doc.createRange();\n            range.setStart(root, 0);\n            range.collapse(true);\n\n            var node = root,\n                nodeStack = [],\n                charIndex = 0,\n                foundStart = false,\n                foundEnd = false,\n                trailingImageCount = 0,\n                stop = false,\n                nextCharIndex,\n                allowRangeToStartAtEndOfNode = false,\n                lastTextNode = null;\n\n            // When importing selection, the start of the selection may lie at the end of an element\n            // or at the beginning of an element.  Since visually there is no difference between these 2\n            // we will try to move the selection to the beginning of an element since this is generally\n            // what users will expect and it's a more predictable behavior.\n            //\n            // However, there are some specific cases when we don't want to do this:\n            //  1) We're attempting to move the cursor outside of the end of an anchor [favorLaterSelectionAnchor = true]\n            //  2) The selection starts with an image, which is special since an image doesn't have any 'content'\n            //     as far as selection and ranges are concerned\n            //  3) The selection starts after a specified number of empty block elements (selectionState.emptyBlocksIndex)\n            //\n            // For these cases, we want the selection to start at a very specific location, so we should NOT\n            // automatically move the cursor to the beginning of the first actual chunk of text\n            if (favorLaterSelectionAnchor || selectionState.startsWithImage || typeof selectionState.emptyBlocksIndex !== 'undefined') {\n                allowRangeToStartAtEndOfNode = true;\n            }\n\n            while (!stop && node) {\n                // Only iterate over elements and text nodes\n                if (node.nodeType > 3) {\n                    node = nodeStack.pop();\n                    continue;\n                }\n\n                // If we hit a text node, we need to add the amount of characters to the overall count\n                if (node.nodeType === 3 && !foundEnd) {\n                    nextCharIndex = charIndex + node.length;\n                    // Check if we're at or beyond the start of the selection we're importing\n                    if (!foundStart && selectionState.start >= charIndex && selectionState.start <= nextCharIndex) {\n                        // NOTE: We only want to allow a selection to start at the END of an element if\n                        //  allowRangeToStartAtEndOfNode is true\n                        if (allowRangeToStartAtEndOfNode || selectionState.start < nextCharIndex) {\n                            range.setStart(node, selectionState.start - charIndex);\n                            foundStart = true;\n                        }\n                        // We're at the end of a text node where the selection could start but we shouldn't\n                        // make the selection start here because allowRangeToStartAtEndOfNode is false.\n                        // However, we should keep a reference to this node in case there aren't any more\n                        // text nodes after this, so that we have somewhere to import the selection to\n                        else {\n                            lastTextNode = node;\n                        }\n                    }\n                    // We've found the start of the selection, check if we're at or beyond the end of the selection we're importing\n                    if (foundStart && selectionState.end >= charIndex && selectionState.end <= nextCharIndex) {\n                        if (!selectionState.trailingImageCount) {\n                            range.setEnd(node, selectionState.end - charIndex);\n                            stop = true;\n                        } else {\n                            foundEnd = true;\n                        }\n                    }\n                    charIndex = nextCharIndex;\n                } else {\n                    if (selectionState.trailingImageCount && foundEnd) {\n                        if (node.nodeName.toLowerCase() === 'img') {\n                            trailingImageCount++;\n                        }\n                        if (trailingImageCount === selectionState.trailingImageCount) {\n                            // Find which index the image is in its parent's children\n                            var endIndex = 0;\n                            while (node.parentNode.childNodes[endIndex] !== node) {\n                                endIndex++;\n                            }\n                            range.setEnd(node.parentNode, endIndex + 1);\n                            stop = true;\n                        }\n                    }\n\n                    if (!stop && node.nodeType === 1) {\n                        // this is an element\n                        // add all its children to the stack\n                        var i = node.childNodes.length - 1;\n                        while (i >= 0) {\n                            nodeStack.push(node.childNodes[i]);\n                            i -= 1;\n                        }\n                    }\n                }\n\n                if (!stop) {\n                    node = nodeStack.pop();\n                }\n            }\n\n            // If we've gone through the entire text but didn't find the beginning of a text node\n            // to make the selection start at, we should fall back to starting the selection\n            // at the END of the last text node we found\n            if (!foundStart && lastTextNode) {\n                range.setStart(lastTextNode, lastTextNode.length);\n                range.setEnd(lastTextNode, lastTextNode.length);\n            }\n\n            if (typeof selectionState.emptyBlocksIndex !== 'undefined') {\n                range = this.importSelectionMoveCursorPastBlocks(doc, root, selectionState.emptyBlocksIndex, range);\n            }\n\n            // If the selection is right at the ending edge of a link, put it outside the anchor tag instead of inside.\n            if (favorLaterSelectionAnchor) {\n                range = this.importSelectionMoveCursorPastAnchor(selectionState, range);\n            }\n\n            this.selectRange(doc, range);\n        },\n\n        // Utility method called from importSelection only\n        importSelectionMoveCursorPastAnchor: function (selectionState, range) {\n            var nodeInsideAnchorTagFunction = function (node) {\n                return node.nodeName.toLowerCase() === 'a';\n            };\n            if (selectionState.start === selectionState.end &&\n                    range.startContainer.nodeType === 3 &&\n                    range.startOffset === range.startContainer.nodeValue.length &&\n                    MediumEditor.util.traverseUp(range.startContainer, nodeInsideAnchorTagFunction)) {\n                var prevNode = range.startContainer,\n                    currentNode = range.startContainer.parentNode;\n                while (currentNode !== null && currentNode.nodeName.toLowerCase() !== 'a') {\n                    if (currentNode.childNodes[currentNode.childNodes.length - 1] !== prevNode) {\n                        currentNode = null;\n                    } else {\n                        prevNode = currentNode;\n                        currentNode = currentNode.parentNode;\n                    }\n                }\n                if (currentNode !== null && currentNode.nodeName.toLowerCase() === 'a') {\n                    var currentNodeIndex = null;\n                    for (var i = 0; currentNodeIndex === null && i < currentNode.parentNode.childNodes.length; i++) {\n                        if (currentNode.parentNode.childNodes[i] === currentNode) {\n                            currentNodeIndex = i;\n                        }\n                    }\n                    range.setStart(currentNode.parentNode, currentNodeIndex + 1);\n                    range.collapse(true);\n                }\n            }\n            return range;\n        },\n\n        // Uses the emptyBlocksIndex calculated by getIndexRelativeToAdjacentEmptyBlocks\n        // to move the cursor back to the start of the correct paragraph\n        importSelectionMoveCursorPastBlocks: function (doc, root, index, range) {\n            var treeWalker = doc.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, filterOnlyParentElements, false),\n                startContainer = range.startContainer,\n                startBlock,\n                targetNode,\n                currIndex = 0;\n            index = index || 1; // If index is 0, we still want to move to the next block\n\n            // Chrome counts newlines and spaces that separate block elements as actual elements.\n            // If the selection is inside one of these text nodes, and it has a previous sibling\n            // which is a block element, we want the treewalker to start at the previous sibling\n            // and NOT at the parent of the textnode\n            if (startContainer.nodeType === 3 && MediumEditor.util.isBlockContainer(startContainer.previousSibling)) {\n                startBlock = startContainer.previousSibling;\n            } else {\n                startBlock = MediumEditor.util.getClosestBlockContainer(startContainer);\n            }\n\n            // Skip over empty blocks until we hit the block we want the selection to be in\n            while (treeWalker.nextNode()) {\n                if (!targetNode) {\n                    // Loop through all blocks until we hit the starting block element\n                    if (startBlock === treeWalker.currentNode) {\n                        targetNode = treeWalker.currentNode;\n                    }\n                } else {\n                    targetNode = treeWalker.currentNode;\n                    currIndex++;\n                    // We hit the target index, bail\n                    if (currIndex === index) {\n                        break;\n                    }\n                    // If we find a non-empty block, ignore the emptyBlocksIndex and just put selection here\n                    if (targetNode.textContent.length > 0) {\n                        break;\n                    }\n                }\n            }\n\n            if (!targetNode) {\n                targetNode = startBlock;\n            }\n\n            // We're selecting a high-level block node, so make sure the cursor gets moved into the deepest\n            // element at the beginning of the block\n            range.setStart(MediumEditor.util.getFirstSelectableLeafNode(targetNode), 0);\n\n            return range;\n        },\n\n        // Returns -1 unless the cursor is at the beginning of a paragraph/block\n        // If the paragraph/block is preceeded by empty paragraphs/block (with no text)\n        // it will return the number of empty paragraphs before the cursor.\n        // Otherwise, it will return 0, which indicates the cursor is at the beginning\n        // of a paragraph/block, and not at the end of the paragraph/block before it\n        getIndexRelativeToAdjacentEmptyBlocks: function (doc, root, cursorContainer, cursorOffset) {\n            // If there is text in front of the cursor, that means there isn't only empty blocks before it\n            if (cursorContainer.textContent.length > 0 && cursorOffset > 0) {\n                return -1;\n            }\n\n            // Check if the block that contains the cursor has any other text in front of the cursor\n            var node = cursorContainer;\n            if (node.nodeType !== 3) {\n                node = cursorContainer.childNodes[cursorOffset];\n            }\n            if (node) {\n                // The element isn't at the beginning of a block, so it has content before it\n                if (!MediumEditor.util.isElementAtBeginningOfBlock(node)) {\n                    return -1;\n                }\n\n                var previousSibling = MediumEditor.util.findPreviousSibling(node);\n                // If there is no previous sibling, this is the first text element in the editor\n                if (!previousSibling) {\n                    return -1;\n                }\n                // If the previous sibling has text, then there are no empty blocks before this\n                else if (previousSibling.nodeValue) {\n                    return -1;\n                }\n            }\n\n            // Walk over block elements, counting number of empty blocks between last piece of text\n            // and the block the cursor is in\n            var closestBlock = MediumEditor.util.getClosestBlockContainer(cursorContainer),\n                treeWalker = doc.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, filterOnlyParentElements, false),\n                emptyBlocksCount = 0;\n            while (treeWalker.nextNode()) {\n                var blockIsEmpty = treeWalker.currentNode.textContent === '';\n                if (blockIsEmpty || emptyBlocksCount > 0) {\n                    emptyBlocksCount += 1;\n                }\n                if (treeWalker.currentNode === closestBlock) {\n                    return emptyBlocksCount;\n                }\n                if (!blockIsEmpty) {\n                    emptyBlocksCount = 0;\n                }\n            }\n\n            return emptyBlocksCount;\n        },\n\n        // Returns true if the selection range begins with an image tag\n        // Returns false if the range starts with any non empty text nodes\n        doesRangeStartWithImages: function (range, doc) {\n            if (range.startOffset !== 0 || range.startContainer.nodeType !== 1) {\n                return false;\n            }\n\n            if (range.startContainer.nodeName.toLowerCase() === 'img') {\n                return true;\n            }\n\n            var img = range.startContainer.querySelector('img');\n            if (!img) {\n                return false;\n            }\n\n            var treeWalker = doc.createTreeWalker(range.startContainer, NodeFilter.SHOW_ALL, null, false);\n            while (treeWalker.nextNode()) {\n                var next = treeWalker.currentNode;\n                // If we hit the image, then there isn't any text before the image so\n                // the image is at the beginning of the range\n                if (next === img) {\n                    break;\n                }\n                // If we haven't hit the iamge, but found text that contains content\n                // then the range doesn't start with an image\n                if (next.nodeValue) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        getTrailingImageCount: function (root, selectionState, endContainer, endOffset) {\n            // If the endOffset of a range is 0, the endContainer doesn't contain images\n            // If the endContainer is a text node, there are no trailing images\n            if (endOffset === 0 || endContainer.nodeType !== 1) {\n                return 0;\n            }\n\n            // If the endContainer isn't an image, and doesn't have an image descendants\n            // there are no trailing images\n            if (endContainer.nodeName.toLowerCase() !== 'img' && !endContainer.querySelector('img')) {\n                return 0;\n            }\n\n            var lastNode = endContainer.childNodes[endOffset - 1];\n            while (lastNode.hasChildNodes()) {\n                lastNode = lastNode.lastChild;\n            }\n\n            var node = root,\n                nodeStack = [],\n                charIndex = 0,\n                foundStart = false,\n                foundEnd = false,\n                stop = false,\n                nextCharIndex,\n                trailingImages = 0;\n\n            while (!stop && node) {\n                // Only iterate over elements and text nodes\n                if (node.nodeType > 3) {\n                    node = nodeStack.pop();\n                    continue;\n                }\n\n                if (node.nodeType === 3 && !foundEnd) {\n                    trailingImages = 0;\n                    nextCharIndex = charIndex + node.length;\n                    if (!foundStart && selectionState.start >= charIndex && selectionState.start <= nextCharIndex) {\n                        foundStart = true;\n                    }\n                    if (foundStart && selectionState.end >= charIndex && selectionState.end <= nextCharIndex) {\n                        foundEnd = true;\n                    }\n                    charIndex = nextCharIndex;\n                } else {\n                    if (node.nodeName.toLowerCase() === 'img') {\n                        trailingImages++;\n                    }\n\n                    if (node === lastNode) {\n                        stop = true;\n                    } else if (node.nodeType === 1) {\n                        // this is an element\n                        // add all its children to the stack\n                        var i = node.childNodes.length - 1;\n                        while (i >= 0) {\n                            nodeStack.push(node.childNodes[i]);\n                            i -= 1;\n                        }\n                    }\n                }\n\n                if (!stop) {\n                    node = nodeStack.pop();\n                }\n            }\n\n            return trailingImages;\n        },\n\n        // determine if the current selection contains any 'content'\n        // content being any non-white space text or an image\n        selectionContainsContent: function (doc) {\n            var sel = doc.getSelection();\n\n            // collapsed selection or selection withour range doesn't contain content\n            if (!sel || sel.isCollapsed || !sel.rangeCount) {\n                return false;\n            }\n\n            // if toString() contains any text, the selection contains some content\n            if (sel.toString().trim() !== '') {\n                return true;\n            }\n\n            // if selection contains only image(s), it will return empty for toString()\n            // so check for an image manually\n            var selectionNode = this.getSelectedParentElement(sel.getRangeAt(0));\n            if (selectionNode) {\n                if (selectionNode.nodeName.toLowerCase() === 'img' ||\n                    (selectionNode.nodeType === 1 && selectionNode.querySelector('img'))) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        selectionInContentEditableFalse: function (contentWindow) {\n            // determine if the current selection is exclusively inside\n            // a contenteditable=\"false\", though treat the case of an\n            // explicit contenteditable=\"true\" inside a \"false\" as false.\n            var sawtrue,\n                sawfalse = this.findMatchingSelectionParent(function (el) {\n                    var ce = el && el.getAttribute('contenteditable');\n                    if (ce === 'true') {\n                        sawtrue = true;\n                    }\n                    return el.nodeName !== '#text' && ce === 'false';\n                }, contentWindow);\n\n            return !sawtrue && sawfalse;\n        },\n\n        // http://stackoverflow.com/questions/4176923/html-of-selected-text\n        // by Tim Down\n        getSelectionHtml: function getSelectionHtml(doc) {\n            var i,\n                html = '',\n                sel = doc.getSelection(),\n                len,\n                container;\n            if (sel.rangeCount) {\n                container = doc.createElement('div');\n                for (i = 0, len = sel.rangeCount; i < len; i += 1) {\n                    container.appendChild(sel.getRangeAt(i).cloneContents());\n                }\n                html = container.innerHTML;\n            }\n            return html;\n        },\n\n        /**\n         *  Find the caret position within an element irrespective of any inline tags it may contain.\n         *\n         *  @param {DOMElement} An element containing the cursor to find offsets relative to.\n         *  @param {Range} A Range representing cursor position. Will window.getSelection if none is passed.\n         *  @return {Object} 'left' and 'right' attributes contain offsets from begining and end of Element\n         */\n        getCaretOffsets: function getCaretOffsets(element, range) {\n            var preCaretRange, postCaretRange;\n\n            if (!range) {\n                range = window.getSelection().getRangeAt(0);\n            }\n\n            preCaretRange = range.cloneRange();\n            postCaretRange = range.cloneRange();\n\n            preCaretRange.selectNodeContents(element);\n            preCaretRange.setEnd(range.endContainer, range.endOffset);\n\n            postCaretRange.selectNodeContents(element);\n            postCaretRange.setStart(range.endContainer, range.endOffset);\n\n            return {\n                left: preCaretRange.toString().length,\n                right: postCaretRange.toString().length\n            };\n        },\n\n        // http://stackoverflow.com/questions/15867542/range-object-get-selection-parent-node-chrome-vs-firefox\n        rangeSelectsSingleNode: function (range) {\n            var startNode = range.startContainer;\n            return startNode === range.endContainer &&\n                startNode.hasChildNodes() &&\n                range.endOffset === range.startOffset + 1;\n        },\n\n        getSelectedParentElement: function (range) {\n            if (!range) {\n                return null;\n            }\n\n            // Selection encompasses a single element\n            if (this.rangeSelectsSingleNode(range) && range.startContainer.childNodes[range.startOffset].nodeType !== 3) {\n                return range.startContainer.childNodes[range.startOffset];\n            }\n\n            // Selection range starts inside a text node, so get its parent\n            if (range.startContainer.nodeType === 3) {\n                return range.startContainer.parentNode;\n            }\n\n            // Selection starts inside an element\n            return range.startContainer;\n        },\n\n        getSelectedElements: function (doc) {\n            var selection = doc.getSelection(),\n                range,\n                toRet,\n                currNode;\n\n            if (!selection.rangeCount || selection.isCollapsed || !selection.getRangeAt(0).commonAncestorContainer) {\n                return [];\n            }\n\n            range = selection.getRangeAt(0);\n\n            if (range.commonAncestorContainer.nodeType === 3) {\n                toRet = [];\n                currNode = range.commonAncestorContainer;\n                while (currNode.parentNode && currNode.parentNode.childNodes.length === 1) {\n                    toRet.push(currNode.parentNode);\n                    currNode = currNode.parentNode;\n                }\n\n                return toRet;\n            }\n\n            return [].filter.call(range.commonAncestorContainer.getElementsByTagName('*'), function (el) {\n                return (typeof selection.containsNode === 'function') ? selection.containsNode(el, true) : true;\n            });\n        },\n\n        selectNode: function (node, doc) {\n            var range = doc.createRange();\n            range.selectNodeContents(node);\n            this.selectRange(doc, range);\n        },\n\n        select: function (doc, startNode, startOffset, endNode, endOffset) {\n            var range = doc.createRange();\n            range.setStart(startNode, startOffset);\n            if (endNode) {\n                range.setEnd(endNode, endOffset);\n            } else {\n                range.collapse(true);\n            }\n            this.selectRange(doc, range);\n            return range;\n        },\n\n        /**\n         *  Clear the current highlighted selection and set the caret to the start or the end of that prior selection, defaults to end.\n         *\n         *  @param {DomDocument} doc            Current document\n         *  @param {boolean} moveCursorToStart  A boolean representing whether or not to set the caret to the beginning of the prior selection.\n         */\n        clearSelection: function (doc, moveCursorToStart) {\n            if (moveCursorToStart) {\n                doc.getSelection().collapseToStart();\n            } else {\n                doc.getSelection().collapseToEnd();\n            }\n        },\n\n        /**\n         * Move cursor to the given node with the given offset.\n         *\n         * @param  {DomDocument} doc     Current document\n         * @param  {DomElement}  node    Element where to jump\n         * @param  {integer}     offset  Where in the element should we jump, 0 by default\n         */\n        moveCursor: function (doc, node, offset) {\n            this.select(doc, node, offset);\n        },\n\n        getSelectionRange: function (ownerDocument) {\n            var selection = ownerDocument.getSelection();\n            if (selection.rangeCount === 0) {\n                return null;\n            }\n            return selection.getRangeAt(0);\n        },\n\n        selectRange: function (ownerDocument, range) {\n            var selection = ownerDocument.getSelection();\n\n            selection.removeAllRanges();\n            selection.addRange(range);\n        },\n\n        // http://stackoverflow.com/questions/1197401/how-can-i-get-the-element-the-caret-is-in-with-javascript-when-using-contentedi\n        // by You\n        getSelectionStart: function (ownerDocument) {\n            var node = ownerDocument.getSelection().anchorNode,\n                startNode = (node && node.nodeType === 3 ? node.parentNode : node);\n\n            return startNode;\n        }\n    };\n\n    MediumEditor.selection = Selection;\n}());\n\n(function () {\n    'use strict';\n\n    function isElementDescendantOfExtension(extensions, element) {\n        return extensions.some(function (extension) {\n            if (typeof extension.getInteractionElements !== 'function') {\n                return false;\n            }\n\n            var extensionElements = extension.getInteractionElements();\n            if (!extensionElements) {\n                return false;\n            }\n\n            if (!Array.isArray(extensionElements)) {\n                extensionElements = [extensionElements];\n            }\n            return extensionElements.some(function (el) {\n                return MediumEditor.util.isDescendant(el, element, true);\n            });\n        });\n    }\n\n    var Events = function (instance) {\n        this.base = instance;\n        this.options = this.base.options;\n        this.events = [];\n        this.disabledEvents = {};\n        this.customEvents = {};\n        this.listeners = {};\n    };\n\n    Events.prototype = {\n        InputEventOnContenteditableSupported: !MediumEditor.util.isIE && !MediumEditor.util.isEdge,\n\n        // Helpers for event handling\n\n        attachDOMEvent: function (targets, event, listener, useCapture) {\n            targets = MediumEditor.util.isElement(targets) || [window, document].indexOf(targets) > -1 ? [targets] : targets;\n\n            Array.prototype.forEach.call(targets, function (target) {\n                target.addEventListener(event, listener, useCapture);\n                this.events.push([target, event, listener, useCapture]);\n            }.bind(this));\n        },\n\n        detachDOMEvent: function (targets, event, listener, useCapture) {\n            var index, e;\n            targets = MediumEditor.util.isElement(targets) || [window, document].indexOf(targets) > -1 ? [targets] : targets;\n\n            Array.prototype.forEach.call(targets, function (target) {\n                index = this.indexOfListener(target, event, listener, useCapture);\n                if (index !== -1) {\n                    e = this.events.splice(index, 1)[0];\n                    e[0].removeEventListener(e[1], e[2], e[3]);\n                }\n            }.bind(this));\n        },\n\n        indexOfListener: function (target, event, listener, useCapture) {\n            var this$1 = this;\n\n            var i, n, item;\n            for (i = 0, n = this.events.length; i < n; i = i + 1) {\n                item = this$1.events[i];\n                if (item[0] === target && item[1] === event && item[2] === listener && item[3] === useCapture) {\n                    return i;\n                }\n            }\n            return -1;\n        },\n\n        detachAllDOMEvents: function () {\n            var this$1 = this;\n\n            var e = this.events.pop();\n            while (e) {\n                e[0].removeEventListener(e[1], e[2], e[3]);\n                e = this$1.events.pop();\n            }\n        },\n\n        detachAllEventsFromElement: function (element) {\n            var this$1 = this;\n\n            var filtered = this.events.filter(function (e) {\n                return e && e[0].getAttribute && e[0].getAttribute('medium-editor-index') === element.getAttribute('medium-editor-index');\n            });\n\n            for (var i = 0, len = filtered.length; i < len; i++) {\n                var e = filtered[i];\n                this$1.detachDOMEvent(e[0], e[1], e[2], e[3]);\n            }\n        },\n\n        // Attach all existing handlers to a new element\n        attachAllEventsToElement: function (element) {\n            if (this.listeners['editableInput']) {\n                this.contentCache[element.getAttribute('medium-editor-index')] = element.innerHTML;\n            }\n\n            if (this.eventsCache) {\n                this.eventsCache.forEach(function (e) {\n                    this.attachDOMEvent(element, e['name'], e['handler'].bind(this));\n                }, this);\n            }\n        },\n\n        enableCustomEvent: function (event) {\n            if (this.disabledEvents[event] !== undefined) {\n                delete this.disabledEvents[event];\n            }\n        },\n\n        disableCustomEvent: function (event) {\n            this.disabledEvents[event] = true;\n        },\n\n        // custom events\n        attachCustomEvent: function (event, listener) {\n            this.setupListener(event);\n            if (!this.customEvents[event]) {\n                this.customEvents[event] = [];\n            }\n            this.customEvents[event].push(listener);\n        },\n\n        detachCustomEvent: function (event, listener) {\n            var index = this.indexOfCustomListener(event, listener);\n            if (index !== -1) {\n                this.customEvents[event].splice(index, 1);\n                // TODO: If array is empty, should detach internal listeners via destroyListener()\n            }\n        },\n\n        indexOfCustomListener: function (event, listener) {\n            if (!this.customEvents[event] || !this.customEvents[event].length) {\n                return -1;\n            }\n\n            return this.customEvents[event].indexOf(listener);\n        },\n\n        detachAllCustomEvents: function () {\n            this.customEvents = {};\n            // TODO: Should detach internal listeners here via destroyListener()\n        },\n\n        triggerCustomEvent: function (name, data, editable) {\n            if (this.customEvents[name] && !this.disabledEvents[name]) {\n                this.customEvents[name].forEach(function (listener) {\n                    listener(data, editable);\n                });\n            }\n        },\n\n        // Cleaning up\n\n        destroy: function () {\n            this.detachAllDOMEvents();\n            this.detachAllCustomEvents();\n            this.detachExecCommand();\n\n            if (this.base.elements) {\n                this.base.elements.forEach(function (element) {\n                    element.removeAttribute('data-medium-focused');\n                });\n            }\n        },\n\n        // Listening to calls to document.execCommand\n\n        // Attach a listener to be notified when document.execCommand is called\n        attachToExecCommand: function () {\n            if (this.execCommandListener) {\n                return;\n            }\n\n            // Store an instance of the listener so:\n            // 1) We only attach to execCommand once\n            // 2) We can remove the listener later\n            this.execCommandListener = function (execInfo) {\n                this.handleDocumentExecCommand(execInfo);\n            }.bind(this);\n\n            // Ensure that execCommand has been wrapped correctly\n            this.wrapExecCommand();\n\n            // Add listener to list of execCommand listeners\n            this.options.ownerDocument.execCommand.listeners.push(this.execCommandListener);\n        },\n\n        // Remove our listener for calls to document.execCommand\n        detachExecCommand: function () {\n            var doc = this.options.ownerDocument;\n            if (!this.execCommandListener || !doc.execCommand.listeners) {\n                return;\n            }\n\n            // Find the index of this listener in the array of listeners so it can be removed\n            var index = doc.execCommand.listeners.indexOf(this.execCommandListener);\n            if (index !== -1) {\n                doc.execCommand.listeners.splice(index, 1);\n            }\n\n            // If the list of listeners is now empty, put execCommand back to its original state\n            if (!doc.execCommand.listeners.length) {\n                this.unwrapExecCommand();\n            }\n        },\n\n        // Wrap document.execCommand in a custom method so we can listen to calls to it\n        wrapExecCommand: function () {\n            var doc = this.options.ownerDocument;\n\n            // Ensure all instance of MediumEditor only wrap execCommand once\n            if (doc.execCommand.listeners) {\n                return;\n            }\n\n            // Helper method to call all listeners to execCommand\n            var callListeners = function (args, result) {\n                    if (doc.execCommand.listeners) {\n                        doc.execCommand.listeners.forEach(function (listener) {\n                            listener({\n                                command: args[0],\n                                value: args[2],\n                                args: args,\n                                result: result\n                            });\n                        });\n                    }\n                },\n\n            // Create a wrapper method for execCommand which will:\n            // 1) Call document.execCommand with the correct arguments\n            // 2) Loop through any listeners and notify them that execCommand was called\n            //    passing extra info on the call\n            // 3) Return the result\n                wrapper = function () {\n                    var result = doc.execCommand.orig.apply(this, arguments);\n\n                    if (!doc.execCommand.listeners) {\n                        return result;\n                    }\n\n                    var args = Array.prototype.slice.call(arguments);\n                    callListeners(args, result);\n\n                    return result;\n                };\n\n            // Store a reference to the original execCommand\n            wrapper.orig = doc.execCommand;\n\n            // Attach an array for storing listeners\n            wrapper.listeners = [];\n\n            // Helper for notifying listeners\n            wrapper.callListeners = callListeners;\n\n            // Overwrite execCommand\n            doc.execCommand = wrapper;\n        },\n\n        // Revert document.execCommand back to its original self\n        unwrapExecCommand: function () {\n            var doc = this.options.ownerDocument;\n            if (!doc.execCommand.orig) {\n                return;\n            }\n\n            // Use the reference to the original execCommand to revert back\n            doc.execCommand = doc.execCommand.orig;\n        },\n\n        // Listening to browser events to emit events medium-editor cares about\n        setupListener: function (name) {\n            if (this.listeners[name]) {\n                return;\n            }\n\n            switch (name) {\n                case 'externalInteraction':\n                    // Detecting when user has interacted with elements outside of MediumEditor\n                    this.attachDOMEvent(this.options.ownerDocument.body, 'mousedown', this.handleBodyMousedown.bind(this), true);\n                    this.attachDOMEvent(this.options.ownerDocument.body, 'click', this.handleBodyClick.bind(this), true);\n                    this.attachDOMEvent(this.options.ownerDocument.body, 'focus', this.handleBodyFocus.bind(this), true);\n                    break;\n                case 'blur':\n                    // Detecting when focus is lost\n                    this.setupListener('externalInteraction');\n                    break;\n                case 'focus':\n                    // Detecting when focus moves into some part of MediumEditor\n                    this.setupListener('externalInteraction');\n                    break;\n                case 'editableInput':\n                    // setup cache for knowing when the content has changed\n                    this.contentCache = {};\n                    this.base.elements.forEach(function (element) {\n                        this.contentCache[element.getAttribute('medium-editor-index')] = element.innerHTML;\n                    }, this);\n\n                    // Attach to the 'oninput' event, handled correctly by most browsers\n                    if (this.InputEventOnContenteditableSupported) {\n                        this.attachToEachElement('input', this.handleInput);\n                    }\n\n                    // For browsers which don't support the input event on contenteditable (IE)\n                    // we'll attach to 'selectionchange' on the document and 'keypress' on the editables\n                    if (!this.InputEventOnContenteditableSupported) {\n                        this.setupListener('editableKeypress');\n                        this.keypressUpdateInput = true;\n                        this.attachDOMEvent(document, 'selectionchange', this.handleDocumentSelectionChange.bind(this));\n                        // Listen to calls to execCommand\n                        this.attachToExecCommand();\n                    }\n                    break;\n                case 'editableClick':\n                    // Detecting click in the contenteditables\n                    this.attachToEachElement('click', this.handleClick);\n                    break;\n                case 'editableBlur':\n                    // Detecting blur in the contenteditables\n                    this.attachToEachElement('blur', this.handleBlur);\n                    break;\n                case 'editableKeypress':\n                    // Detecting keypress in the contenteditables\n                    this.attachToEachElement('keypress', this.handleKeypress);\n                    break;\n                case 'editableKeyup':\n                    // Detecting keyup in the contenteditables\n                    this.attachToEachElement('keyup', this.handleKeyup);\n                    break;\n                case 'editableKeydown':\n                    // Detecting keydown on the contenteditables\n                    this.attachToEachElement('keydown', this.handleKeydown);\n                    break;\n                case 'editableKeydownSpace':\n                    // Detecting keydown for SPACE on the contenteditables\n                    this.setupListener('editableKeydown');\n                    break;\n                case 'editableKeydownEnter':\n                    // Detecting keydown for ENTER on the contenteditables\n                    this.setupListener('editableKeydown');\n                    break;\n                case 'editableKeydownTab':\n                    // Detecting keydown for TAB on the contenteditable\n                    this.setupListener('editableKeydown');\n                    break;\n                case 'editableKeydownDelete':\n                    // Detecting keydown for DELETE/BACKSPACE on the contenteditables\n                    this.setupListener('editableKeydown');\n                    break;\n                case 'editableMouseover':\n                    // Detecting mouseover on the contenteditables\n                    this.attachToEachElement('mouseover', this.handleMouseover);\n                    break;\n                case 'editableDrag':\n                    // Detecting dragover and dragleave on the contenteditables\n                    this.attachToEachElement('dragover', this.handleDragging);\n                    this.attachToEachElement('dragleave', this.handleDragging);\n                    break;\n                case 'editableDrop':\n                    // Detecting drop on the contenteditables\n                    this.attachToEachElement('drop', this.handleDrop);\n                    break;\n                // TODO: We need to have a custom 'paste' event separate from 'editablePaste'\n                // Need to think about the way to introduce this without breaking folks\n                case 'editablePaste':\n                    // Detecting paste on the contenteditables\n                    this.attachToEachElement('paste', this.handlePaste);\n                    break;\n            }\n            this.listeners[name] = true;\n        },\n\n        attachToEachElement: function (name, handler) {\n            // build our internal cache to know which element got already what handler attached\n            if (!this.eventsCache) {\n                this.eventsCache = [];\n            }\n\n            this.base.elements.forEach(function (element) {\n                this.attachDOMEvent(element, name, handler.bind(this));\n            }, this);\n\n            this.eventsCache.push({ 'name': name, 'handler': handler });\n        },\n\n        cleanupElement: function (element) {\n            var index = element.getAttribute('medium-editor-index');\n            if (index) {\n                this.detachAllEventsFromElement(element);\n                if (this.contentCache) {\n                    delete this.contentCache[index];\n                }\n            }\n        },\n\n        focusElement: function (element) {\n            element.focus();\n            this.updateFocus(element, { target: element, type: 'focus' });\n        },\n\n        updateFocus: function (target, eventObj) {\n            var hadFocus = this.base.getFocusedElement(),\n                toFocus;\n\n            // For clicks, we need to know if the mousedown that caused the click happened inside the existing focused element\n            // or one of the extension elements.  If so, we don't want to focus another element\n            if (hadFocus &&\n                    eventObj.type === 'click' &&\n                    this.lastMousedownTarget &&\n                    (MediumEditor.util.isDescendant(hadFocus, this.lastMousedownTarget, true) ||\n                     isElementDescendantOfExtension(this.base.extensions, this.lastMousedownTarget))) {\n                toFocus = hadFocus;\n            }\n\n            if (!toFocus) {\n                this.base.elements.some(function (element) {\n                    // If the target is part of an editor element, this is the element getting focus\n                    if (!toFocus && (MediumEditor.util.isDescendant(element, target, true))) {\n                        toFocus = element;\n                    }\n\n                    // bail if we found an element that's getting focus\n                    return !!toFocus;\n                }, this);\n            }\n\n            // Check if the target is external (not part of the editor, toolbar, or any other extension)\n            var externalEvent = !MediumEditor.util.isDescendant(hadFocus, target, true) &&\n                                !isElementDescendantOfExtension(this.base.extensions, target);\n\n            if (toFocus !== hadFocus) {\n                // If element has focus, and focus is going outside of editor\n                // Don't blur focused element if clicking on editor, toolbar, or anchorpreview\n                if (hadFocus && externalEvent) {\n                    // Trigger blur on the editable that has lost focus\n                    hadFocus.removeAttribute('data-medium-focused');\n                    this.triggerCustomEvent('blur', eventObj, hadFocus);\n                }\n\n                // If focus is going into an editor element\n                if (toFocus) {\n                    // Trigger focus on the editable that now has focus\n                    toFocus.setAttribute('data-medium-focused', true);\n                    this.triggerCustomEvent('focus', eventObj, toFocus);\n                }\n            }\n\n            if (externalEvent) {\n                this.triggerCustomEvent('externalInteraction', eventObj);\n            }\n        },\n\n        updateInput: function (target, eventObj) {\n            if (!this.contentCache) {\n                return;\n            }\n            // An event triggered which signifies that the user may have changed someting\n            // Look in our cache of input for the contenteditables to see if something changed\n            var index = target.getAttribute('medium-editor-index'),\n                html = target.innerHTML;\n\n            if (html !== this.contentCache[index]) {\n                // The content has changed since the last time we checked, fire the event\n                this.triggerCustomEvent('editableInput', eventObj, target);\n            }\n            this.contentCache[index] = html;\n        },\n\n        handleDocumentSelectionChange: function (event) {\n            // When selectionchange fires, target and current target are set\n            // to document, since this is where the event is handled\n            // However, currentTarget will have an 'activeElement' property\n            // which will point to whatever element has focus.\n            if (event.currentTarget && event.currentTarget.activeElement) {\n                var activeElement = event.currentTarget.activeElement,\n                    currentTarget;\n                // We can look at the 'activeElement' to determine if the selectionchange has\n                // happened within a contenteditable owned by this instance of MediumEditor\n                this.base.elements.some(function (element) {\n                    if (MediumEditor.util.isDescendant(element, activeElement, true)) {\n                        currentTarget = element;\n                        return true;\n                    }\n                    return false;\n                }, this);\n\n                // We know selectionchange fired within one of our contenteditables\n                if (currentTarget) {\n                    this.updateInput(currentTarget, { target: activeElement, currentTarget: currentTarget });\n                }\n            }\n        },\n\n        handleDocumentExecCommand: function () {\n            // document.execCommand has been called\n            // If one of our contenteditables currently has focus, we should\n            // attempt to trigger the 'editableInput' event\n            var target = this.base.getFocusedElement();\n            if (target) {\n                this.updateInput(target, { target: target, currentTarget: target });\n            }\n        },\n\n        handleBodyClick: function (event) {\n            this.updateFocus(event.target, event);\n        },\n\n        handleBodyFocus: function (event) {\n            this.updateFocus(event.target, event);\n        },\n\n        handleBodyMousedown: function (event) {\n            this.lastMousedownTarget = event.target;\n        },\n\n        handleInput: function (event) {\n            this.updateInput(event.currentTarget, event);\n        },\n\n        handleClick: function (event) {\n            this.triggerCustomEvent('editableClick', event, event.currentTarget);\n        },\n\n        handleBlur: function (event) {\n            this.triggerCustomEvent('editableBlur', event, event.currentTarget);\n        },\n\n        handleKeypress: function (event) {\n            this.triggerCustomEvent('editableKeypress', event, event.currentTarget);\n\n            // If we're doing manual detection of the editableInput event we need\n            // to check for input changes during 'keypress'\n            if (this.keypressUpdateInput) {\n                var eventObj = { target: event.target, currentTarget: event.currentTarget };\n\n                // In IE, we need to let the rest of the event stack complete before we detect\n                // changes to input, so using setTimeout here\n                setTimeout(function () {\n                    this.updateInput(eventObj.currentTarget, eventObj);\n                }.bind(this), 0);\n            }\n        },\n\n        handleKeyup: function (event) {\n            this.triggerCustomEvent('editableKeyup', event, event.currentTarget);\n        },\n\n        handleMouseover: function (event) {\n            this.triggerCustomEvent('editableMouseover', event, event.currentTarget);\n        },\n\n        handleDragging: function (event) {\n            this.triggerCustomEvent('editableDrag', event, event.currentTarget);\n        },\n\n        handleDrop: function (event) {\n            this.triggerCustomEvent('editableDrop', event, event.currentTarget);\n        },\n\n        handlePaste: function (event) {\n            this.triggerCustomEvent('editablePaste', event, event.currentTarget);\n        },\n\n        handleKeydown: function (event) {\n\n            this.triggerCustomEvent('editableKeydown', event, event.currentTarget);\n\n            if (MediumEditor.util.isKey(event, MediumEditor.util.keyCode.SPACE)) {\n                return this.triggerCustomEvent('editableKeydownSpace', event, event.currentTarget);\n            }\n\n            if (MediumEditor.util.isKey(event, MediumEditor.util.keyCode.ENTER) || (event.ctrlKey && MediumEditor.util.isKey(event, MediumEditor.util.keyCode.M))) {\n                return this.triggerCustomEvent('editableKeydownEnter', event, event.currentTarget);\n            }\n\n            if (MediumEditor.util.isKey(event, MediumEditor.util.keyCode.TAB)) {\n                return this.triggerCustomEvent('editableKeydownTab', event, event.currentTarget);\n            }\n\n            if (MediumEditor.util.isKey(event, [MediumEditor.util.keyCode.DELETE, MediumEditor.util.keyCode.BACKSPACE])) {\n                return this.triggerCustomEvent('editableKeydownDelete', event, event.currentTarget);\n            }\n        }\n    };\n\n    MediumEditor.Events = Events;\n}());\n\n(function () {\n    'use strict';\n\n    var Button = MediumEditor.Extension.extend({\n\n        /* Button Options */\n\n        /* action: [string]\n         * The action argument to pass to MediumEditor.execAction()\n         * when the button is clicked\n         */\n        action: undefined,\n\n        /* aria: [string]\n         * The value to add as the aria-label attribute of the button\n         * element displayed in the toolbar.\n         * This is also used as the tooltip for the button\n         */\n        aria: undefined,\n\n        /* tagNames: [Array]\n         * NOTE: This is not used if useQueryState is set to true.\n         *\n         * Array of element tag names that would indicate that this\n         * button has already been applied. If this action has already\n         * been applied, the button will be displayed as 'active' in the toolbar\n         *\n         * Example:\n         * For 'bold', if the text is ever within a <b> or <strong>\n         * tag that indicates the text is already bold. So the array\n         * of tagNames for bold would be: ['b', 'strong']\n         */\n        tagNames: undefined,\n\n        /* style: [Object]\n         * NOTE: This is not used if useQueryState is set to true.\n         *\n         * A pair of css property & value(s) that indicate that this\n         * button has already been applied. If this action has already\n         * been applied, the button will be displayed as 'active' in the toolbar\n         * Properties of the object:\n         *   prop [String]: name of the css property\n         *   value [String]: value(s) of the css property\n         *                   multiple values can be separated by a '|'\n         *\n         * Example:\n         * For 'bold', if the text is ever within an element with a 'font-weight'\n         * style property set to '700' or 'bold', that indicates the text\n         * is already bold.  So the style object for bold would be:\n         * { prop: 'font-weight', value: '700|bold' }\n         */\n        style: undefined,\n\n        /* useQueryState: [boolean]\n         * Enables/disables whether this button should use the built-in\n         * document.queryCommandState() method to determine whether\n         * the action has already been applied.  If the action has already\n         * been applied, the button will be displayed as 'active' in the toolbar\n         *\n         * Example:\n         * For 'bold', if this is set to true, the code will call:\n         * document.queryCommandState('bold') which will return true if the\n         * browser thinks the text is already bold, and false otherwise\n         */\n        useQueryState: undefined,\n\n        /* contentDefault: [string]\n         * Default innerHTML to put inside the button\n         */\n        contentDefault: undefined,\n\n        /* contentFA: [string]\n         * The innerHTML to use for the content of the button\n         * if the `buttonLabels` option for MediumEditor is set to 'fontawesome'\n         */\n        contentFA: undefined,\n\n        /* classList: [Array]\n         * An array of classNames (strings) to be added to the button\n         */\n        classList: undefined,\n\n        /* attrs: [object]\n         * A set of key-value pairs to add to the button as custom attributes\n         */\n        attrs: undefined,\n\n        // The button constructor can optionally accept the name of a built-in button\n        // (ie 'bold', 'italic', etc.)\n        // When the name of a button is passed, it will initialize itself with the\n        // configuration for that button\n        constructor: function (options) {\n            if (Button.isBuiltInButton(options)) {\n                MediumEditor.Extension.call(this, this.defaults[options]);\n            } else {\n                MediumEditor.Extension.call(this, options);\n            }\n        },\n\n        init: function () {\n            MediumEditor.Extension.prototype.init.apply(this, arguments);\n\n            this.button = this.createButton();\n            this.on(this.button, 'click', this.handleClick.bind(this));\n        },\n\n        /* getButton: [function ()]\n         *\n         * If implemented, this function will be called when\n         * the toolbar is being created.  The DOM Element returned\n         * by this function will be appended to the toolbar along\n         * with any other buttons.\n         */\n        getButton: function () {\n            return this.button;\n        },\n\n        getAction: function () {\n            return (typeof this.action === 'function') ? this.action(this.base.options) : this.action;\n        },\n\n        getAria: function () {\n            return (typeof this.aria === 'function') ? this.aria(this.base.options) : this.aria;\n        },\n\n        getTagNames: function () {\n            return (typeof this.tagNames === 'function') ? this.tagNames(this.base.options) : this.tagNames;\n        },\n\n        createButton: function () {\n            var button = this.document.createElement('button'),\n                content = this.contentDefault,\n                ariaLabel = this.getAria(),\n                buttonLabels = this.getEditorOption('buttonLabels');\n            // Add class names\n            button.classList.add('medium-editor-action');\n            button.classList.add('medium-editor-action-' + this.name);\n            if (this.classList) {\n                this.classList.forEach(function (className) {\n                    button.classList.add(className);\n                });\n            }\n\n            // Add attributes\n            button.setAttribute('data-action', this.getAction());\n            if (ariaLabel) {\n                button.setAttribute('title', ariaLabel);\n                button.setAttribute('aria-label', ariaLabel);\n            }\n            if (this.attrs) {\n                Object.keys(this.attrs).forEach(function (attr) {\n                    button.setAttribute(attr, this.attrs[attr]);\n                }, this);\n            }\n\n            if (buttonLabels === 'fontawesome' && this.contentFA) {\n                content = this.contentFA;\n            }\n            button.innerHTML = content;\n            return button;\n        },\n\n        handleClick: function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            var action = this.getAction();\n\n            if (action) {\n                this.execAction(action);\n            }\n        },\n\n        isActive: function () {\n            return this.button.classList.contains(this.getEditorOption('activeButtonClass'));\n        },\n\n        setInactive: function () {\n            this.button.classList.remove(this.getEditorOption('activeButtonClass'));\n            delete this.knownState;\n        },\n\n        setActive: function () {\n            this.button.classList.add(this.getEditorOption('activeButtonClass'));\n            delete this.knownState;\n        },\n\n        queryCommandState: function () {\n            var queryState = null;\n            if (this.useQueryState) {\n                queryState = this.base.queryCommandState(this.getAction());\n            }\n            return queryState;\n        },\n\n        isAlreadyApplied: function (node) {\n            var isMatch = false,\n                tagNames = this.getTagNames(),\n                styleVals,\n                computedStyle;\n\n            if (this.knownState === false || this.knownState === true) {\n                return this.knownState;\n            }\n\n            if (tagNames && tagNames.length > 0) {\n                isMatch = tagNames.indexOf(node.nodeName.toLowerCase()) !== -1;\n            }\n\n            if (!isMatch && this.style) {\n                styleVals = this.style.value.split('|');\n                computedStyle = this.window.getComputedStyle(node, null).getPropertyValue(this.style.prop);\n                styleVals.forEach(function (val) {\n                    if (!this.knownState) {\n                        isMatch = (computedStyle.indexOf(val) !== -1);\n                        // text-decoration is not inherited by default\n                        // so if the computed style for text-decoration doesn't match\n                        // don't write to knownState so we can fallback to other checks\n                        if (isMatch || this.style.prop !== 'text-decoration') {\n                            this.knownState = isMatch;\n                        }\n                    }\n                }, this);\n            }\n\n            return isMatch;\n        }\n    });\n\n    Button.isBuiltInButton = function (name) {\n        return (typeof name === 'string') && MediumEditor.extensions.button.prototype.defaults.hasOwnProperty(name);\n    };\n\n    MediumEditor.extensions.button = Button;\n}());\n\n(function () {\n    'use strict';\n\n    /* MediumEditor.extensions.button.defaults: [Object]\n     * Set of default config options for all of the built-in MediumEditor buttons\n     */\n    MediumEditor.extensions.button.prototype.defaults = {\n        'bold': {\n            name: 'bold',\n            action: 'bold',\n            aria: 'bold',\n            tagNames: ['b', 'strong'],\n            style: {\n                prop: 'font-weight',\n                value: '700|bold'\n            },\n            useQueryState: true,\n            contentDefault: '<b>B</b>',\n            contentFA: '<i class=\"fa fa-bold\"></i>'\n        },\n        'italic': {\n            name: 'italic',\n            action: 'italic',\n            aria: 'italic',\n            tagNames: ['i', 'em'],\n            style: {\n                prop: 'font-style',\n                value: 'italic'\n            },\n            useQueryState: true,\n            contentDefault: '<b><i>I</i></b>',\n            contentFA: '<i class=\"fa fa-italic\"></i>'\n        },\n        'underline': {\n            name: 'underline',\n            action: 'underline',\n            aria: 'underline',\n            tagNames: ['u'],\n            style: {\n                prop: 'text-decoration',\n                value: 'underline'\n            },\n            useQueryState: true,\n            contentDefault: '<b><u>U</u></b>',\n            contentFA: '<i class=\"fa fa-underline\"></i>'\n        },\n        'strikethrough': {\n            name: 'strikethrough',\n            action: 'strikethrough',\n            aria: 'strike through',\n            tagNames: ['strike'],\n            style: {\n                prop: 'text-decoration',\n                value: 'line-through'\n            },\n            useQueryState: true,\n            contentDefault: '<s>A</s>',\n            contentFA: '<i class=\"fa fa-strikethrough\"></i>'\n        },\n        'superscript': {\n            name: 'superscript',\n            action: 'superscript',\n            aria: 'superscript',\n            tagNames: ['sup'],\n            /* firefox doesn't behave the way we want it to, so we CAN'T use queryCommandState for superscript\n               https://github.com/guardian/scribe/blob/master/BROWSERINCONSISTENCIES.md#documentquerycommandstate */\n            // useQueryState: true\n            contentDefault: '<b>x<sup>1</sup></b>',\n            contentFA: '<i class=\"fa fa-superscript\"></i>'\n        },\n        'subscript': {\n            name: 'subscript',\n            action: 'subscript',\n            aria: 'subscript',\n            tagNames: ['sub'],\n            /* firefox doesn't behave the way we want it to, so we CAN'T use queryCommandState for subscript\n               https://github.com/guardian/scribe/blob/master/BROWSERINCONSISTENCIES.md#documentquerycommandstate */\n            // useQueryState: true\n            contentDefault: '<b>x<sub>1</sub></b>',\n            contentFA: '<i class=\"fa fa-subscript\"></i>'\n        },\n        'image': {\n            name: 'image',\n            action: 'image',\n            aria: 'image',\n            tagNames: ['img'],\n            contentDefault: '<b>image</b>',\n            contentFA: '<i class=\"fa fa-picture-o\"></i>'\n        },\n        'orderedlist': {\n            name: 'orderedlist',\n            action: 'insertorderedlist',\n            aria: 'ordered list',\n            tagNames: ['ol'],\n            useQueryState: true,\n            contentDefault: '<b>1.</b>',\n            contentFA: '<i class=\"fa fa-list-ol\"></i>'\n        },\n        'unorderedlist': {\n            name: 'unorderedlist',\n            action: 'insertunorderedlist',\n            aria: 'unordered list',\n            tagNames: ['ul'],\n            useQueryState: true,\n            contentDefault: '<b>&bull;</b>',\n            contentFA: '<i class=\"fa fa-list-ul\"></i>'\n        },\n        'indent': {\n            name: 'indent',\n            action: 'indent',\n            aria: 'indent',\n            tagNames: [],\n            contentDefault: '<b>&rarr;</b>',\n            contentFA: '<i class=\"fa fa-indent\"></i>'\n        },\n        'outdent': {\n            name: 'outdent',\n            action: 'outdent',\n            aria: 'outdent',\n            tagNames: [],\n            contentDefault: '<b>&larr;</b>',\n            contentFA: '<i class=\"fa fa-outdent\"></i>'\n        },\n        'justifyCenter': {\n            name: 'justifyCenter',\n            action: 'justifyCenter',\n            aria: 'center justify',\n            tagNames: [],\n            style: {\n                prop: 'text-align',\n                value: 'center'\n            },\n            contentDefault: '<b>C</b>',\n            contentFA: '<i class=\"fa fa-align-center\"></i>'\n        },\n        'justifyFull': {\n            name: 'justifyFull',\n            action: 'justifyFull',\n            aria: 'full justify',\n            tagNames: [],\n            style: {\n                prop: 'text-align',\n                value: 'justify'\n            },\n            contentDefault: '<b>J</b>',\n            contentFA: '<i class=\"fa fa-align-justify\"></i>'\n        },\n        'justifyLeft': {\n            name: 'justifyLeft',\n            action: 'justifyLeft',\n            aria: 'left justify',\n            tagNames: [],\n            style: {\n                prop: 'text-align',\n                value: 'left'\n            },\n            contentDefault: '<b>L</b>',\n            contentFA: '<i class=\"fa fa-align-left\"></i>'\n        },\n        'justifyRight': {\n            name: 'justifyRight',\n            action: 'justifyRight',\n            aria: 'right justify',\n            tagNames: [],\n            style: {\n                prop: 'text-align',\n                value: 'right'\n            },\n            contentDefault: '<b>R</b>',\n            contentFA: '<i class=\"fa fa-align-right\"></i>'\n        },\n        // Known inline elements that are not removed, or not removed consistantly across browsers:\n        // <span>, <label>, <br>\n        'removeFormat': {\n            name: 'removeFormat',\n            aria: 'remove formatting',\n            action: 'removeFormat',\n            contentDefault: '<b>X</b>',\n            contentFA: '<i class=\"fa fa-eraser\"></i>'\n        },\n\n        /***** Buttons for appending block elements (append-<element> action) *****/\n\n        'quote': {\n            name: 'quote',\n            action: 'append-blockquote',\n            aria: 'blockquote',\n            tagNames: ['blockquote'],\n            contentDefault: '<b>&ldquo;</b>',\n            contentFA: '<i class=\"fa fa-quote-right\"></i>'\n        },\n        'pre': {\n            name: 'pre',\n            action: 'append-pre',\n            aria: 'preformatted text',\n            tagNames: ['pre'],\n            contentDefault: '<b>0101</b>',\n            contentFA: '<i class=\"fa fa-code fa-lg\"></i>'\n        },\n        'h1': {\n            name: 'h1',\n            action: 'append-h1',\n            aria: 'header type one',\n            tagNames: ['h1'],\n            contentDefault: '<b>H1</b>',\n            contentFA: '<i class=\"fa fa-header\"><sup>1</sup>'\n        },\n        'h2': {\n            name: 'h2',\n            action: 'append-h2',\n            aria: 'header type two',\n            tagNames: ['h2'],\n            contentDefault: '<b>H2</b>',\n            contentFA: '<i class=\"fa fa-header\"><sup>2</sup>'\n        },\n        'h3': {\n            name: 'h3',\n            action: 'append-h3',\n            aria: 'header type three',\n            tagNames: ['h3'],\n            contentDefault: '<b>H3</b>',\n            contentFA: '<i class=\"fa fa-header\"><sup>3</sup>'\n        },\n        'h4': {\n            name: 'h4',\n            action: 'append-h4',\n            aria: 'header type four',\n            tagNames: ['h4'],\n            contentDefault: '<b>H4</b>',\n            contentFA: '<i class=\"fa fa-header\"><sup>4</sup>'\n        },\n        'h5': {\n            name: 'h5',\n            action: 'append-h5',\n            aria: 'header type five',\n            tagNames: ['h5'],\n            contentDefault: '<b>H5</b>',\n            contentFA: '<i class=\"fa fa-header\"><sup>5</sup>'\n        },\n        'h6': {\n            name: 'h6',\n            action: 'append-h6',\n            aria: 'header type six',\n            tagNames: ['h6'],\n            contentDefault: '<b>H6</b>',\n            contentFA: '<i class=\"fa fa-header\"><sup>6</sup>'\n        }\n    };\n\n})();\n(function () {\n    'use strict';\n\n    /* Base functionality for an extension which will display\n     * a 'form' inside the toolbar\n     */\n    var FormExtension = MediumEditor.extensions.button.extend({\n\n        init: function () {\n            MediumEditor.extensions.button.prototype.init.apply(this, arguments);\n        },\n\n        // default labels for the form buttons\n        formSaveLabel: '&#10003;',\n        formCloseLabel: '&times;',\n\n        /* activeClass: [string]\n         * set class which added to shown form\n         */\n        activeClass: 'medium-editor-toolbar-form-active',\n\n        /* hasForm: [boolean]\n         *\n         * Setting this to true will cause getForm() to be called\n         * when the toolbar is created, so the form can be appended\n         * inside the toolbar container\n         */\n        hasForm: true,\n\n        /* getForm: [function ()]\n         *\n         * When hasForm is true, this function must be implemented\n         * and return a DOM Element which will be appended to\n         * the toolbar container. The form should start hidden, and\n         * the extension can choose when to hide/show it\n         */\n        getForm: function () {},\n\n        /* isDisplayed: [function ()]\n         *\n         * This function should return true/false reflecting\n         * whether the form is currently displayed\n         */\n        isDisplayed: function () {\n            if (this.hasForm) {\n                return this.getForm().classList.contains(this.activeClass);\n            }\n            return false;\n        },\n\n        /* hideForm: [function ()]\n         *\n         * This function should show the form element inside\n         * the toolbar container\n         */\n        showForm: function () {\n            if (this.hasForm) {\n                this.getForm().classList.add(this.activeClass);\n            }\n        },\n\n        /* hideForm: [function ()]\n         *\n         * This function should hide the form element inside\n         * the toolbar container\n         */\n        hideForm: function () {\n            if (this.hasForm) {\n                this.getForm().classList.remove(this.activeClass);\n            }\n        },\n\n        /************************ Helpers ************************\n         * The following are helpers that are either set by MediumEditor\n         * during initialization, or are helper methods which either\n         * route calls to the MediumEditor instance or provide common\n         * functionality for all form extensions\n         *********************************************************/\n\n        /* showToolbarDefaultActions: [function ()]\n         *\n         * Helper method which will turn back the toolbar after canceling\n         * the customized form\n         */\n        showToolbarDefaultActions: function () {\n            var toolbar = this.base.getExtensionByName('toolbar');\n            if (toolbar) {\n                toolbar.showToolbarDefaultActions();\n            }\n        },\n\n        /* hideToolbarDefaultActions: [function ()]\n         *\n         * Helper function which will hide the default contents of the\n         * toolbar, but leave the toolbar container in the same state\n         * to allow a form to display its custom contents inside the toolbar\n         */\n        hideToolbarDefaultActions: function () {\n            var toolbar = this.base.getExtensionByName('toolbar');\n            if (toolbar) {\n                toolbar.hideToolbarDefaultActions();\n            }\n        },\n\n        /* setToolbarPosition: [function ()]\n         *\n         * Helper function which will update the size and position\n         * of the toolbar based on the toolbar content and the current\n         * position of the user's selection\n         */\n        setToolbarPosition: function () {\n            var toolbar = this.base.getExtensionByName('toolbar');\n            if (toolbar) {\n                toolbar.setToolbarPosition();\n            }\n        }\n    });\n\n    MediumEditor.extensions.form = FormExtension;\n})();\n(function () {\n    'use strict';\n\n    var AnchorForm = MediumEditor.extensions.form.extend({\n        /* Anchor Form Options */\n\n        /* customClassOption: [string]  (previously options.anchorButton + options.anchorButtonClass)\n         * Custom class name the user can optionally have added to their created links (ie 'button').\n         * If passed as a non-empty string, a checkbox will be displayed allowing the user to choose\n         * whether to have the class added to the created link or not.\n         */\n        customClassOption: null,\n\n        /* customClassOptionText: [string]\n         * text to be shown in the checkbox when the __customClassOption__ is being used.\n         */\n        customClassOptionText: 'Button',\n\n        /* linkValidation: [boolean]  (previously options.checkLinkFormat)\n         * enables/disables check for common URL protocols on anchor links.\n         */\n        linkValidation: false,\n\n        /* placeholderText: [string]  (previously options.anchorInputPlaceholder)\n         * text to be shown as placeholder of the anchor input.\n         */\n        placeholderText: 'Paste or type a link',\n\n        /* targetCheckbox: [boolean]  (previously options.anchorTarget)\n         * enables/disables displaying a \"Open in new window\" checkbox, which when checked\n         * changes the `target` attribute of the created link.\n         */\n        targetCheckbox: false,\n\n        /* targetCheckboxText: [string]  (previously options.anchorInputCheckboxLabel)\n         * text to be shown in the checkbox enabled via the __targetCheckbox__ option.\n         */\n        targetCheckboxText: 'Open in new window',\n\n        // Options for the Button base class\n        name: 'anchor',\n        action: 'createLink',\n        aria: 'link',\n        tagNames: ['a'],\n        contentDefault: '<b>#</b>',\n        contentFA: '<i class=\"fa fa-link\"></i>',\n\n        init: function () {\n            MediumEditor.extensions.form.prototype.init.apply(this, arguments);\n\n            this.subscribe('editableKeydown', this.handleKeydown.bind(this));\n        },\n\n        // Called when the button the toolbar is clicked\n        // Overrides ButtonExtension.handleClick\n        handleClick: function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            var range = MediumEditor.selection.getSelectionRange(this.document);\n\n            if (range.startContainer.nodeName.toLowerCase() === 'a' ||\n                range.endContainer.nodeName.toLowerCase() === 'a' ||\n                MediumEditor.util.getClosestTag(MediumEditor.selection.getSelectedParentElement(range), 'a')) {\n                return this.execAction('unlink');\n            }\n\n            if (!this.isDisplayed()) {\n                this.showForm();\n            }\n\n            return false;\n        },\n\n        // Called when user hits the defined shortcut (CTRL / COMMAND + K)\n        handleKeydown: function (event) {\n            if (MediumEditor.util.isKey(event, MediumEditor.util.keyCode.K) && MediumEditor.util.isMetaCtrlKey(event) && !event.shiftKey) {\n                this.handleClick(event);\n            }\n        },\n\n        // Called by medium-editor to append form to the toolbar\n        getForm: function () {\n            if (!this.form) {\n                this.form = this.createForm();\n            }\n            return this.form;\n        },\n\n        getTemplate: function () {\n            var template = [\n                '<input type=\"text\" class=\"medium-editor-toolbar-input\" placeholder=\"', this.placeholderText, '\">'\n            ];\n\n            template.push(\n                '<a href=\"#\" class=\"medium-editor-toolbar-save\">',\n                this.getEditorOption('buttonLabels') === 'fontawesome' ? '<i class=\"fa fa-check\"></i>' : this.formSaveLabel,\n                '</a>'\n            );\n\n            template.push('<a href=\"#\" class=\"medium-editor-toolbar-close\">',\n                this.getEditorOption('buttonLabels') === 'fontawesome' ? '<i class=\"fa fa-times\"></i>' : this.formCloseLabel,\n                '</a>');\n\n            // both of these options are slightly moot with the ability to\n            // override the various form buildup/serialize functions.\n\n            if (this.targetCheckbox) {\n                // fixme: ideally, this targetCheckboxText would be a formLabel too,\n                // figure out how to deprecate? also consider `fa-` icon default implcations.\n                template.push(\n                    '<div class=\"medium-editor-toolbar-form-row\">',\n                    '<input type=\"checkbox\" class=\"medium-editor-toolbar-anchor-target\">',\n                    '<label>',\n                    this.targetCheckboxText,\n                    '</label>',\n                    '</div>'\n                );\n            }\n\n            if (this.customClassOption) {\n                // fixme: expose this `Button` text as a formLabel property, too\n                // and provide similar access to a `fa-` icon default.\n                template.push(\n                    '<div class=\"medium-editor-toolbar-form-row\">',\n                    '<input type=\"checkbox\" class=\"medium-editor-toolbar-anchor-button\">',\n                    '<label>',\n                    this.customClassOptionText,\n                    '</label>',\n                    '</div>'\n                );\n            }\n\n            return template.join('');\n\n        },\n\n        // Used by medium-editor when the default toolbar is to be displayed\n        isDisplayed: function () {\n            return MediumEditor.extensions.form.prototype.isDisplayed.apply(this);\n        },\n\n        hideForm: function () {\n            MediumEditor.extensions.form.prototype.hideForm.apply(this);\n            this.getInput().value = '';\n        },\n\n        showForm: function (opts) {\n            var input = this.getInput(),\n                targetCheckbox = this.getAnchorTargetCheckbox(),\n                buttonCheckbox = this.getAnchorButtonCheckbox();\n\n            opts = opts || { value: '' };\n            // TODO: This is for backwards compatability\n            // We don't need to support the 'string' argument in 6.0.0\n            if (typeof opts === 'string') {\n                opts = {\n                    value: opts\n                };\n            }\n\n            this.base.saveSelection();\n            this.hideToolbarDefaultActions();\n            MediumEditor.extensions.form.prototype.showForm.apply(this);\n            this.setToolbarPosition();\n\n            input.value = opts.value;\n            input.focus();\n\n            // If we have a target checkbox, we want it to be checked/unchecked\n            // based on whether the existing link has target=_blank\n            if (targetCheckbox) {\n                targetCheckbox.checked = opts.target === '_blank';\n            }\n\n            // If we have a custom class checkbox, we want it to be checked/unchecked\n            // based on whether an existing link already has the class\n            if (buttonCheckbox) {\n                var classList = opts.buttonClass ? opts.buttonClass.split(' ') : [];\n                buttonCheckbox.checked = (classList.indexOf(this.customClassOption) !== -1);\n            }\n        },\n\n        // Called by core when tearing down medium-editor (destroy)\n        destroy: function () {\n            if (!this.form) {\n                return false;\n            }\n\n            if (this.form.parentNode) {\n                this.form.parentNode.removeChild(this.form);\n            }\n\n            delete this.form;\n        },\n\n        // core methods\n\n        getFormOpts: function () {\n            // no notion of private functions? wanted `_getFormOpts`\n            var targetCheckbox = this.getAnchorTargetCheckbox(),\n                buttonCheckbox = this.getAnchorButtonCheckbox(),\n                opts = {\n                    value: this.getInput().value.trim()\n                };\n\n            if (this.linkValidation) {\n                opts.value = this.checkLinkFormat(opts.value);\n            }\n\n            opts.target = '_self';\n            if (targetCheckbox && targetCheckbox.checked) {\n                opts.target = '_blank';\n            }\n\n            if (buttonCheckbox && buttonCheckbox.checked) {\n                opts.buttonClass = this.customClassOption;\n            }\n\n            return opts;\n        },\n\n        doFormSave: function () {\n            var opts = this.getFormOpts();\n            this.completeFormSave(opts);\n        },\n\n        completeFormSave: function (opts) {\n            this.base.restoreSelection();\n            this.execAction(this.action, opts);\n            this.base.checkSelection();\n        },\n\n        checkLinkFormat: function (value) {\n            // Matches any alphabetical characters followed by ://\n            // Matches protocol relative \"//\"\n            // Matches common external protocols \"mailto:\" \"tel:\" \"maps:\"\n            // Matches relative hash link, begins with \"#\"\n            var urlSchemeRegex = /^([a-z]+:)?\\/\\/|^(mailto|tel|maps):|^\\#/i,\n            // var te is a regex for checking if the string is a telephone number\n            telRegex = /^\\+?\\s?\\(?(?:\\d\\s?\\-?\\)?){3,20}$/;\n            if (telRegex.test(value)) {\n                return 'tel:' + value;\n            } else {\n                // Check for URL scheme and default to http:// if none found\n                return (urlSchemeRegex.test(value) ? '' : 'http://') + encodeURI(value);\n            }\n        },\n\n        doFormCancel: function () {\n            this.base.restoreSelection();\n            this.base.checkSelection();\n        },\n\n        // form creation and event handling\n        attachFormEvents: function (form) {\n            var close = form.querySelector('.medium-editor-toolbar-close'),\n                save = form.querySelector('.medium-editor-toolbar-save'),\n                input = form.querySelector('.medium-editor-toolbar-input');\n\n            // Handle clicks on the form itself\n            this.on(form, 'click', this.handleFormClick.bind(this));\n\n            // Handle typing in the textbox\n            this.on(input, 'keyup', this.handleTextboxKeyup.bind(this));\n\n            // Handle close button clicks\n            this.on(close, 'click', this.handleCloseClick.bind(this));\n\n            // Handle save button clicks (capture)\n            this.on(save, 'click', this.handleSaveClick.bind(this), true);\n\n        },\n\n        createForm: function () {\n            var doc = this.document,\n                form = doc.createElement('div');\n\n            // Anchor Form (div)\n            form.className = 'medium-editor-toolbar-form';\n            form.id = 'medium-editor-toolbar-form-anchor-' + this.getEditorId();\n            form.innerHTML = this.getTemplate();\n            this.attachFormEvents(form);\n\n            return form;\n        },\n\n        getInput: function () {\n            return this.getForm().querySelector('input.medium-editor-toolbar-input');\n        },\n\n        getAnchorTargetCheckbox: function () {\n            return this.getForm().querySelector('.medium-editor-toolbar-anchor-target');\n        },\n\n        getAnchorButtonCheckbox: function () {\n            return this.getForm().querySelector('.medium-editor-toolbar-anchor-button');\n        },\n\n        handleTextboxKeyup: function (event) {\n            // For ENTER -> create the anchor\n            if (event.keyCode === MediumEditor.util.keyCode.ENTER) {\n                event.preventDefault();\n                this.doFormSave();\n                return;\n            }\n\n            // For ESCAPE -> close the form\n            if (event.keyCode === MediumEditor.util.keyCode.ESCAPE) {\n                event.preventDefault();\n                this.doFormCancel();\n            }\n        },\n\n        handleFormClick: function (event) {\n            // make sure not to hide form when clicking inside the form\n            event.stopPropagation();\n        },\n\n        handleSaveClick: function (event) {\n            // Clicking Save -> create the anchor\n            event.preventDefault();\n            this.doFormSave();\n        },\n\n        handleCloseClick: function (event) {\n            // Click Close -> close the form\n            event.preventDefault();\n            this.doFormCancel();\n        }\n    });\n\n    MediumEditor.extensions.anchor = AnchorForm;\n}());\n\n(function () {\n    'use strict';\n\n    var AnchorPreview = MediumEditor.Extension.extend({\n        name: 'anchor-preview',\n\n        // Anchor Preview Options\n\n        /* hideDelay: [number]  (previously options.anchorPreviewHideDelay)\n         * time in milliseconds to show the anchor tag preview after the mouse has left the anchor tag.\n         */\n        hideDelay: 500,\n\n        /* previewValueSelector: [string]\n         * the default selector to locate where to put the activeAnchor value in the preview\n         */\n        previewValueSelector: 'a',\n\n        /* showWhenToolbarIsVisible: [boolean]\n         * determines whether the anchor tag preview shows up when the toolbar is visible\n         */\n        showWhenToolbarIsVisible: false,\n\n        /* showOnEmptyLinks: [boolean]\n        * determines whether the anchor tag preview shows up on links with href=\"\" or href=\"#something\"\n        */\n        showOnEmptyLinks: true,\n\n        init: function () {\n            this.anchorPreview = this.createPreview();\n\n            this.getEditorOption('elementsContainer').appendChild(this.anchorPreview);\n\n            this.attachToEditables();\n        },\n\n        getInteractionElements: function () {\n            return this.getPreviewElement();\n        },\n\n        // TODO: Remove this function in 6.0.0\n        getPreviewElement: function () {\n            return this.anchorPreview;\n        },\n\n        createPreview: function () {\n            var el = this.document.createElement('div');\n\n            el.id = 'medium-editor-anchor-preview-' + this.getEditorId();\n            el.className = 'medium-editor-anchor-preview';\n            el.innerHTML = this.getTemplate();\n\n            this.on(el, 'click', this.handleClick.bind(this));\n\n            return el;\n        },\n\n        getTemplate: function () {\n            return '<div class=\"medium-editor-toolbar-anchor-preview\" id=\"medium-editor-toolbar-anchor-preview\">' +\n                '    <a class=\"medium-editor-toolbar-anchor-preview-inner\"></a>' +\n                '</div>';\n        },\n\n        destroy: function () {\n            if (this.anchorPreview) {\n                if (this.anchorPreview.parentNode) {\n                    this.anchorPreview.parentNode.removeChild(this.anchorPreview);\n                }\n                delete this.anchorPreview;\n            }\n        },\n\n        hidePreview: function () {\n            this.anchorPreview.classList.remove('medium-editor-anchor-preview-active');\n            this.activeAnchor = null;\n        },\n\n        showPreview: function (anchorEl) {\n            if (this.anchorPreview.classList.contains('medium-editor-anchor-preview-active') ||\n                    anchorEl.getAttribute('data-disable-preview')) {\n                return true;\n            }\n\n            if (this.previewValueSelector) {\n                this.anchorPreview.querySelector(this.previewValueSelector).textContent = anchorEl.attributes.href.value;\n                this.anchorPreview.querySelector(this.previewValueSelector).href = anchorEl.attributes.href.value;\n            }\n\n            this.anchorPreview.classList.add('medium-toolbar-arrow-over');\n            this.anchorPreview.classList.remove('medium-toolbar-arrow-under');\n\n            if (!this.anchorPreview.classList.contains('medium-editor-anchor-preview-active')) {\n                this.anchorPreview.classList.add('medium-editor-anchor-preview-active');\n            }\n\n            this.activeAnchor = anchorEl;\n\n            this.positionPreview();\n            this.attachPreviewHandlers();\n\n            return this;\n        },\n\n        positionPreview: function (activeAnchor) {\n            activeAnchor = activeAnchor || this.activeAnchor;\n            var containerWidth = this.window.innerWidth,\n                buttonHeight = this.anchorPreview.offsetHeight,\n                boundary = activeAnchor.getBoundingClientRect(),\n                diffLeft = this.diffLeft,\n                diffTop = this.diffTop,\n                elementsContainer = this.getEditorOption('elementsContainer'),\n                elementsContainerAbsolute = ['absolute', 'fixed'].indexOf(window.getComputedStyle(elementsContainer).getPropertyValue('position')) > -1,\n                relativeBoundary = {},\n                halfOffsetWidth, defaultLeft, middleBoundary, elementsContainerBoundary, top;\n\n            halfOffsetWidth = this.anchorPreview.offsetWidth / 2;\n            var toolbarExtension = this.base.getExtensionByName('toolbar');\n            if (toolbarExtension) {\n                diffLeft = toolbarExtension.diffLeft;\n                diffTop = toolbarExtension.diffTop;\n            }\n            defaultLeft = diffLeft - halfOffsetWidth;\n\n            // If container element is absolute / fixed, recalculate boundaries to be relative to the container\n            if (elementsContainerAbsolute) {\n                elementsContainerBoundary = elementsContainer.getBoundingClientRect();\n                ['top', 'left'].forEach(function (key) {\n                    relativeBoundary[key] = boundary[key] - elementsContainerBoundary[key];\n                });\n\n                relativeBoundary.width = boundary.width;\n                relativeBoundary.height = boundary.height;\n                boundary = relativeBoundary;\n\n                containerWidth = elementsContainerBoundary.width;\n\n                // Adjust top position according to container scroll position\n                top = elementsContainer.scrollTop;\n            } else {\n                // Adjust top position according to window scroll position\n                top = this.window.pageYOffset;\n            }\n\n            middleBoundary = boundary.left + boundary.width / 2;\n            top += buttonHeight + boundary.top + boundary.height - diffTop - this.anchorPreview.offsetHeight;\n\n            this.anchorPreview.style.top = Math.round(top) + 'px';\n            this.anchorPreview.style.right = 'initial';\n            if (middleBoundary < halfOffsetWidth) {\n                this.anchorPreview.style.left = defaultLeft + halfOffsetWidth + 'px';\n                this.anchorPreview.style.right = 'initial';\n            } else if ((containerWidth - middleBoundary) < halfOffsetWidth) {\n                this.anchorPreview.style.left = 'auto';\n                this.anchorPreview.style.right = 0;\n            } else {\n                this.anchorPreview.style.left = defaultLeft + middleBoundary + 'px';\n                this.anchorPreview.style.right = 'initial';\n            }\n        },\n\n        attachToEditables: function () {\n            this.subscribe('editableMouseover', this.handleEditableMouseover.bind(this));\n            this.subscribe('positionedToolbar', this.handlePositionedToolbar.bind(this));\n        },\n\n        handlePositionedToolbar: function () {\n            // If the toolbar is visible and positioned, we don't need to hide the preview\n            // when showWhenToolbarIsVisible is true\n            if (!this.showWhenToolbarIsVisible) {\n                this.hidePreview();\n            }\n        },\n\n        handleClick: function (event) {\n            var anchorExtension = this.base.getExtensionByName('anchor'),\n                activeAnchor = this.activeAnchor;\n\n            if (anchorExtension && activeAnchor) {\n                event.preventDefault();\n\n                this.base.selectElement(this.activeAnchor);\n\n                // Using setTimeout + delay because:\n                // We may actually be displaying the anchor form, which should be controlled by delay\n                this.base.delay(function () {\n                    if (activeAnchor) {\n                        var opts = {\n                            value: activeAnchor.attributes.href.value,\n                            target: activeAnchor.getAttribute('target'),\n                            buttonClass: activeAnchor.getAttribute('class')\n                        };\n                        anchorExtension.showForm(opts);\n                        activeAnchor = null;\n                    }\n                }.bind(this));\n            }\n\n            this.hidePreview();\n        },\n\n        handleAnchorMouseout: function () {\n            this.anchorToPreview = null;\n            this.off(this.activeAnchor, 'mouseout', this.instanceHandleAnchorMouseout);\n            this.instanceHandleAnchorMouseout = null;\n        },\n\n        handleEditableMouseover: function (event) {\n            var target = MediumEditor.util.getClosestTag(event.target, 'a');\n\n            if (false === target) {\n                return;\n            }\n\n            // Detect empty href attributes\n            // The browser will make href=\"\" or href=\"#top\"\n            // into absolute urls when accessed as event.target.href, so check the html\n            if (!this.showOnEmptyLinks &&\n                (!/href=[\"']\\S+[\"']/.test(target.outerHTML) || /href=[\"']#\\S+[\"']/.test(target.outerHTML))) {\n                return true;\n            }\n\n            // only show when toolbar is not present\n            var toolbar = this.base.getExtensionByName('toolbar');\n            if (!this.showWhenToolbarIsVisible && toolbar && toolbar.isDisplayed && toolbar.isDisplayed()) {\n                return true;\n            }\n\n            // detach handler for other anchor in case we hovered multiple anchors quickly\n            if (this.activeAnchor && this.activeAnchor !== target) {\n                this.detachPreviewHandlers();\n            }\n\n            this.anchorToPreview = target;\n\n            this.instanceHandleAnchorMouseout = this.handleAnchorMouseout.bind(this);\n            this.on(this.anchorToPreview, 'mouseout', this.instanceHandleAnchorMouseout);\n            // Using setTimeout + delay because:\n            // - We're going to show the anchor preview according to the configured delay\n            //   if the mouse has not left the anchor tag in that time\n            this.base.delay(function () {\n                if (this.anchorToPreview) {\n                    this.showPreview(this.anchorToPreview);\n                }\n            }.bind(this));\n        },\n\n        handlePreviewMouseover: function () {\n            this.lastOver = (new Date()).getTime();\n            this.hovering = true;\n        },\n\n        handlePreviewMouseout: function (event) {\n            if (!event.relatedTarget || !/anchor-preview/.test(event.relatedTarget.className)) {\n                this.hovering = false;\n            }\n        },\n\n        updatePreview: function () {\n            if (this.hovering) {\n                return true;\n            }\n            var durr = (new Date()).getTime() - this.lastOver;\n            if (durr > this.hideDelay) {\n                // hide the preview 1/2 second after mouse leaves the link\n                this.detachPreviewHandlers();\n            }\n        },\n\n        detachPreviewHandlers: function () {\n            // cleanup\n            clearInterval(this.intervalTimer);\n            if (this.instanceHandlePreviewMouseover) {\n                this.off(this.anchorPreview, 'mouseover', this.instanceHandlePreviewMouseover);\n                this.off(this.anchorPreview, 'mouseout', this.instanceHandlePreviewMouseout);\n                if (this.activeAnchor) {\n                    this.off(this.activeAnchor, 'mouseover', this.instanceHandlePreviewMouseover);\n                    this.off(this.activeAnchor, 'mouseout', this.instanceHandlePreviewMouseout);\n                }\n            }\n\n            this.hidePreview();\n\n            this.hovering = this.instanceHandlePreviewMouseover = this.instanceHandlePreviewMouseout = null;\n        },\n\n        // TODO: break up method and extract out handlers\n        attachPreviewHandlers: function () {\n            this.lastOver = (new Date()).getTime();\n            this.hovering = true;\n\n            this.instanceHandlePreviewMouseover = this.handlePreviewMouseover.bind(this);\n            this.instanceHandlePreviewMouseout = this.handlePreviewMouseout.bind(this);\n\n            this.intervalTimer = setInterval(this.updatePreview.bind(this), 200);\n\n            this.on(this.anchorPreview, 'mouseover', this.instanceHandlePreviewMouseover);\n            this.on(this.anchorPreview, 'mouseout', this.instanceHandlePreviewMouseout);\n            this.on(this.activeAnchor, 'mouseover', this.instanceHandlePreviewMouseover);\n            this.on(this.activeAnchor, 'mouseout', this.instanceHandlePreviewMouseout);\n        }\n    });\n\n    MediumEditor.extensions.anchorPreview = AnchorPreview;\n}());\n\n(function () {\n    'use strict';\n\n    var WHITESPACE_CHARS,\n        KNOWN_TLDS_FRAGMENT,\n        LINK_REGEXP_TEXT,\n        KNOWN_TLDS_REGEXP;\n\n    WHITESPACE_CHARS = [' ', '\\t', '\\n', '\\r', '\\u00A0', '\\u2000', '\\u2001', '\\u2002', '\\u2003',\n                                    '\\u2028', '\\u2029'];\n    KNOWN_TLDS_FRAGMENT = 'com|net|org|edu|gov|mil|aero|asia|biz|cat|coop|info|int|jobs|mobi|museum|name|post|pro|tel|travel|' +\n        'xxx|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|' +\n        'bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|dd|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|' +\n        'fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|' +\n        'is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|' +\n        'mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|' +\n        'pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|ja|sk|sl|sm|sn|so|sr|ss|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|' +\n        'tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw';\n\n    LINK_REGEXP_TEXT =\n        '(' +\n        // Version of Gruber URL Regexp optimized for JS: http://stackoverflow.com/a/17733640\n        '((?:(https?://|ftps?://|nntp://)|www\\\\d{0,3}[.]|[a-z0-9.\\\\-]+[.](' + KNOWN_TLDS_FRAGMENT + ')\\\\\\/)\\\\S+(?:[^\\\\s`!\\\\[\\\\]{};:\\'\\\".,?\\u00AB\\u00BB\\u201C\\u201D\\u2018\\u2019]))' +\n        // Addition to above Regexp to support bare domains/one level subdomains with common non-i18n TLDs and without www prefix:\n        ')|(([a-z0-9\\\\-]+\\\\.)?[a-z0-9\\\\-]+\\\\.(' + KNOWN_TLDS_FRAGMENT + '))';\n\n    KNOWN_TLDS_REGEXP = new RegExp('^(' + KNOWN_TLDS_FRAGMENT + ')$', 'i');\n\n    function nodeIsNotInsideAnchorTag(node) {\n        return !MediumEditor.util.getClosestTag(node, 'a');\n    }\n\n    var AutoLink = MediumEditor.Extension.extend({\n        init: function () {\n            MediumEditor.Extension.prototype.init.apply(this, arguments);\n\n            this.disableEventHandling = false;\n            this.subscribe('editableKeypress', this.onKeypress.bind(this));\n            this.subscribe('editableBlur', this.onBlur.bind(this));\n            // MS IE has it's own auto-URL detect feature but ours is better in some ways. Be consistent.\n            this.document.execCommand('AutoUrlDetect', false, false);\n        },\n\n        isLastInstance: function () {\n            var this$1 = this;\n\n            var activeInstances = 0;\n            for (var i = 0; i < this.window._mediumEditors.length; i++) {\n                var editor = this$1.window._mediumEditors[i];\n                if (editor !== null && editor.getExtensionByName('autoLink') !== undefined) {\n                    activeInstances++;\n                }\n            }\n            return activeInstances === 1;\n        },\n\n        destroy: function () {\n            // Turn AutoUrlDetect back on\n            if (this.document.queryCommandSupported('AutoUrlDetect') && this.isLastInstance()) {\n                this.document.execCommand('AutoUrlDetect', false, true);\n            }\n        },\n\n        onBlur: function (blurEvent, editable) {\n            this.performLinking(editable);\n        },\n\n        onKeypress: function (keyPressEvent) {\n            if (this.disableEventHandling) {\n                return;\n            }\n\n            if (MediumEditor.util.isKey(keyPressEvent, [MediumEditor.util.keyCode.SPACE, MediumEditor.util.keyCode.ENTER])) {\n                clearTimeout(this.performLinkingTimeout);\n                // Saving/restoring the selection in the middle of a keypress doesn't work well...\n                this.performLinkingTimeout = setTimeout(function () {\n                    try {\n                        var sel = this.base.exportSelection();\n                        if (this.performLinking(keyPressEvent.target)) {\n                            // pass true for favorLaterSelectionAnchor - this is needed for links at the end of a\n                            // paragraph in MS IE, or MS IE causes the link to be deleted right after adding it.\n                            this.base.importSelection(sel, true);\n                        }\n                    } catch (e) {\n                        if (window.console) {\n                            window.console.error('Failed to perform linking', e);\n                        }\n                        this.disableEventHandling = true;\n                    }\n                }.bind(this), 0);\n            }\n        },\n\n        performLinking: function (contenteditable) {\n            var this$1 = this;\n\n            /*\n            Perform linking on blockElement basis, blockElements are HTML elements with text content and without\n            child element.\n\n            Example:\n            - HTML content\n            <blockquote>\n              <p>link.</p>\n              <p>my</p>\n            </blockquote>\n\n            - blockElements\n            [<p>link.</p>, <p>my</p>]\n\n            otherwise the detection can wrongly find the end of one paragraph and the beginning of another paragraph\n            to constitute a link, such as a paragraph ending \"link.\" and the next paragraph beginning with \"my\" is\n            interpreted into \"link.my\" and the code tries to create a link across blockElements - which doesn't work\n            and is terrible.\n            (Medium deletes the spaces/returns between P tags so the textContent ends up without paragraph spacing)\n            */\n            var blockElements = MediumEditor.util.splitByBlockElements(contenteditable),\n                documentModified = false;\n            if (blockElements.length === 0) {\n                blockElements = [contenteditable];\n            }\n            for (var i = 0; i < blockElements.length; i++) {\n                documentModified = this$1.removeObsoleteAutoLinkSpans(blockElements[i]) || documentModified;\n                documentModified = this$1.performLinkingWithinElement(blockElements[i]) || documentModified;\n            }\n            this.base.events.updateInput(contenteditable, { target: contenteditable, currentTarget: contenteditable });\n            return documentModified;\n        },\n\n        removeObsoleteAutoLinkSpans: function (element) {\n            var this$1 = this;\n\n            if (!element || element.nodeType === 3) {\n                return false;\n            }\n\n            var spans = element.querySelectorAll('span[data-auto-link=\"true\"]'),\n                documentModified = false;\n\n            for (var i = 0; i < spans.length; i++) {\n                var textContent = spans[i].textContent;\n                if (textContent.indexOf('://') === -1) {\n                    textContent = MediumEditor.util.ensureUrlHasProtocol(textContent);\n                }\n                if (spans[i].getAttribute('data-href') !== textContent && nodeIsNotInsideAnchorTag(spans[i])) {\n                    documentModified = true;\n                    var trimmedTextContent = textContent.replace(/\\s+$/, '');\n                    if (spans[i].getAttribute('data-href') === trimmedTextContent) {\n                        var charactersTrimmed = textContent.length - trimmedTextContent.length,\n                            subtree = MediumEditor.util.splitOffDOMTree(spans[i], this$1.splitTextBeforeEnd(spans[i], charactersTrimmed));\n                        spans[i].parentNode.insertBefore(subtree, spans[i].nextSibling);\n                    } else {\n                        // Some editing has happened to the span, so just remove it entirely. The user can put it back\n                        // around just the href content if they need to prevent it from linking\n                        MediumEditor.util.unwrap(spans[i], this$1.document);\n                    }\n                }\n            }\n            return documentModified;\n        },\n\n        splitTextBeforeEnd: function (element, characterCount) {\n            var treeWalker = this.document.createTreeWalker(element, NodeFilter.SHOW_TEXT, null, false),\n                lastChildNotExhausted = true;\n\n            // Start the tree walker at the last descendant of the span\n            while (lastChildNotExhausted) {\n                lastChildNotExhausted = treeWalker.lastChild() !== null;\n            }\n\n            var currentNode,\n                currentNodeValue,\n                previousNode;\n            while (characterCount > 0 && previousNode !== null) {\n                currentNode = treeWalker.currentNode;\n                currentNodeValue = currentNode.nodeValue;\n                if (currentNodeValue.length > characterCount) {\n                    previousNode = currentNode.splitText(currentNodeValue.length - characterCount);\n                    characterCount = 0;\n                } else {\n                    previousNode = treeWalker.previousNode();\n                    characterCount -= currentNodeValue.length;\n                }\n            }\n            return previousNode;\n        },\n\n        performLinkingWithinElement: function (element) {\n            var this$1 = this;\n\n            var matches = this.findLinkableText(element),\n                linkCreated = false;\n\n            for (var matchIndex = 0; matchIndex < matches.length; matchIndex++) {\n                var matchingTextNodes = MediumEditor.util.findOrCreateMatchingTextNodes(this$1.document, element,\n                        matches[matchIndex]);\n                if (this$1.shouldNotLink(matchingTextNodes)) {\n                    continue;\n                }\n                this$1.createAutoLink(matchingTextNodes, matches[matchIndex].href);\n            }\n            return linkCreated;\n        },\n\n        shouldNotLink: function (textNodes) {\n            var shouldNotLink = false;\n            for (var i = 0; i < textNodes.length && shouldNotLink === false; i++) {\n                // Do not link if the text node is either inside an anchor or inside span[data-auto-link]\n                shouldNotLink = !!MediumEditor.util.traverseUp(textNodes[i], function (node) {\n                    return node.nodeName.toLowerCase() === 'a' ||\n                        (node.getAttribute && node.getAttribute('data-auto-link') === 'true');\n                });\n            }\n            return shouldNotLink;\n        },\n\n        findLinkableText: function (contenteditable) {\n            var linkRegExp = new RegExp(LINK_REGEXP_TEXT, 'gi'),\n                textContent = contenteditable.textContent,\n                match = null,\n                matches = [];\n\n            while ((match = linkRegExp.exec(textContent)) !== null) {\n                var matchOk = true,\n                    matchEnd = match.index + match[0].length;\n                // If the regexp detected something as a link that has text immediately preceding/following it, bail out.\n                matchOk = (match.index === 0 || WHITESPACE_CHARS.indexOf(textContent[match.index - 1]) !== -1) &&\n                    (matchEnd === textContent.length || WHITESPACE_CHARS.indexOf(textContent[matchEnd]) !== -1);\n                // If the regexp detected a bare domain that doesn't use one of our expected TLDs, bail out.\n                matchOk = matchOk && (match[0].indexOf('/') !== -1 ||\n                    KNOWN_TLDS_REGEXP.test(match[0].split('.').pop().split('?').shift()));\n\n                if (matchOk) {\n                    matches.push({\n                        href: match[0],\n                        start: match.index,\n                        end: matchEnd\n                    });\n                }\n            }\n            return matches;\n        },\n\n        createAutoLink: function (textNodes, href) {\n            href = MediumEditor.util.ensureUrlHasProtocol(href);\n            var anchor = MediumEditor.util.createLink(this.document, textNodes, href, this.getEditorOption('targetBlank') ? '_blank' : null),\n                span = this.document.createElement('span');\n            span.setAttribute('data-auto-link', 'true');\n            span.setAttribute('data-href', href);\n            anchor.insertBefore(span, anchor.firstChild);\n            while (anchor.childNodes.length > 1) {\n                span.appendChild(anchor.childNodes[1]);\n            }\n        }\n\n    });\n\n    MediumEditor.extensions.autoLink = AutoLink;\n}());\n\n(function () {\n    'use strict';\n\n    var CLASS_DRAG_OVER = 'medium-editor-dragover';\n\n    function clearClassNames(element) {\n        var editable = MediumEditor.util.getContainerEditorElement(element),\n            existing = Array.prototype.slice.call(editable.parentElement.querySelectorAll('.' + CLASS_DRAG_OVER));\n\n        existing.forEach(function (el) {\n            el.classList.remove(CLASS_DRAG_OVER);\n        });\n    }\n\n    var FileDragging = MediumEditor.Extension.extend({\n        name: 'fileDragging',\n\n        allowedTypes: ['image'],\n\n        init: function () {\n            MediumEditor.Extension.prototype.init.apply(this, arguments);\n\n            this.subscribe('editableDrag', this.handleDrag.bind(this));\n            this.subscribe('editableDrop', this.handleDrop.bind(this));\n        },\n\n        handleDrag: function (event) {\n            event.preventDefault();\n            event.dataTransfer.dropEffect = 'copy';\n\n            var target = event.target.classList ? event.target : event.target.parentElement;\n\n            // Ensure the class gets removed from anything that had it before\n            clearClassNames(target);\n\n            if (event.type === 'dragover') {\n                target.classList.add(CLASS_DRAG_OVER);\n            }\n        },\n\n        handleDrop: function (event) {\n            // Prevent file from opening in the current window\n            event.preventDefault();\n            event.stopPropagation();\n            // Select the dropping target, and set the selection to the end of the target\n            // https://github.com/yabwe/medium-editor/issues/980\n            this.base.selectElement(event.target);\n            var selection = this.base.exportSelection();\n            selection.start = selection.end;\n            this.base.importSelection(selection);\n            // IE9 does not support the File API, so prevent file from opening in the window\n            // but also don't try to actually get the file\n            if (event.dataTransfer.files) {\n                Array.prototype.slice.call(event.dataTransfer.files).forEach(function (file) {\n                    if (this.isAllowedFile(file)) {\n                        if (file.type.match('image')) {\n                            this.insertImageFile(file);\n                        }\n                    }\n                }, this);\n            }\n\n            // Make sure we remove our class from everything\n            clearClassNames(event.target);\n        },\n\n        isAllowedFile: function (file) {\n            return this.allowedTypes.some(function (fileType) {\n                return !!file.type.match(fileType);\n            });\n        },\n\n        insertImageFile: function (file) {\n            if (typeof FileReader !== 'function') {\n                return;\n            }\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n\n            // attach the onload event handler, makes it easier to listen in with jasmine\n            fileReader.addEventListener('load', function (e) {\n                var addImageElement = this.document.createElement('img');\n                addImageElement.src = e.target.result;\n                MediumEditor.util.insertHTMLCommand(this.document, addImageElement.outerHTML);\n            }.bind(this));\n        }\n    });\n\n    MediumEditor.extensions.fileDragging = FileDragging;\n}());\n\n(function () {\n    'use strict';\n\n    var KeyboardCommands = MediumEditor.Extension.extend({\n        name: 'keyboard-commands',\n\n        /* KeyboardCommands Options */\n\n        /* commands: [Array]\n         * Array of objects describing each command and the combination of keys that will trigger it\n         * Required for each object:\n         *   command [String] (argument passed to editor.execAction())\n         *   key [String] (keyboard character that triggers this command)\n         *   meta [boolean] (whether the ctrl/meta key has to be active or inactive)\n         *   shift [boolean] (whether the shift key has to be active or inactive)\n         *   alt [boolean] (whether the alt key has to be active or inactive)\n         */\n        commands: [\n            {\n                command: 'bold',\n                key: 'B',\n                meta: true,\n                shift: false,\n                alt: false\n            },\n            {\n                command: 'italic',\n                key: 'I',\n                meta: true,\n                shift: false,\n                alt: false\n            },\n            {\n                command: 'underline',\n                key: 'U',\n                meta: true,\n                shift: false,\n                alt: false\n            }\n        ],\n\n        init: function () {\n            MediumEditor.Extension.prototype.init.apply(this, arguments);\n\n            this.subscribe('editableKeydown', this.handleKeydown.bind(this));\n            this.keys = {};\n            this.commands.forEach(function (command) {\n                var keyCode = command.key.charCodeAt(0);\n                if (!this.keys[keyCode]) {\n                    this.keys[keyCode] = [];\n                }\n                this.keys[keyCode].push(command);\n            }, this);\n        },\n\n        handleKeydown: function (event) {\n            var keyCode = MediumEditor.util.getKeyCode(event);\n            if (!this.keys[keyCode]) {\n                return;\n            }\n\n            var isMeta = MediumEditor.util.isMetaCtrlKey(event),\n                isShift = !!event.shiftKey,\n                isAlt = !!event.altKey;\n\n            this.keys[keyCode].forEach(function (data) {\n                if (data.meta === isMeta &&\n                    data.shift === isShift &&\n                    (data.alt === isAlt ||\n                     undefined === data.alt)) { // TODO deprecated: remove check for undefined === data.alt when jumping to 6.0.0\n                    event.preventDefault();\n                    event.stopPropagation();\n\n                    // command can be a function to execute\n                    if (typeof data.command === 'function') {\n                        data.command.apply(this);\n                    }\n                    // command can be false so the shortcut is just disabled\n                    else if (false !== data.command) {\n                        this.execAction(data.command);\n                    }\n                }\n            }, this);\n        }\n    });\n\n    MediumEditor.extensions.keyboardCommands = KeyboardCommands;\n}());\n\n(function () {\n    'use strict';\n\n    var FontNameForm = MediumEditor.extensions.form.extend({\n\n        name: 'fontname',\n        action: 'fontName',\n        aria: 'change font name',\n        contentDefault: '&#xB1;', // ±\n        contentFA: '<i class=\"fa fa-font\"></i>',\n\n        fonts: ['', 'Arial', 'Verdana', 'Times New Roman'],\n\n        init: function () {\n            MediumEditor.extensions.form.prototype.init.apply(this, arguments);\n        },\n\n        // Called when the button the toolbar is clicked\n        // Overrides ButtonExtension.handleClick\n        handleClick: function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            if (!this.isDisplayed()) {\n                // Get FontName of current selection (convert to string since IE returns this as number)\n                var fontName = this.document.queryCommandValue('fontName') + '';\n                this.showForm(fontName);\n            }\n\n            return false;\n        },\n\n        // Called by medium-editor to append form to the toolbar\n        getForm: function () {\n            if (!this.form) {\n                this.form = this.createForm();\n            }\n            return this.form;\n        },\n\n        // Used by medium-editor when the default toolbar is to be displayed\n        isDisplayed: function () {\n            return this.getForm().style.display === 'block';\n        },\n\n        hideForm: function () {\n            this.getForm().style.display = 'none';\n            this.getSelect().value = '';\n        },\n\n        showForm: function (fontName) {\n            var select = this.getSelect();\n\n            this.base.saveSelection();\n            this.hideToolbarDefaultActions();\n            this.getForm().style.display = 'block';\n            this.setToolbarPosition();\n\n            select.value = fontName || '';\n            select.focus();\n        },\n\n        // Called by core when tearing down medium-editor (destroy)\n        destroy: function () {\n            if (!this.form) {\n                return false;\n            }\n\n            if (this.form.parentNode) {\n                this.form.parentNode.removeChild(this.form);\n            }\n\n            delete this.form;\n        },\n\n        // core methods\n\n        doFormSave: function () {\n            this.base.restoreSelection();\n            this.base.checkSelection();\n        },\n\n        doFormCancel: function () {\n            this.base.restoreSelection();\n            this.clearFontName();\n            this.base.checkSelection();\n        },\n\n        // form creation and event handling\n        createForm: function () {\n            var this$1 = this;\n\n            var doc = this.document,\n                form = doc.createElement('div'),\n                select = doc.createElement('select'),\n                close = doc.createElement('a'),\n                save = doc.createElement('a'),\n                option;\n\n            // Font Name Form (div)\n            form.className = 'medium-editor-toolbar-form';\n            form.id = 'medium-editor-toolbar-form-fontname-' + this.getEditorId();\n\n            // Handle clicks on the form itself\n            this.on(form, 'click', this.handleFormClick.bind(this));\n\n            // Add font names\n            for (var i = 0; i<this.fonts.length; i++) {\n                option = doc.createElement('option');\n                option.innerHTML = this$1.fonts[i];\n                option.value = this$1.fonts[i];\n                select.appendChild(option);\n            }\n\n            select.className = 'medium-editor-toolbar-select';\n            form.appendChild(select);\n\n            // Handle typing in the textbox\n            this.on(select, 'change', this.handleFontChange.bind(this));\n\n            // Add save buton\n            save.setAttribute('href', '#');\n            save.className = 'medium-editor-toobar-save';\n            save.innerHTML = this.getEditorOption('buttonLabels') === 'fontawesome' ?\n                             '<i class=\"fa fa-check\"></i>' :\n                             '&#10003;';\n            form.appendChild(save);\n\n            // Handle save button clicks (capture)\n            this.on(save, 'click', this.handleSaveClick.bind(this), true);\n\n            // Add close button\n            close.setAttribute('href', '#');\n            close.className = 'medium-editor-toobar-close';\n            close.innerHTML = this.getEditorOption('buttonLabels') === 'fontawesome' ?\n                              '<i class=\"fa fa-times\"></i>' :\n                              '&times;';\n            form.appendChild(close);\n\n            // Handle close button clicks\n            this.on(close, 'click', this.handleCloseClick.bind(this));\n\n            return form;\n        },\n\n        getSelect: function () {\n            return this.getForm().querySelector('select.medium-editor-toolbar-select');\n        },\n\n        clearFontName: function () {\n            MediumEditor.selection.getSelectedElements(this.document).forEach(function (el) {\n                if (el.nodeName.toLowerCase() === 'font' && el.hasAttribute('face')) {\n                    el.removeAttribute('face');\n                }\n            });\n        },\n\n        handleFontChange: function () {\n            var font = this.getSelect().value;\n            if (font === '') {\n                this.clearFontName();\n            } else {\n                this.execAction('fontName', { value: font });\n            }\n        },\n\n        handleFormClick: function (event) {\n            // make sure not to hide form when clicking inside the form\n            event.stopPropagation();\n        },\n\n        handleSaveClick: function (event) {\n            // Clicking Save -> create the font size\n            event.preventDefault();\n            this.doFormSave();\n        },\n\n        handleCloseClick: function (event) {\n            // Click Close -> close the form\n            event.preventDefault();\n            this.doFormCancel();\n        }\n    });\n\n    MediumEditor.extensions.fontName = FontNameForm;\n}());\n\n(function () {\n    'use strict';\n\n    var FontSizeForm = MediumEditor.extensions.form.extend({\n\n        name: 'fontsize',\n        action: 'fontSize',\n        aria: 'increase/decrease font size',\n        contentDefault: '&#xB1;', // ±\n        contentFA: '<i class=\"fa fa-text-height\"></i>',\n\n        init: function () {\n            MediumEditor.extensions.form.prototype.init.apply(this, arguments);\n        },\n\n        // Called when the button the toolbar is clicked\n        // Overrides ButtonExtension.handleClick\n        handleClick: function (event) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            if (!this.isDisplayed()) {\n                // Get fontsize of current selection (convert to string since IE returns this as number)\n                var fontSize = this.document.queryCommandValue('fontSize') + '';\n                this.showForm(fontSize);\n            }\n\n            return false;\n        },\n\n        // Called by medium-editor to append form to the toolbar\n        getForm: function () {\n            if (!this.form) {\n                this.form = this.createForm();\n            }\n            return this.form;\n        },\n\n        // Used by medium-editor when the default toolbar is to be displayed\n        isDisplayed: function () {\n            return this.getForm().style.display === 'block';\n        },\n\n        hideForm: function () {\n            this.getForm().style.display = 'none';\n            this.getInput().value = '';\n        },\n\n        showForm: function (fontSize) {\n            var input = this.getInput();\n\n            this.base.saveSelection();\n            this.hideToolbarDefaultActions();\n            this.getForm().style.display = 'block';\n            this.setToolbarPosition();\n\n            input.value = fontSize || '';\n            input.focus();\n        },\n\n        // Called by core when tearing down medium-editor (destroy)\n        destroy: function () {\n            if (!this.form) {\n                return false;\n            }\n\n            if (this.form.parentNode) {\n                this.form.parentNode.removeChild(this.form);\n            }\n\n            delete this.form;\n        },\n\n        // core methods\n\n        doFormSave: function () {\n            this.base.restoreSelection();\n            this.base.checkSelection();\n        },\n\n        doFormCancel: function () {\n            this.base.restoreSelection();\n            this.clearFontSize();\n            this.base.checkSelection();\n        },\n\n        // form creation and event handling\n        createForm: function () {\n            var doc = this.document,\n                form = doc.createElement('div'),\n                input = doc.createElement('input'),\n                close = doc.createElement('a'),\n                save = doc.createElement('a');\n\n            // Font Size Form (div)\n            form.className = 'medium-editor-toolbar-form';\n            form.id = 'medium-editor-toolbar-form-fontsize-' + this.getEditorId();\n\n            // Handle clicks on the form itself\n            this.on(form, 'click', this.handleFormClick.bind(this));\n\n            // Add font size slider\n            input.setAttribute('type', 'range');\n            input.setAttribute('min', '1');\n            input.setAttribute('max', '7');\n            input.className = 'medium-editor-toolbar-input';\n            form.appendChild(input);\n\n            // Handle typing in the textbox\n            this.on(input, 'change', this.handleSliderChange.bind(this));\n\n            // Add save buton\n            save.setAttribute('href', '#');\n            save.className = 'medium-editor-toobar-save';\n            save.innerHTML = this.getEditorOption('buttonLabels') === 'fontawesome' ?\n                             '<i class=\"fa fa-check\"></i>' :\n                             '&#10003;';\n            form.appendChild(save);\n\n            // Handle save button clicks (capture)\n            this.on(save, 'click', this.handleSaveClick.bind(this), true);\n\n            // Add close button\n            close.setAttribute('href', '#');\n            close.className = 'medium-editor-toobar-close';\n            close.innerHTML = this.getEditorOption('buttonLabels') === 'fontawesome' ?\n                              '<i class=\"fa fa-times\"></i>' :\n                              '&times;';\n            form.appendChild(close);\n\n            // Handle close button clicks\n            this.on(close, 'click', this.handleCloseClick.bind(this));\n\n            return form;\n        },\n\n        getInput: function () {\n            return this.getForm().querySelector('input.medium-editor-toolbar-input');\n        },\n\n        clearFontSize: function () {\n            MediumEditor.selection.getSelectedElements(this.document).forEach(function (el) {\n                if (el.nodeName.toLowerCase() === 'font' && el.hasAttribute('size')) {\n                    el.removeAttribute('size');\n                }\n            });\n        },\n\n        handleSliderChange: function () {\n            var size = this.getInput().value;\n            if (size === '4') {\n                this.clearFontSize();\n            } else {\n                this.execAction('fontSize', { value: size });\n            }\n        },\n\n        handleFormClick: function (event) {\n            // make sure not to hide form when clicking inside the form\n            event.stopPropagation();\n        },\n\n        handleSaveClick: function (event) {\n            // Clicking Save -> create the font size\n            event.preventDefault();\n            this.doFormSave();\n        },\n\n        handleCloseClick: function (event) {\n            // Click Close -> close the form\n            event.preventDefault();\n            this.doFormCancel();\n        }\n    });\n\n    MediumEditor.extensions.fontSize = FontSizeForm;\n}());\n(function () {\n    'use strict';\n\n    /* Helpers and internal variables that don't need to be members of actual paste handler */\n\n    var pasteBinDefaultContent = '%ME_PASTEBIN%',\n        lastRange = null,\n        keyboardPasteEditable = null,\n        stopProp = function (event) {\n            event.stopPropagation();\n        };\n\n    /*jslint regexp: true*/\n    /*\n        jslint does not allow character negation, because the negation\n        will not match any unicode characters. In the regexes in this\n        block, negation is used specifically to match the end of an html\n        tag, and in fact unicode characters *should* be allowed.\n    */\n    function createReplacements() {\n        return [\n            // Remove anything but the contents within the BODY element\n            [new RegExp(/^[\\s\\S]*<body[^>]*>\\s*|\\s*<\\/body[^>]*>[\\s\\S]*$/g), ''],\n\n            // cleanup comments added by Chrome when pasting html\n            [new RegExp(/<!--StartFragment-->|<!--EndFragment-->/g), ''],\n\n            // Trailing BR elements\n            [new RegExp(/<br>$/i), ''],\n\n            // replace two bogus tags that begin pastes from google docs\n            [new RegExp(/<[^>]*docs-internal-guid[^>]*>/gi), ''],\n            [new RegExp(/<\\/b>(<br[^>]*>)?$/gi), ''],\n\n             // un-html spaces and newlines inserted by OS X\n            [new RegExp(/<span class=\"Apple-converted-space\">\\s+<\\/span>/g), ' '],\n            [new RegExp(/<br class=\"Apple-interchange-newline\">/g), '<br>'],\n\n            // replace google docs italics+bold with a span to be replaced once the html is inserted\n            [new RegExp(/<span[^>]*(font-style:italic;font-weight:(bold|700)|font-weight:(bold|700);font-style:italic)[^>]*>/gi), '<span class=\"replace-with italic bold\">'],\n\n            // replace google docs italics with a span to be replaced once the html is inserted\n            [new RegExp(/<span[^>]*font-style:italic[^>]*>/gi), '<span class=\"replace-with italic\">'],\n\n            //[replace google docs bolds with a span to be replaced once the html is inserted\n            [new RegExp(/<span[^>]*font-weight:(bold|700)[^>]*>/gi), '<span class=\"replace-with bold\">'],\n\n             // replace manually entered b/i/a tags with real ones\n            [new RegExp(/&lt;(\\/?)(i|b|a)&gt;/gi), '<$1$2>'],\n\n             // replace manually a tags with real ones, converting smart-quotes from google docs\n            [new RegExp(/&lt;a(?:(?!href).)+href=(?:&quot;|&rdquo;|&ldquo;|\"|“|”)(((?!&quot;|&rdquo;|&ldquo;|\"|“|”).)*)(?:&quot;|&rdquo;|&ldquo;|\"|“|”)(?:(?!&gt;).)*&gt;/gi), '<a href=\"$1\">'],\n\n            // Newlines between paragraphs in html have no syntactic value,\n            // but then have a tendency to accidentally become additional paragraphs down the line\n            [new RegExp(/<\\/p>\\n+/gi), '</p>'],\n            [new RegExp(/\\n+<p/gi), '<p'],\n\n            // Microsoft Word makes these odd tags, like <o:p></o:p>\n            [new RegExp(/<\\/?o:[a-z]*>/gi), ''],\n\n            // Microsoft Word adds some special elements around list items\n            [new RegExp(/<!\\[if !supportLists\\]>(((?!<!).)*)<!\\[endif]\\>/gi), '$1']\n        ];\n    }\n    /*jslint regexp: false*/\n\n    /**\n     * Gets various content types out of the Clipboard API. It will also get the\n     * plain text using older IE and WebKit API.\n     *\n     * @param {event} event Event fired on paste.\n     * @param {win} reference to window\n     * @param {doc} reference to document\n     * @return {Object} Object with mime types and data for those mime types.\n     */\n    function getClipboardContent(event, win, doc) {\n        var dataTransfer = event.clipboardData || win.clipboardData || doc.dataTransfer,\n            data = {};\n\n        if (!dataTransfer) {\n            return data;\n        }\n\n        // Use old WebKit/IE API\n        if (dataTransfer.getData) {\n            var legacyText = dataTransfer.getData('Text');\n            if (legacyText && legacyText.length > 0) {\n                data['text/plain'] = legacyText;\n            }\n        }\n\n        if (dataTransfer.types) {\n            for (var i = 0; i < dataTransfer.types.length; i++) {\n                var contentType = dataTransfer.types[i];\n                data[contentType] = dataTransfer.getData(contentType);\n            }\n        }\n\n        return data;\n    }\n\n    var PasteHandler = MediumEditor.Extension.extend({\n        /* Paste Options */\n\n        /* forcePlainText: [boolean]\n         * Forces pasting as plain text.\n         */\n        forcePlainText: true,\n\n        /* cleanPastedHTML: [boolean]\n         * cleans pasted content from different sources, like google docs etc.\n         */\n        cleanPastedHTML: false,\n\n        /* preCleanReplacements: [Array]\n         * custom pairs (2 element arrays) of RegExp and replacement text to use during past when\n         * __forcePlainText__ or __cleanPastedHTML__ are `true` OR when calling `cleanPaste(text)` helper method.\n         * These replacements are executed before any medium editor defined replacements.\n         */\n        preCleanReplacements: [],\n\n        /* cleanReplacements: [Array]\n         * custom pairs (2 element arrays) of RegExp and replacement text to use during paste when\n         * __forcePlainText__ or __cleanPastedHTML__ are `true` OR when calling `cleanPaste(text)` helper method.\n         * These replacements are executed after any medium editor defined replacements.\n         */\n        cleanReplacements: [],\n\n        /* cleanAttrs:: [Array]\n         * list of element attributes to remove during paste when __cleanPastedHTML__ is `true` or when\n         * calling `cleanPaste(text)` or `pasteHTML(html, options)` helper methods.\n         */\n        cleanAttrs: ['class', 'style', 'dir'],\n\n        /* cleanTags: [Array]\n         * list of element tag names to remove during paste when __cleanPastedHTML__ is `true` or when\n         * calling `cleanPaste(text)` or `pasteHTML(html, options)` helper methods.\n         */\n        cleanTags: ['meta'],\n\n        init: function () {\n            MediumEditor.Extension.prototype.init.apply(this, arguments);\n\n            if (this.forcePlainText || this.cleanPastedHTML) {\n                this.subscribe('editableKeydown', this.handleKeydown.bind(this));\n                // We need access to the full event data in paste\n                // so we can't use the editablePaste event here\n                this.getEditorElements().forEach(function (element) {\n                    this.on(element, 'paste', this.handlePaste.bind(this));\n                }, this);\n                this.subscribe('addElement', this.handleAddElement.bind(this));\n            }\n        },\n\n        handleAddElement: function (event, editable) {\n            this.on(editable, 'paste', this.handlePaste.bind(this));\n        },\n\n        destroy: function () {\n            // Make sure pastebin is destroyed in case it's still around for some reason\n            if (this.forcePlainText || this.cleanPastedHTML) {\n                this.removePasteBin();\n            }\n        },\n\n        handlePaste: function (event, editable) {\n            if (event.defaultPrevented) {\n                return;\n            }\n\n            var clipboardContent = getClipboardContent(event, this.window, this.document),\n                pastedHTML = clipboardContent['text/html'],\n                pastedPlain = clipboardContent['text/plain'];\n\n            if (this.window.clipboardData && event.clipboardData === undefined && !pastedHTML) {\n                // If window.clipboardData exists, but event.clipboardData doesn't exist,\n                // we're probably in IE. IE only has two possibilities for clipboard\n                // data format: 'Text' and 'URL'.\n                //\n                // For IE, we'll fallback to 'Text' for text/html\n                pastedHTML = pastedPlain;\n            }\n\n            if (pastedHTML || pastedPlain) {\n                event.preventDefault();\n\n                this.doPaste(pastedHTML, pastedPlain, editable);\n            }\n        },\n\n        doPaste: function (pastedHTML, pastedPlain, editable) {\n            var paragraphs,\n                html = '',\n                p;\n\n            if (this.cleanPastedHTML && pastedHTML) {\n                return this.cleanPaste(pastedHTML);\n            }\n\n            if (!(this.getEditorOption('disableReturn') || (editable && editable.getAttribute('data-disable-return')))) {\n                paragraphs = pastedPlain.split(/[\\r\\n]+/g);\n                // If there are no \\r\\n in data, don't wrap in <p>\n                if (paragraphs.length > 1) {\n                    for (p = 0; p < paragraphs.length; p += 1) {\n                        if (paragraphs[p] !== '') {\n                            html += '<p>' + MediumEditor.util.htmlEntities(paragraphs[p]) + '</p>';\n                        }\n                    }\n                } else {\n                    html = MediumEditor.util.htmlEntities(paragraphs[0]);\n                }\n            } else {\n                html = MediumEditor.util.htmlEntities(pastedPlain);\n            }\n            MediumEditor.util.insertHTMLCommand(this.document, html);\n        },\n\n        handlePasteBinPaste: function (event) {\n            if (event.defaultPrevented) {\n                this.removePasteBin();\n                return;\n            }\n\n            var clipboardContent = getClipboardContent(event, this.window, this.document),\n                pastedHTML = clipboardContent['text/html'],\n                pastedPlain = clipboardContent['text/plain'],\n                editable = keyboardPasteEditable;\n\n            // If we have valid html already, or we're not in cleanPastedHTML mode\n            // we can ignore the paste bin and just paste now\n            if (!this.cleanPastedHTML || pastedHTML) {\n                event.preventDefault();\n                this.removePasteBin();\n                this.doPaste(pastedHTML, pastedPlain, editable);\n\n                // The event handling code listens for paste on the editable element\n                // in order to trigger the editablePaste event.  Since this paste event\n                // is happening on the pastebin, the event handling code never knows about it\n                // So, we have to trigger editablePaste manually\n                this.trigger('editablePaste', { currentTarget: editable, target: editable }, editable);\n                return;\n            }\n\n            // We need to look at the paste bin, so do a setTimeout to let the paste\n            // fall through into the paste bin\n            setTimeout(function () {\n                // Only look for HTML if we're in cleanPastedHTML mode\n                if (this.cleanPastedHTML) {\n                    // If clipboard didn't have HTML, try the paste bin\n                    pastedHTML = this.getPasteBinHtml();\n                }\n\n                // If we needed the paste bin, we're done with it now, remove it\n                this.removePasteBin();\n\n                // Handle the paste with the html from the paste bin\n                this.doPaste(pastedHTML, pastedPlain, editable);\n\n                // The event handling code listens for paste on the editable element\n                // in order to trigger the editablePaste event.  Since this paste event\n                // is happening on the pastebin, the event handling code never knows about it\n                // So, we have to trigger editablePaste manually\n                this.trigger('editablePaste', { currentTarget: editable, target: editable }, editable);\n            }.bind(this), 0);\n        },\n\n        handleKeydown: function (event, editable) {\n            // if it's not Ctrl+V, do nothing\n            if (!(MediumEditor.util.isKey(event, MediumEditor.util.keyCode.V) && MediumEditor.util.isMetaCtrlKey(event))) {\n                return;\n            }\n\n            event.stopImmediatePropagation();\n\n            this.removePasteBin();\n            this.createPasteBin(editable);\n        },\n\n        createPasteBin: function (editable) {\n            var rects,\n                range = MediumEditor.selection.getSelectionRange(this.document),\n                top = this.window.pageYOffset;\n\n            keyboardPasteEditable = editable;\n\n            if (range) {\n                rects = range.getClientRects();\n\n                // on empty line, rects is empty so we grab information from the first container of the range\n                if (rects.length) {\n                    top += rects[0].top;\n                } else {\n                    top += range.startContainer.getBoundingClientRect().top;\n                }\n            }\n\n            lastRange = range;\n\n            var pasteBinElm = this.document.createElement('div');\n            pasteBinElm.id = this.pasteBinId = 'medium-editor-pastebin-' + (+Date.now());\n            pasteBinElm.setAttribute('style', 'border: 1px red solid; position: absolute; top: ' + top + 'px; width: 10px; height: 10px; overflow: hidden; opacity: 0');\n            pasteBinElm.setAttribute('contentEditable', true);\n            pasteBinElm.innerHTML = pasteBinDefaultContent;\n\n            this.document.body.appendChild(pasteBinElm);\n\n            // avoid .focus() to stop other event (actually the paste event)\n            this.on(pasteBinElm, 'focus', stopProp);\n            this.on(pasteBinElm, 'focusin', stopProp);\n            this.on(pasteBinElm, 'focusout', stopProp);\n\n            pasteBinElm.focus();\n\n            MediumEditor.selection.selectNode(pasteBinElm, this.document);\n\n            if (!this.boundHandlePaste) {\n                this.boundHandlePaste = this.handlePasteBinPaste.bind(this);\n            }\n\n            this.on(pasteBinElm, 'paste', this.boundHandlePaste);\n        },\n\n        removePasteBin: function () {\n            if (null !== lastRange) {\n                MediumEditor.selection.selectRange(this.document, lastRange);\n                lastRange = null;\n            }\n\n            if (null !== keyboardPasteEditable) {\n                keyboardPasteEditable = null;\n            }\n\n            var pasteBinElm = this.getPasteBin();\n            if (!pasteBinElm) {\n                return;\n            }\n\n            if (pasteBinElm) {\n                this.off(pasteBinElm, 'focus', stopProp);\n                this.off(pasteBinElm, 'focusin', stopProp);\n                this.off(pasteBinElm, 'focusout', stopProp);\n                this.off(pasteBinElm, 'paste', this.boundHandlePaste);\n                pasteBinElm.parentElement.removeChild(pasteBinElm);\n            }\n        },\n\n        getPasteBin: function () {\n            return this.document.getElementById(this.pasteBinId);\n        },\n\n        getPasteBinHtml: function () {\n            var pasteBinElm = this.getPasteBin();\n\n            if (!pasteBinElm) {\n                return false;\n            }\n\n            // WebKit has a nice bug where it clones the paste bin if you paste from for example notepad\n            // so we need to force plain text mode in this case\n            if (pasteBinElm.firstChild && pasteBinElm.firstChild.id === 'mcepastebin') {\n                return false;\n            }\n\n            var pasteBinHtml = pasteBinElm.innerHTML;\n\n            // If paste bin is empty try using plain text mode\n            // since that is better than nothing right\n            if (!pasteBinHtml || pasteBinHtml === pasteBinDefaultContent) {\n                return false;\n            }\n\n            return pasteBinHtml;\n        },\n\n        cleanPaste: function (text) {\n            var this$1 = this;\n\n            var i, elList, tmp, workEl,\n                multiline = /<p|<br|<div/.test(text),\n                replacements = [].concat(\n                    this.preCleanReplacements || [],\n                    createReplacements(),\n                    this.cleanReplacements || []);\n\n            for (i = 0; i < replacements.length; i += 1) {\n                text = text.replace(replacements[i][0], replacements[i][1]);\n            }\n\n            if (!multiline) {\n                return this.pasteHTML(text);\n            }\n\n            // create a temporary div to cleanup block elements\n            tmp = this.document.createElement('div');\n\n            // double br's aren't converted to p tags, but we want paragraphs.\n            tmp.innerHTML = '<p>' + text.split('<br><br>').join('</p><p>') + '</p>';\n\n            // block element cleanup\n            elList = tmp.querySelectorAll('a,p,div,br');\n            for (i = 0; i < elList.length; i += 1) {\n                workEl = elList[i];\n\n                // Microsoft Word replaces some spaces with newlines.\n                // While newlines between block elements are meaningless, newlines within\n                // elements are sometimes actually spaces.\n                workEl.innerHTML = workEl.innerHTML.replace(/\\n/gi, ' ');\n\n                switch (workEl.nodeName.toLowerCase()) {\n                    case 'p':\n                    case 'div':\n                        this$1.filterCommonBlocks(workEl);\n                        break;\n                    case 'br':\n                        this$1.filterLineBreak(workEl);\n                        break;\n                }\n            }\n\n            this.pasteHTML(tmp.innerHTML);\n        },\n\n        pasteHTML: function (html, options) {\n            var this$1 = this;\n\n            options = MediumEditor.util.defaults({}, options, {\n                cleanAttrs: this.cleanAttrs,\n                cleanTags: this.cleanTags\n            });\n\n            var elList, workEl, i, fragmentBody, pasteBlock = this.document.createDocumentFragment();\n\n            pasteBlock.appendChild(this.document.createElement('body'));\n\n            fragmentBody = pasteBlock.querySelector('body');\n            fragmentBody.innerHTML = html;\n\n            this.cleanupSpans(fragmentBody);\n\n            elList = fragmentBody.querySelectorAll('*');\n            for (i = 0; i < elList.length; i += 1) {\n                workEl = elList[i];\n\n                if ('a' === workEl.nodeName.toLowerCase() && this$1.getEditorOption('targetBlank')) {\n                    MediumEditor.util.setTargetBlank(workEl);\n                }\n\n                MediumEditor.util.cleanupAttrs(workEl, options.cleanAttrs);\n                MediumEditor.util.cleanupTags(workEl, options.cleanTags);\n            }\n\n            MediumEditor.util.insertHTMLCommand(this.document, fragmentBody.innerHTML.replace(/&nbsp;/g, ' '));\n        },\n\n        // TODO (6.0): Make this an internal helper instead of member of paste handler\n        isCommonBlock: function (el) {\n            return (el && (el.nodeName.toLowerCase() === 'p' || el.nodeName.toLowerCase() === 'div'));\n        },\n\n        // TODO (6.0): Make this an internal helper instead of member of paste handler\n        filterCommonBlocks: function (el) {\n            if (/^\\s*$/.test(el.textContent) && el.parentNode) {\n                el.parentNode.removeChild(el);\n            }\n        },\n\n        // TODO (6.0): Make this an internal helper instead of member of paste handler\n        filterLineBreak: function (el) {\n            if (this.isCommonBlock(el.previousElementSibling)) {\n                // remove stray br's following common block elements\n                this.removeWithParent(el);\n            } else if (this.isCommonBlock(el.parentNode) && (el.parentNode.firstChild === el || el.parentNode.lastChild === el)) {\n                // remove br's just inside open or close tags of a div/p\n                this.removeWithParent(el);\n            } else if (el.parentNode && el.parentNode.childElementCount === 1 && el.parentNode.textContent === '') {\n                // and br's that are the only child of elements other than div/p\n                this.removeWithParent(el);\n            }\n        },\n\n        // TODO (6.0): Make this an internal helper instead of member of paste handler\n        // remove an element, including its parent, if it is the only element within its parent\n        removeWithParent: function (el) {\n            if (el && el.parentNode) {\n                if (el.parentNode.parentNode && el.parentNode.childElementCount === 1) {\n                    el.parentNode.parentNode.removeChild(el.parentNode);\n                } else {\n                    el.parentNode.removeChild(el);\n                }\n            }\n        },\n\n        // TODO (6.0): Make this an internal helper instead of member of paste handler\n        cleanupSpans: function (containerEl) {\n            var this$1 = this;\n\n            var i,\n                el,\n                newEl,\n                spans = containerEl.querySelectorAll('.replace-with'),\n                isCEF = function (el) {\n                    return (el && el.nodeName !== '#text' && el.getAttribute('contenteditable') === 'false');\n                };\n\n            for (i = 0; i < spans.length; i += 1) {\n                el = spans[i];\n                newEl = this$1.document.createElement(el.classList.contains('bold') ? 'b' : 'i');\n\n                if (el.classList.contains('bold') && el.classList.contains('italic')) {\n                    // add an i tag as well if this has both italics and bold\n                    newEl.innerHTML = '<i>' + el.innerHTML + '</i>';\n                } else {\n                    newEl.innerHTML = el.innerHTML;\n                }\n                el.parentNode.replaceChild(newEl, el);\n            }\n\n            spans = containerEl.querySelectorAll('span');\n            for (i = 0; i < spans.length; i += 1) {\n                el = spans[i];\n\n                // bail if span is in contenteditable = false\n                if (MediumEditor.util.traverseUp(el, isCEF)) {\n                    return false;\n                }\n\n                // remove empty spans, replace others with their contents\n                MediumEditor.util.unwrap(el, this$1.document);\n            }\n        }\n    });\n\n    MediumEditor.extensions.paste = PasteHandler;\n}());\n\n(function () {\n    'use strict';\n\n    var Placeholder = MediumEditor.Extension.extend({\n        name: 'placeholder',\n\n        /* Placeholder Options */\n\n        /* text: [string]\n         * Text to display in the placeholder\n         */\n        text: 'Type your text',\n\n        /* hideOnClick: [boolean]\n         * Should we hide the placeholder on click (true) or when user starts typing (false)\n         */\n        hideOnClick: true,\n\n        init: function () {\n            MediumEditor.Extension.prototype.init.apply(this, arguments);\n\n            this.initPlaceholders();\n            this.attachEventHandlers();\n        },\n\n        initPlaceholders: function () {\n            this.getEditorElements().forEach(this.initElement, this);\n        },\n\n        handleAddElement: function (event, editable) {\n            this.initElement(editable);\n        },\n\n        initElement: function (el) {\n            if (!el.getAttribute('data-placeholder')) {\n                el.setAttribute('data-placeholder', this.text);\n            }\n            this.updatePlaceholder(el);\n        },\n\n        destroy: function () {\n            this.getEditorElements().forEach(this.cleanupElement, this);\n        },\n\n        handleRemoveElement: function (event, editable) {\n            this.cleanupElement(editable);\n        },\n\n        cleanupElement: function (el) {\n            if (el.getAttribute('data-placeholder') === this.text) {\n                el.removeAttribute('data-placeholder');\n            }\n        },\n\n        showPlaceholder: function (el) {\n            if (el) {\n                // https://github.com/yabwe/medium-editor/issues/234\n                // In firefox, styling the placeholder with an absolutely positioned\n                // pseudo element causes the cursor to appear in a bad location\n                // when the element is completely empty, so apply a different class to\n                // style it with a relatively positioned pseudo element\n                if (MediumEditor.util.isFF && el.childNodes.length === 0) {\n                    el.classList.add('medium-editor-placeholder-relative');\n                    el.classList.remove('medium-editor-placeholder');\n                } else {\n                    el.classList.add('medium-editor-placeholder');\n                    el.classList.remove('medium-editor-placeholder-relative');\n                }\n            }\n        },\n\n        hidePlaceholder: function (el) {\n            if (el) {\n                el.classList.remove('medium-editor-placeholder');\n                el.classList.remove('medium-editor-placeholder-relative');\n            }\n        },\n\n        updatePlaceholder: function (el, dontShow) {\n            // If the element has content, hide the placeholder\n            if (el.querySelector('img, blockquote, ul, ol, table') || (el.textContent.replace(/^\\s+|\\s+$/g, '') !== '')) {\n                return this.hidePlaceholder(el);\n            }\n\n            if (!dontShow) {\n                this.showPlaceholder(el);\n            }\n        },\n\n        attachEventHandlers: function () {\n            if (this.hideOnClick) {\n                // For the 'hideOnClick' option, the placeholder should always be hidden on focus\n                this.subscribe('focus', this.handleFocus.bind(this));\n            }\n\n            // If the editor has content, it should always hide the placeholder\n            this.subscribe('editableInput', this.handleInput.bind(this));\n\n            // When the editor loses focus, check if the placeholder should be visible\n            this.subscribe('blur', this.handleBlur.bind(this));\n\n            // Need to know when elements are added/removed from the editor\n            this.subscribe('addElement', this.handleAddElement.bind(this));\n            this.subscribe('removeElement', this.handleRemoveElement.bind(this));\n        },\n\n        handleInput: function (event, element) {\n            // If the placeholder should be hidden on focus and the\n            // element has focus, don't show the placeholder\n            var dontShow = this.hideOnClick && (element === this.base.getFocusedElement());\n\n            // Editor's content has changed, check if the placeholder should be hidden\n            this.updatePlaceholder(element, dontShow);\n        },\n\n        handleFocus: function (event, element) {\n            // Editor has focus, hide the placeholder\n            this.hidePlaceholder(element);\n        },\n\n        handleBlur: function (event, element) {\n            // Editor has lost focus, check if the placeholder should be shown\n            this.updatePlaceholder(element);\n        }\n    });\n\n    MediumEditor.extensions.placeholder = Placeholder;\n}());\n\n(function () {\n    'use strict';\n\n    var Toolbar = MediumEditor.Extension.extend({\n        name: 'toolbar',\n\n        /* Toolbar Options */\n\n        /* align: ['left'|'center'|'right']\n         * When the __static__ option is true, this aligns the static toolbar\n         * relative to the medium-editor element.\n         */\n        align: 'center',\n\n        /* allowMultiParagraphSelection: [boolean]\n         * enables/disables whether the toolbar should be displayed when\n         * selecting multiple paragraphs/block elements\n         */\n        allowMultiParagraphSelection: true,\n\n        /* buttons: [Array]\n         * the names of the set of buttons to display on the toolbar.\n         */\n        buttons: ['bold', 'italic', 'underline', 'anchor', 'h2', 'h3', 'quote'],\n\n        /* diffLeft: [Number]\n         * value in pixels to be added to the X axis positioning of the toolbar.\n         */\n        diffLeft: 0,\n\n        /* diffTop: [Number]\n         * value in pixels to be added to the Y axis positioning of the toolbar.\n         */\n        diffTop: -10,\n\n        /* firstButtonClass: [string]\n         * CSS class added to the first button in the toolbar.\n         */\n        firstButtonClass: 'medium-editor-button-first',\n\n        /* lastButtonClass: [string]\n         * CSS class added to the last button in the toolbar.\n         */\n        lastButtonClass: 'medium-editor-button-last',\n\n        /* standardizeSelectionStart: [boolean]\n         * enables/disables standardizing how the beginning of a range is decided\n         * between browsers whenever the selected text is analyzed for updating toolbar buttons status.\n         */\n        standardizeSelectionStart: false,\n\n        /* static: [boolean]\n         * enable/disable the toolbar always displaying in the same location\n         * relative to the medium-editor element.\n         */\n        static: false,\n\n        /* sticky: [boolean]\n         * When the __static__ option is true, this enables/disables the toolbar\n         * \"sticking\" to the viewport and staying visible on the screen while\n         * the page scrolls.\n         */\n        sticky: false,\n\n        /* stickyTopOffset: [Number]\n         * Value in pixel of the top offset above the toolbar\n         */\n        stickyTopOffset: 0,\n\n        /* updateOnEmptySelection: [boolean]\n         * When the __static__ option is true, this enables/disables updating\n         * the state of the toolbar buttons even when the selection is collapsed\n         * (there is no selection, just a cursor).\n         */\n        updateOnEmptySelection: false,\n\n        /* relativeContainer: [node]\n         * appending the toolbar to a given node instead of body\n         */\n        relativeContainer: null,\n\n        init: function () {\n            MediumEditor.Extension.prototype.init.apply(this, arguments);\n\n            this.initThrottledMethods();\n\n            if (!this.relativeContainer) {\n                this.getEditorOption('elementsContainer').appendChild(this.getToolbarElement());\n            } else {\n                this.relativeContainer.appendChild(this.getToolbarElement());\n            }\n        },\n\n        // Helper method to execute method for every extension, but ignoring the toolbar extension\n        forEachExtension: function (iterator, context) {\n            return this.base.extensions.forEach(function (command) {\n                if (command === this) {\n                    return;\n                }\n                return iterator.apply(context || this, arguments);\n            }, this);\n        },\n\n        // Toolbar creation/deletion\n\n        createToolbar: function () {\n            var toolbar = this.document.createElement('div');\n\n            toolbar.id = 'medium-editor-toolbar-' + this.getEditorId();\n            toolbar.className = 'medium-editor-toolbar';\n\n            if (this.static) {\n                toolbar.className += ' static-toolbar';\n            } else if (this.relativeContainer) {\n                toolbar.className += ' medium-editor-relative-toolbar';\n            } else {\n                toolbar.className += ' medium-editor-stalker-toolbar';\n            }\n\n            toolbar.appendChild(this.createToolbarButtons());\n\n            // Add any forms that extensions may have\n            this.forEachExtension(function (extension) {\n                if (extension.hasForm) {\n                    toolbar.appendChild(extension.getForm());\n                }\n            });\n\n            this.attachEventHandlers();\n\n            return toolbar;\n        },\n\n        createToolbarButtons: function () {\n            var ul = this.document.createElement('ul'),\n                li,\n                btn,\n                buttons,\n                extension,\n                buttonName,\n                buttonOpts;\n\n            ul.id = 'medium-editor-toolbar-actions' + this.getEditorId();\n            ul.className = 'medium-editor-toolbar-actions';\n            ul.style.display = 'block';\n\n            this.buttons.forEach(function (button) {\n                if (typeof button === 'string') {\n                    buttonName = button;\n                    buttonOpts = null;\n                } else {\n                    buttonName = button.name;\n                    buttonOpts = button;\n                }\n\n                // If the button already exists as an extension, it'll be returned\n                // othwerise it'll create the default built-in button\n                extension = this.base.addBuiltInExtension(buttonName, buttonOpts);\n\n                if (extension && typeof extension.getButton === 'function') {\n                    btn = extension.getButton(this.base);\n                    li = this.document.createElement('li');\n                    if (MediumEditor.util.isElement(btn)) {\n                        li.appendChild(btn);\n                    } else {\n                        li.innerHTML = btn;\n                    }\n                    ul.appendChild(li);\n                }\n            }, this);\n\n            buttons = ul.querySelectorAll('button');\n            if (buttons.length > 0) {\n                buttons[0].classList.add(this.firstButtonClass);\n                buttons[buttons.length - 1].classList.add(this.lastButtonClass);\n            }\n\n            return ul;\n        },\n\n        destroy: function () {\n            if (this.toolbar) {\n                if (this.toolbar.parentNode) {\n                    this.toolbar.parentNode.removeChild(this.toolbar);\n                }\n                delete this.toolbar;\n            }\n        },\n\n        // Toolbar accessors\n\n        getInteractionElements: function () {\n            return this.getToolbarElement();\n        },\n\n        getToolbarElement: function () {\n            if (!this.toolbar) {\n                this.toolbar = this.createToolbar();\n            }\n\n            return this.toolbar;\n        },\n\n        getToolbarActionsElement: function () {\n            return this.getToolbarElement().querySelector('.medium-editor-toolbar-actions');\n        },\n\n        // Toolbar event handlers\n\n        initThrottledMethods: function () {\n            // throttledPositionToolbar is throttled because:\n            // - It will be called when the browser is resizing, which can fire many times very quickly\n            // - For some event (like resize) a slight lag in UI responsiveness is OK and provides performance benefits\n            this.throttledPositionToolbar = MediumEditor.util.throttle(function () {\n                if (this.base.isActive) {\n                    this.positionToolbarIfShown();\n                }\n            }.bind(this));\n        },\n\n        attachEventHandlers: function () {\n            // MediumEditor custom events for when user beings and ends interaction with a contenteditable and its elements\n            this.subscribe('blur', this.handleBlur.bind(this));\n            this.subscribe('focus', this.handleFocus.bind(this));\n\n            // Updating the state of the toolbar as things change\n            this.subscribe('editableClick', this.handleEditableClick.bind(this));\n            this.subscribe('editableKeyup', this.handleEditableKeyup.bind(this));\n\n            // Handle mouseup on document for updating the selection in the toolbar\n            this.on(this.document.documentElement, 'mouseup', this.handleDocumentMouseup.bind(this));\n\n            // Add a scroll event for sticky toolbar\n            if (this.static && this.sticky) {\n                // On scroll (capture), re-position the toolbar\n                this.on(this.window, 'scroll', this.handleWindowScroll.bind(this), true);\n            }\n\n            // On resize, re-position the toolbar\n            this.on(this.window, 'resize', this.handleWindowResize.bind(this));\n        },\n\n        handleWindowScroll: function () {\n            this.positionToolbarIfShown();\n        },\n\n        handleWindowResize: function () {\n            this.throttledPositionToolbar();\n        },\n\n        handleDocumentMouseup: function (event) {\n            // Do not trigger checkState when mouseup fires over the toolbar\n            if (event &&\n                    event.target &&\n                    MediumEditor.util.isDescendant(this.getToolbarElement(), event.target)) {\n                return false;\n            }\n            this.checkState();\n        },\n\n        handleEditableClick: function () {\n            // Delay the call to checkState to handle bug where selection is empty\n            // immediately after clicking inside a pre-existing selection\n            setTimeout(function () {\n                this.checkState();\n            }.bind(this), 0);\n        },\n\n        handleEditableKeyup: function () {\n            this.checkState();\n        },\n\n        handleBlur: function () {\n            // Kill any previously delayed calls to hide the toolbar\n            clearTimeout(this.hideTimeout);\n\n            // Blur may fire even if we have a selection, so we want to prevent any delayed showToolbar\n            // calls from happening in this specific case\n            clearTimeout(this.delayShowTimeout);\n\n            // Delay the call to hideToolbar to handle bug with multiple editors on the page at once\n            this.hideTimeout = setTimeout(function () {\n                this.hideToolbar();\n            }.bind(this), 1);\n        },\n\n        handleFocus: function () {\n            this.checkState();\n        },\n\n        // Hiding/showing toolbar\n\n        isDisplayed: function () {\n            return this.getToolbarElement().classList.contains('medium-editor-toolbar-active');\n        },\n\n        showToolbar: function () {\n            clearTimeout(this.hideTimeout);\n            if (!this.isDisplayed()) {\n                this.getToolbarElement().classList.add('medium-editor-toolbar-active');\n                this.trigger('showToolbar', {}, this.base.getFocusedElement());\n            }\n        },\n\n        hideToolbar: function () {\n            if (this.isDisplayed()) {\n                this.getToolbarElement().classList.remove('medium-editor-toolbar-active');\n                this.trigger('hideToolbar', {}, this.base.getFocusedElement());\n            }\n        },\n\n        isToolbarDefaultActionsDisplayed: function () {\n            return this.getToolbarActionsElement().style.display === 'block';\n        },\n\n        hideToolbarDefaultActions: function () {\n            if (this.isToolbarDefaultActionsDisplayed()) {\n                this.getToolbarActionsElement().style.display = 'none';\n            }\n        },\n\n        showToolbarDefaultActions: function () {\n            this.hideExtensionForms();\n\n            if (!this.isToolbarDefaultActionsDisplayed()) {\n                this.getToolbarActionsElement().style.display = 'block';\n            }\n\n            // Using setTimeout + options.delay because:\n            // We will actually be displaying the toolbar, which should be controlled by options.delay\n            this.delayShowTimeout = this.base.delay(function () {\n                this.showToolbar();\n            }.bind(this));\n        },\n\n        hideExtensionForms: function () {\n            // Hide all extension forms\n            this.forEachExtension(function (extension) {\n                if (extension.hasForm && extension.isDisplayed()) {\n                    extension.hideForm();\n                }\n            });\n        },\n\n        // Responding to changes in user selection\n\n        // Checks for existance of multiple block elements in the current selection\n        multipleBlockElementsSelected: function () {\n            var regexEmptyHTMLTags = /<[^\\/>][^>]*><\\/[^>]+>/gim, // http://stackoverflow.com/questions/3129738/remove-empty-tags-using-regex\n                regexBlockElements = new RegExp('<(' + MediumEditor.util.blockContainerElementNames.join('|') + ')[^>]*>', 'g'),\n                selectionHTML = MediumEditor.selection.getSelectionHtml(this.document).replace(regexEmptyHTMLTags, ''), // Filter out empty blocks from selection\n                hasMultiParagraphs = selectionHTML.match(regexBlockElements); // Find how many block elements are within the html\n\n            return !!hasMultiParagraphs && hasMultiParagraphs.length > 1;\n        },\n\n        modifySelection: function () {\n            var selection = this.window.getSelection(),\n                selectionRange = selection.getRangeAt(0);\n\n            /*\n            * In firefox, there are cases (ie doubleclick of a word) where the selectionRange start\n            * will be at the very end of an element.  In other browsers, the selectionRange start\n            * would instead be at the very beginning of an element that actually has content.\n            * example:\n            *   <span>foo</span><span>bar</span>\n            *\n            * If the text 'bar' is selected, most browsers will have the selectionRange start at the beginning\n            * of the 'bar' span.  However, there are cases where firefox will have the selectionRange start\n            * at the end of the 'foo' span.  The contenteditable behavior will be ok, but if there are any\n            * properties on the 'bar' span, they won't be reflected accurately in the toolbar\n            * (ie 'Bold' button wouldn't be active)\n            *\n            * So, for cases where the selectionRange start is at the end of an element/node, find the next\n            * adjacent text node that actually has content in it, and move the selectionRange start there.\n            */\n            if (this.standardizeSelectionStart &&\n                    selectionRange.startContainer.nodeValue &&\n                    (selectionRange.startOffset === selectionRange.startContainer.nodeValue.length)) {\n                var adjacentNode = MediumEditor.util.findAdjacentTextNodeWithContent(MediumEditor.selection.getSelectionElement(this.window), selectionRange.startContainer, this.document);\n                if (adjacentNode) {\n                    var offset = 0;\n                    while (adjacentNode.nodeValue.substr(offset, 1).trim().length === 0) {\n                        offset = offset + 1;\n                    }\n                    selectionRange = MediumEditor.selection.select(this.document, adjacentNode, offset,\n                        selectionRange.endContainer, selectionRange.endOffset);\n                }\n            }\n        },\n\n        checkState: function () {\n            if (this.base.preventSelectionUpdates) {\n                return;\n            }\n\n            // If no editable has focus OR selection is inside contenteditable = false\n            // hide toolbar\n            if (!this.base.getFocusedElement() ||\n                    MediumEditor.selection.selectionInContentEditableFalse(this.window)) {\n                return this.hideToolbar();\n            }\n\n            // If there's no selection element, selection element doesn't belong to this editor\n            // or toolbar is disabled for this selection element\n            // hide toolbar\n            var selectionElement = MediumEditor.selection.getSelectionElement(this.window);\n            if (!selectionElement ||\n                    this.getEditorElements().indexOf(selectionElement) === -1 ||\n                    selectionElement.getAttribute('data-disable-toolbar')) {\n                return this.hideToolbar();\n            }\n\n            // Now we know there's a focused editable with a selection\n\n            // If the updateOnEmptySelection option is true, show the toolbar\n            if (this.updateOnEmptySelection && this.static) {\n                return this.showAndUpdateToolbar();\n            }\n\n            // If we don't have a 'valid' selection -> hide toolbar\n            if (!MediumEditor.selection.selectionContainsContent(this.document) ||\n                (this.allowMultiParagraphSelection === false && this.multipleBlockElementsSelected())) {\n                return this.hideToolbar();\n            }\n\n            this.showAndUpdateToolbar();\n        },\n\n        // Updating the toolbar\n\n        showAndUpdateToolbar: function () {\n            this.modifySelection();\n            this.setToolbarButtonStates();\n            this.trigger('positionToolbar', {}, this.base.getFocusedElement());\n            this.showToolbarDefaultActions();\n            this.setToolbarPosition();\n        },\n\n        setToolbarButtonStates: function () {\n            this.forEachExtension(function (extension) {\n                if (typeof extension.isActive === 'function' &&\n                    typeof extension.setInactive === 'function') {\n                    extension.setInactive();\n                }\n            });\n\n            this.checkActiveButtons();\n        },\n\n        checkActiveButtons: function () {\n            var manualStateChecks = [],\n                queryState = null,\n                selectionRange = MediumEditor.selection.getSelectionRange(this.document),\n                parentNode,\n                updateExtensionState = function (extension) {\n                    if (typeof extension.checkState === 'function') {\n                        extension.checkState(parentNode);\n                    } else if (typeof extension.isActive === 'function' &&\n                               typeof extension.isAlreadyApplied === 'function' &&\n                               typeof extension.setActive === 'function') {\n                        if (!extension.isActive() && extension.isAlreadyApplied(parentNode)) {\n                            extension.setActive();\n                        }\n                    }\n                };\n\n            if (!selectionRange) {\n                return;\n            }\n\n            // Loop through all extensions\n            this.forEachExtension(function (extension) {\n                // For those extensions where we can use document.queryCommandState(), do so\n                if (typeof extension.queryCommandState === 'function') {\n                    queryState = extension.queryCommandState();\n                    // If queryCommandState returns a valid value, we can trust the browser\n                    // and don't need to do our manual checks\n                    if (queryState !== null) {\n                        if (queryState && typeof extension.setActive === 'function') {\n                            extension.setActive();\n                        }\n                        return;\n                    }\n                }\n                // We can't use queryCommandState for this extension, so add to manualStateChecks\n                manualStateChecks.push(extension);\n            });\n\n            parentNode = MediumEditor.selection.getSelectedParentElement(selectionRange);\n\n            // Make sure the selection parent isn't outside of the contenteditable\n            if (!this.getEditorElements().some(function (element) {\n                    return MediumEditor.util.isDescendant(element, parentNode, true);\n                })) {\n                return;\n            }\n\n            // Climb up the DOM and do manual checks for whether a certain extension is currently enabled for this node\n            while (parentNode) {\n                manualStateChecks.forEach(updateExtensionState);\n\n                // we can abort the search upwards if we leave the contentEditable element\n                if (MediumEditor.util.isMediumEditorElement(parentNode)) {\n                    break;\n                }\n                parentNode = parentNode.parentNode;\n            }\n        },\n\n        // Positioning toolbar\n\n        positionToolbarIfShown: function () {\n            if (this.isDisplayed()) {\n                this.setToolbarPosition();\n            }\n        },\n\n        setToolbarPosition: function () {\n            var container = this.base.getFocusedElement(),\n                selection = this.window.getSelection();\n\n            // If there isn't a valid selection, bail\n            if (!container) {\n                return this;\n            }\n\n            if (this.static || !selection.isCollapsed) {\n                this.showToolbar();\n\n                // we don't need any absolute positioning if relativeContainer is set\n                if (!this.relativeContainer) {\n                    if (this.static) {\n                        this.positionStaticToolbar(container);\n                    } else {\n                        this.positionToolbar(selection);\n                    }\n                }\n\n                this.trigger('positionedToolbar', {}, this.base.getFocusedElement());\n            }\n        },\n\n        positionStaticToolbar: function (container) {\n            // position the toolbar at left 0, so we can get the real width of the toolbar\n            this.getToolbarElement().style.left = '0';\n\n            // document.documentElement for IE 9\n            var scrollTop = (this.document.documentElement && this.document.documentElement.scrollTop) || this.document.body.scrollTop,\n                windowWidth = this.window.innerWidth,\n                toolbarElement = this.getToolbarElement(),\n                containerRect = container.getBoundingClientRect(),\n                containerTop = containerRect.top + scrollTop,\n                containerCenter = (containerRect.left + (containerRect.width / 2)),\n                toolbarHeight = toolbarElement.offsetHeight,\n                toolbarWidth = toolbarElement.offsetWidth,\n                halfOffsetWidth = toolbarWidth / 2,\n                targetLeft;\n\n            if (this.sticky) {\n                // If it's beyond the height of the editor, position it at the bottom of the editor\n                if (scrollTop > (containerTop + container.offsetHeight - toolbarHeight - this.stickyTopOffset)) {\n                    toolbarElement.style.top = (containerTop + container.offsetHeight - toolbarHeight) + 'px';\n                    toolbarElement.classList.remove('medium-editor-sticky-toolbar');\n                // Stick the toolbar to the top of the window\n                } else if (scrollTop > (containerTop - toolbarHeight - this.stickyTopOffset)) {\n                    toolbarElement.classList.add('medium-editor-sticky-toolbar');\n                    toolbarElement.style.top = this.stickyTopOffset + 'px';\n                // Normal static toolbar position\n                } else {\n                    toolbarElement.classList.remove('medium-editor-sticky-toolbar');\n                    toolbarElement.style.top = containerTop - toolbarHeight + 'px';\n                }\n            } else {\n                toolbarElement.style.top = containerTop - toolbarHeight + 'px';\n            }\n\n            switch (this.align) {\n                case 'left':\n                    targetLeft = containerRect.left;\n                    break;\n\n                case 'right':\n                    targetLeft = containerRect.right - toolbarWidth;\n                    break;\n\n                case 'center':\n                    targetLeft = containerCenter - halfOffsetWidth;\n                    break;\n            }\n\n            if (targetLeft < 0) {\n                targetLeft = 0;\n            } else if ((targetLeft + toolbarWidth) > windowWidth) {\n                targetLeft = (windowWidth - Math.ceil(toolbarWidth) - 1);\n            }\n\n            toolbarElement.style.left = targetLeft + 'px';\n        },\n\n        positionToolbar: function (selection) {\n            // position the toolbar at left 0, so we can get the real width of the toolbar\n            this.getToolbarElement().style.left = '0';\n            this.getToolbarElement().style.right = 'initial';\n\n            var range = selection.getRangeAt(0),\n                boundary = range.getBoundingClientRect();\n\n            // Handle selections with just images\n            if (!boundary || ((boundary.height === 0 && boundary.width === 0) && range.startContainer === range.endContainer)) {\n                // If there's a nested image, use that for the bounding rectangle\n                if (range.startContainer.nodeType === 1 && range.startContainer.querySelector('img')) {\n                    boundary = range.startContainer.querySelector('img').getBoundingClientRect();\n                } else {\n                    boundary = range.startContainer.getBoundingClientRect();\n                }\n            }\n\n            var containerWidth = this.window.innerWidth,\n                toolbarElement = this.getToolbarElement(),\n                toolbarHeight = toolbarElement.offsetHeight,\n                toolbarWidth = toolbarElement.offsetWidth,\n                halfOffsetWidth = toolbarWidth / 2,\n                buttonHeight = 50,\n                defaultLeft = this.diffLeft - halfOffsetWidth,\n                elementsContainer = this.getEditorOption('elementsContainer'),\n                elementsContainerAbsolute = ['absolute', 'fixed'].indexOf(window.getComputedStyle(elementsContainer).getPropertyValue('position')) > -1,\n                positions = {},\n                relativeBoundary = {},\n                middleBoundary, elementsContainerBoundary;\n\n            // If container element is absolute / fixed, recalculate boundaries to be relative to the container\n            if (elementsContainerAbsolute) {\n                elementsContainerBoundary = elementsContainer.getBoundingClientRect();\n                ['top', 'left'].forEach(function (key) {\n                    relativeBoundary[key] = boundary[key] - elementsContainerBoundary[key];\n                });\n\n                relativeBoundary.width = boundary.width;\n                relativeBoundary.height = boundary.height;\n                boundary = relativeBoundary;\n\n                containerWidth = elementsContainerBoundary.width;\n\n                // Adjust top position according to container scroll position\n                positions.top = elementsContainer.scrollTop;\n            } else {\n                // Adjust top position according to window scroll position\n                positions.top = this.window.pageYOffset;\n            }\n\n            middleBoundary = boundary.left + boundary.width / 2;\n            positions.top += boundary.top - toolbarHeight;\n\n            if (boundary.top < buttonHeight) {\n                toolbarElement.classList.add('medium-toolbar-arrow-over');\n                toolbarElement.classList.remove('medium-toolbar-arrow-under');\n                positions.top += buttonHeight + boundary.height - this.diffTop;\n            } else {\n                toolbarElement.classList.add('medium-toolbar-arrow-under');\n                toolbarElement.classList.remove('medium-toolbar-arrow-over');\n                positions.top += this.diffTop;\n            }\n\n            if (middleBoundary < halfOffsetWidth) {\n                positions.left = defaultLeft + halfOffsetWidth;\n                positions.right = 'initial';\n            } else if ((containerWidth - middleBoundary) < halfOffsetWidth) {\n                positions.left = 'auto';\n                positions.right = 0;\n            } else {\n                positions.left = defaultLeft + middleBoundary;\n                positions.right = 'initial';\n            }\n\n            ['top', 'left', 'right'].forEach(function (key) {\n                toolbarElement.style[key] = positions[key] + (isNaN(positions[key]) ? '' : 'px');\n            });\n        }\n    });\n\n    MediumEditor.extensions.toolbar = Toolbar;\n}());\n\n(function () {\n    'use strict';\n\n    var ImageDragging = MediumEditor.Extension.extend({\n        init: function () {\n            MediumEditor.Extension.prototype.init.apply(this, arguments);\n\n            this.subscribe('editableDrag', this.handleDrag.bind(this));\n            this.subscribe('editableDrop', this.handleDrop.bind(this));\n        },\n\n        handleDrag: function (event) {\n            var className = 'medium-editor-dragover';\n            event.preventDefault();\n            event.dataTransfer.dropEffect = 'copy';\n\n            if (event.type === 'dragover') {\n                event.target.classList.add(className);\n            } else if (event.type === 'dragleave') {\n                event.target.classList.remove(className);\n            }\n        },\n\n        handleDrop: function (event) {\n            var className = 'medium-editor-dragover',\n                files;\n            event.preventDefault();\n            event.stopPropagation();\n\n            // IE9 does not support the File API, so prevent file from opening in a new window\n            // but also don't try to actually get the file\n            if (event.dataTransfer.files) {\n                files = Array.prototype.slice.call(event.dataTransfer.files, 0);\n                files.some(function (file) {\n                    if (file.type.match('image')) {\n                        var fileReader, id;\n                        fileReader = new FileReader();\n                        fileReader.readAsDataURL(file);\n\n                        id = 'medium-img-' + (+new Date());\n                        MediumEditor.util.insertHTMLCommand(this.document, '<img class=\"medium-editor-image-loading\" id=\"' + id + '\" />');\n\n                        fileReader.onload = function () {\n                            var img = this.document.getElementById(id);\n                            if (img) {\n                                img.removeAttribute('id');\n                                img.removeAttribute('class');\n                                img.src = fileReader.result;\n                            }\n                        }.bind(this);\n                    }\n                }.bind(this));\n            }\n            event.target.classList.remove(className);\n        }\n    });\n\n    MediumEditor.extensions.imageDragging = ImageDragging;\n}());\n\n(function () {\n    'use strict';\n\n    // Event handlers that shouldn't be exposed externally\n\n    function handleDisableExtraSpaces(event) {\n        var node = MediumEditor.selection.getSelectionStart(this.options.ownerDocument),\n            textContent = node.textContent,\n            caretPositions = MediumEditor.selection.getCaretOffsets(node);\n\n        if ((textContent[caretPositions.left - 1] === undefined) || (textContent[caretPositions.left - 1].trim() === '') || (textContent[caretPositions.left] !== undefined && textContent[caretPositions.left].trim() === '')) {\n            event.preventDefault();\n        }\n    }\n\n    function handleDisabledEnterKeydown(event, element) {\n        if (this.options.disableReturn || element.getAttribute('data-disable-return')) {\n            event.preventDefault();\n        } else if (this.options.disableDoubleReturn || element.getAttribute('data-disable-double-return')) {\n            var node = MediumEditor.selection.getSelectionStart(this.options.ownerDocument);\n\n            // if current text selection is empty OR previous sibling text is empty OR it is not a list\n            if ((node && node.textContent.trim() === '' && node.nodeName.toLowerCase() !== 'li') ||\n                (node.previousElementSibling && node.previousElementSibling.nodeName.toLowerCase() !== 'br' &&\n                 node.previousElementSibling.textContent.trim() === '')) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    function handleTabKeydown(event) {\n        // Override tab only for pre nodes\n        var node = MediumEditor.selection.getSelectionStart(this.options.ownerDocument),\n            tag = node && node.nodeName.toLowerCase();\n\n        if (tag === 'pre') {\n            event.preventDefault();\n            MediumEditor.util.insertHTMLCommand(this.options.ownerDocument, '    ');\n        }\n\n        // Tab to indent list structures!\n        if (MediumEditor.util.isListItem(node)) {\n            event.preventDefault();\n\n            // If Shift is down, outdent, otherwise indent\n            if (event.shiftKey) {\n                this.options.ownerDocument.execCommand('outdent', false, null);\n            } else {\n                this.options.ownerDocument.execCommand('indent', false, null);\n            }\n        }\n    }\n\n    function handleBlockDeleteKeydowns(event) {\n        var p, node = MediumEditor.selection.getSelectionStart(this.options.ownerDocument),\n            tagName = node.nodeName.toLowerCase(),\n            isEmpty = /^(\\s+|<br\\/?>)?$/i,\n            isHeader = /h\\d/i;\n\n        if (MediumEditor.util.isKey(event, [MediumEditor.util.keyCode.BACKSPACE, MediumEditor.util.keyCode.ENTER]) &&\n                // has a preceeding sibling\n                node.previousElementSibling &&\n                // in a header\n                isHeader.test(tagName) &&\n                // at the very end of the block\n                MediumEditor.selection.getCaretOffsets(node).left === 0) {\n            if (MediumEditor.util.isKey(event, MediumEditor.util.keyCode.BACKSPACE) && isEmpty.test(node.previousElementSibling.innerHTML)) {\n                // backspacing the begining of a header into an empty previous element will\n                // change the tagName of the current node to prevent one\n                // instead delete previous node and cancel the event.\n                node.previousElementSibling.parentNode.removeChild(node.previousElementSibling);\n                event.preventDefault();\n            } else if (!this.options.disableDoubleReturn && MediumEditor.util.isKey(event, MediumEditor.util.keyCode.ENTER)) {\n                // hitting return in the begining of a header will create empty header elements before the current one\n                // instead, make \"<p><br></p>\" element, which are what happens if you hit return in an empty paragraph\n                p = this.options.ownerDocument.createElement('p');\n                p.innerHTML = '<br>';\n                node.previousElementSibling.parentNode.insertBefore(p, node);\n                event.preventDefault();\n            }\n        } else if (MediumEditor.util.isKey(event, MediumEditor.util.keyCode.DELETE) &&\n                    // between two sibling elements\n                    node.nextElementSibling &&\n                    node.previousElementSibling &&\n                    // not in a header\n                    !isHeader.test(tagName) &&\n                    // in an empty tag\n                    isEmpty.test(node.innerHTML) &&\n                    // when the next tag *is* a header\n                    isHeader.test(node.nextElementSibling.nodeName.toLowerCase())) {\n            // hitting delete in an empty element preceding a header, ex:\n            //  <p>[CURSOR]</p><h1>Header</h1>\n            // Will cause the h1 to become a paragraph.\n            // Instead, delete the paragraph node and move the cursor to the begining of the h1\n\n            // remove node and move cursor to start of header\n            MediumEditor.selection.moveCursor(this.options.ownerDocument, node.nextElementSibling);\n\n            node.previousElementSibling.parentNode.removeChild(node);\n\n            event.preventDefault();\n        } else if (MediumEditor.util.isKey(event, MediumEditor.util.keyCode.BACKSPACE) &&\n                tagName === 'li' &&\n                // hitting backspace inside an empty li\n                isEmpty.test(node.innerHTML) &&\n                // is first element (no preceeding siblings)\n                !node.previousElementSibling &&\n                // parent also does not have a sibling\n                !node.parentElement.previousElementSibling &&\n                // is not the only li in a list\n                node.nextElementSibling &&\n                node.nextElementSibling.nodeName.toLowerCase() === 'li') {\n            // backspacing in an empty first list element in the first list (with more elements) ex:\n            //  <ul><li>[CURSOR]</li><li>List Item 2</li></ul>\n            // will remove the first <li> but add some extra element before (varies based on browser)\n            // Instead, this will:\n            // 1) remove the list element\n            // 2) create a paragraph before the list\n            // 3) move the cursor into the paragraph\n\n            // create a paragraph before the list\n            p = this.options.ownerDocument.createElement('p');\n            p.innerHTML = '<br>';\n            node.parentElement.parentElement.insertBefore(p, node.parentElement);\n\n            // move the cursor into the new paragraph\n            MediumEditor.selection.moveCursor(this.options.ownerDocument, p);\n\n            // remove the list element\n            node.parentElement.removeChild(node);\n\n            event.preventDefault();\n        } else if (MediumEditor.util.isKey(event, MediumEditor.util.keyCode.BACKSPACE) &&\n                (MediumEditor.util.getClosestTag(node, 'blockquote') !== false) &&\n                MediumEditor.selection.getCaretOffsets(node).left === 0) {\n\n            // when cursor is at the begining of the element and the element is <blockquote>\n            // then pressing backspace key should change the <blockquote> to a <p> tag\n            event.preventDefault();\n            MediumEditor.util.execFormatBlock(this.options.ownerDocument, 'p');\n        } else if (MediumEditor.util.isKey(event, MediumEditor.util.keyCode.ENTER) &&\n                (MediumEditor.util.getClosestTag(node, 'blockquote') !== false) &&\n                MediumEditor.selection.getCaretOffsets(node).right === 0) {\n\n            // when cursor is at the end of <blockquote>,\n            // then pressing enter key should create <p> tag, not <blockquote>\n            p = this.options.ownerDocument.createElement('p');\n            p.innerHTML = '<br>';\n            node.parentElement.insertBefore(p, node.nextSibling);\n\n            // move the cursor into the new paragraph\n            MediumEditor.selection.moveCursor(this.options.ownerDocument, p);\n\n            event.preventDefault();\n        }\n    }\n\n    function handleKeyup(event) {\n        var node = MediumEditor.selection.getSelectionStart(this.options.ownerDocument),\n            tagName;\n\n        if (!node) {\n            return;\n        }\n\n        // https://github.com/yabwe/medium-editor/issues/994\n        // Firefox thrown an error when calling `formatBlock` on an empty editable blockContainer that's not a <div>\n        if (MediumEditor.util.isMediumEditorElement(node) && node.children.length === 0 && !MediumEditor.util.isBlockContainer(node)) {\n            this.options.ownerDocument.execCommand('formatBlock', false, 'p');\n        }\n\n        // https://github.com/yabwe/medium-editor/issues/834\n        // https://github.com/yabwe/medium-editor/pull/382\n        // Don't call format block if this is a block element (ie h1, figCaption, etc.)\n        if (MediumEditor.util.isKey(event, MediumEditor.util.keyCode.ENTER) &&\n            !MediumEditor.util.isListItem(node) &&\n            !MediumEditor.util.isBlockContainer(node)) {\n\n            tagName = node.nodeName.toLowerCase();\n            // For anchor tags, unlink\n            if (tagName === 'a') {\n                this.options.ownerDocument.execCommand('unlink', false, null);\n            } else if (!event.shiftKey && !event.ctrlKey) {\n                this.options.ownerDocument.execCommand('formatBlock', false, 'p');\n            }\n        }\n    }\n\n    function handleEditableInput(event, editable) {\n        var textarea = editable.parentNode.querySelector('textarea[medium-editor-textarea-id=\"' + editable.getAttribute('medium-editor-textarea-id') + '\"]');\n        if (textarea) {\n            textarea.value = editable.innerHTML.trim();\n        }\n    }\n\n    // Internal helper methods which shouldn't be exposed externally\n\n    function addToEditors(win) {\n        if (!win._mediumEditors) {\n            // To avoid breaking users who are assuming that the unique id on\n            // medium-editor elements will start at 1, inserting a 'null' in the\n            // array so the unique-id can always map to the index of the editor instance\n            win._mediumEditors = [null];\n        }\n\n        // If this already has a unique id, re-use it\n        if (!this.id) {\n            this.id = win._mediumEditors.length;\n        }\n\n        win._mediumEditors[this.id] = this;\n    }\n\n    function removeFromEditors(win) {\n        if (!win._mediumEditors || !win._mediumEditors[this.id]) {\n            return;\n        }\n\n        /* Setting the instance to null in the array instead of deleting it allows:\n         * 1) Each instance to preserve its own unique-id, even after being destroyed\n         *    and initialized again\n         * 2) The unique-id to always correspond to an index in the array of medium-editor\n         *    instances. Thus, we will be able to look at a contenteditable, and determine\n         *    which instance it belongs to, by indexing into the global array.\n         */\n        win._mediumEditors[this.id] = null;\n    }\n\n    function createElementsArray(selector, doc, filterEditorElements) {\n        var elements = [];\n\n        if (!selector) {\n            selector = [];\n        }\n        // If string, use as query selector\n        if (typeof selector === 'string') {\n            selector = doc.querySelectorAll(selector);\n        }\n        // If element, put into array\n        if (MediumEditor.util.isElement(selector)) {\n            selector = [selector];\n        }\n\n        if (filterEditorElements) {\n            // Remove elements that have already been initialized by the editor\n            // selecotr might not be an array (ie NodeList) so use for loop\n            for (var i = 0; i < selector.length; i++) {\n                var el = selector[i];\n                if (MediumEditor.util.isElement(el) &&\n                    !el.getAttribute('data-medium-editor-element') &&\n                    !el.getAttribute('medium-editor-textarea-id')) {\n                    elements.push(el);\n                }\n            }\n        } else {\n            // Convert NodeList (or other array like object) into an array\n            elements = Array.prototype.slice.apply(selector);\n        }\n\n        return elements;\n    }\n\n    function cleanupTextareaElement(element) {\n        var textarea = element.parentNode.querySelector('textarea[medium-editor-textarea-id=\"' + element.getAttribute('medium-editor-textarea-id') + '\"]');\n        if (textarea) {\n            // Un-hide the textarea\n            textarea.classList.remove('medium-editor-hidden');\n            textarea.removeAttribute('medium-editor-textarea-id');\n        }\n        if (element.parentNode) {\n            element.parentNode.removeChild(element);\n        }\n    }\n\n    function setExtensionDefaults(extension, defaults) {\n        Object.keys(defaults).forEach(function (prop) {\n            if (extension[prop] === undefined) {\n                extension[prop] = defaults[prop];\n            }\n        });\n        return extension;\n    }\n\n    function initExtension(extension, name, instance) {\n        var extensionDefaults = {\n            'window': instance.options.contentWindow,\n            'document': instance.options.ownerDocument,\n            'base': instance\n        };\n\n        // Add default options into the extension\n        extension = setExtensionDefaults(extension, extensionDefaults);\n\n        // Call init on the extension\n        if (typeof extension.init === 'function') {\n            extension.init();\n        }\n\n        // Set extension name (if not already set)\n        if (!extension.name) {\n            extension.name = name;\n        }\n        return extension;\n    }\n\n    function isToolbarEnabled() {\n        // If any of the elements don't have the toolbar disabled\n        // We need a toolbar\n        if (this.elements.every(function (element) {\n                return !!element.getAttribute('data-disable-toolbar');\n            })) {\n            return false;\n        }\n\n        return this.options.toolbar !== false;\n    }\n\n    function isAnchorPreviewEnabled() {\n        // If toolbar is disabled, don't add\n        if (!isToolbarEnabled.call(this)) {\n            return false;\n        }\n\n        return this.options.anchorPreview !== false;\n    }\n\n    function isPlaceholderEnabled() {\n        return this.options.placeholder !== false;\n    }\n\n    function isAutoLinkEnabled() {\n        return this.options.autoLink !== false;\n    }\n\n    function isImageDraggingEnabled() {\n        return this.options.imageDragging !== false;\n    }\n\n    function isKeyboardCommandsEnabled() {\n        return this.options.keyboardCommands !== false;\n    }\n\n    function shouldUseFileDraggingExtension() {\n        // Since the file-dragging extension replaces the image-dragging extension,\n        // we need to check if the user passed an overrided image-dragging extension.\n        // If they have, to avoid breaking users, we won't use file-dragging extension.\n        return !this.options.extensions['imageDragging'];\n    }\n\n    function createContentEditable(textarea) {\n        var div = this.options.ownerDocument.createElement('div'),\n            now = Date.now(),\n            uniqueId = 'medium-editor-' + now,\n            atts = textarea.attributes;\n\n        // Some browsers can move pretty fast, since we're using a timestamp\n        // to make a unique-id, ensure that the id is actually unique on the page\n        while (this.options.ownerDocument.getElementById(uniqueId)) {\n            now++;\n            uniqueId = 'medium-editor-' + now;\n        }\n\n        div.className = textarea.className;\n        div.id = uniqueId;\n        div.innerHTML = textarea.value;\n\n        textarea.setAttribute('medium-editor-textarea-id', uniqueId);\n\n        // re-create all attributes from the textearea to the new created div\n        for (var i = 0, n = atts.length; i < n; i++) {\n            // do not re-create existing attributes\n            if (!div.hasAttribute(atts[i].nodeName)) {\n                div.setAttribute(atts[i].nodeName, atts[i].nodeValue);\n            }\n        }\n\n        // If textarea has a form, listen for reset on the form to clear\n        // the content of the created div\n        if (textarea.form) {\n            this.on(textarea.form, 'reset', function (event) {\n                if (!event.defaultPrevented) {\n                    this.resetContent(this.options.ownerDocument.getElementById(uniqueId));\n                }\n            }.bind(this));\n        }\n\n        textarea.classList.add('medium-editor-hidden');\n        textarea.parentNode.insertBefore(\n            div,\n            textarea\n        );\n\n        return div;\n    }\n\n    function initElement(element, editorId) {\n        if (!element.getAttribute('data-medium-editor-element')) {\n            if (element.nodeName.toLowerCase() === 'textarea') {\n                element = createContentEditable.call(this, element);\n\n                // Make sure we only attach to editableInput once for <textarea> elements\n                if (!this.instanceHandleEditableInput) {\n                    this.instanceHandleEditableInput = handleEditableInput.bind(this);\n                    this.subscribe('editableInput', this.instanceHandleEditableInput);\n                }\n            }\n\n            if (!this.options.disableEditing && !element.getAttribute('data-disable-editing')) {\n                element.setAttribute('contentEditable', true);\n                element.setAttribute('spellcheck', this.options.spellcheck);\n            }\n\n            // Make sure we only attach to editableKeydownEnter once for disable-return options\n            if (!this.instanceHandleEditableKeydownEnter) {\n                if (element.getAttribute('data-disable-return') || element.getAttribute('data-disable-double-return')) {\n                    this.instanceHandleEditableKeydownEnter = handleDisabledEnterKeydown.bind(this);\n                    this.subscribe('editableKeydownEnter', this.instanceHandleEditableKeydownEnter);\n                }\n            }\n\n            // if we're not disabling return, add a handler to help handle cleanup\n            // for certain cases when enter is pressed\n            if (!this.options.disableReturn && !element.getAttribute('data-disable-return')) {\n                this.on(element, 'keyup', handleKeyup.bind(this));\n            }\n\n            var elementId = MediumEditor.util.guid();\n\n            element.setAttribute('data-medium-editor-element', true);\n            element.classList.add('medium-editor-element');\n            element.setAttribute('role', 'textbox');\n            element.setAttribute('aria-multiline', true);\n            element.setAttribute('data-medium-editor-editor-index', editorId);\n            // TODO: Merge data-medium-editor-element and medium-editor-index attributes for 6.0.0\n            // medium-editor-index is not named correctly anymore and can be re-purposed to signify\n            // whether the element has been initialized or not\n            element.setAttribute('medium-editor-index', elementId);\n            initialContent[elementId] = element.innerHTML;\n\n            this.events.attachAllEventsToElement(element);\n        }\n\n        return element;\n    }\n\n    function attachHandlers() {\n        // attach to tabs\n        this.subscribe('editableKeydownTab', handleTabKeydown.bind(this));\n\n        // Bind keys which can create or destroy a block element: backspace, delete, return\n        this.subscribe('editableKeydownDelete', handleBlockDeleteKeydowns.bind(this));\n        this.subscribe('editableKeydownEnter', handleBlockDeleteKeydowns.bind(this));\n\n        // Bind double space event\n        if (this.options.disableExtraSpaces) {\n            this.subscribe('editableKeydownSpace', handleDisableExtraSpaces.bind(this));\n        }\n\n        // Make sure we only attach to editableKeydownEnter once for disable-return options\n        if (!this.instanceHandleEditableKeydownEnter) {\n            // disabling return or double return\n            if (this.options.disableReturn || this.options.disableDoubleReturn) {\n                this.instanceHandleEditableKeydownEnter = handleDisabledEnterKeydown.bind(this);\n                this.subscribe('editableKeydownEnter', this.instanceHandleEditableKeydownEnter);\n            }\n        }\n    }\n\n    function initExtensions() {\n\n        this.extensions = [];\n\n        // Passed in extensions\n        Object.keys(this.options.extensions).forEach(function (name) {\n            // Always save the toolbar extension for last\n            if (name !== 'toolbar' && this.options.extensions[name]) {\n                this.extensions.push(initExtension(this.options.extensions[name], name, this));\n            }\n        }, this);\n\n        // 4 Cases for imageDragging + fileDragging extensons:\n        //\n        // 1. ImageDragging ON + No Custom Image Dragging Extension:\n        //    * Use fileDragging extension (default options)\n        // 2. ImageDragging OFF + No Custom Image Dragging Extension:\n        //    * Use fileDragging extension w/ images turned off\n        // 3. ImageDragging ON + Custom Image Dragging Extension:\n        //    * Don't use fileDragging (could interfere with custom image dragging extension)\n        // 4. ImageDragging OFF + Custom Image Dragging:\n        //    * Don't use fileDragging (could interfere with custom image dragging extension)\n        if (shouldUseFileDraggingExtension.call(this)) {\n            var opts = this.options.fileDragging;\n            if (!opts) {\n                opts = {};\n\n                // Image is in the 'allowedTypes' list by default.\n                // If imageDragging is off override the 'allowedTypes' list with an empty one\n                if (!isImageDraggingEnabled.call(this)) {\n                    opts.allowedTypes = [];\n                }\n            }\n            this.addBuiltInExtension('fileDragging', opts);\n        }\n\n        // Built-in extensions\n        var builtIns = {\n            paste: true,\n            'anchor-preview': isAnchorPreviewEnabled.call(this),\n            autoLink: isAutoLinkEnabled.call(this),\n            keyboardCommands: isKeyboardCommandsEnabled.call(this),\n            placeholder: isPlaceholderEnabled.call(this)\n        };\n        Object.keys(builtIns).forEach(function (name) {\n            if (builtIns[name]) {\n                this.addBuiltInExtension(name);\n            }\n        }, this);\n\n        // Users can pass in a custom toolbar extension\n        // so check for that first and if it's not present\n        // just create the default toolbar\n        var toolbarExtension = this.options.extensions['toolbar'];\n        if (!toolbarExtension && isToolbarEnabled.call(this)) {\n            // Backwards compatability\n            var toolbarOptions = MediumEditor.util.extend({}, this.options.toolbar, {\n                allowMultiParagraphSelection: this.options.allowMultiParagraphSelection // deprecated\n            });\n            toolbarExtension = new MediumEditor.extensions.toolbar(toolbarOptions);\n        }\n\n        // If the toolbar is not disabled, so we actually have an extension\n        // initialize it and add it to the extensions array\n        if (toolbarExtension) {\n            this.extensions.push(initExtension(toolbarExtension, 'toolbar', this));\n        }\n    }\n\n    function mergeOptions(defaults, options) {\n        var deprecatedProperties = [\n            ['allowMultiParagraphSelection', 'toolbar.allowMultiParagraphSelection']\n        ];\n        // warn about using deprecated properties\n        if (options) {\n            deprecatedProperties.forEach(function (pair) {\n                if (options.hasOwnProperty(pair[0]) && options[pair[0]] !== undefined) {\n                    MediumEditor.util.deprecated(pair[0], pair[1], 'v6.0.0');\n                }\n            });\n        }\n\n        return MediumEditor.util.defaults({}, options, defaults);\n    }\n\n    function execActionInternal(action, opts) {\n        /*jslint regexp: true*/\n        var appendAction = /^append-(.+)$/gi,\n            justifyAction = /justify([A-Za-z]*)$/g, /* Detecting if is justifyCenter|Right|Left */\n            match,\n            cmdValueArgument;\n        /*jslint regexp: false*/\n\n        // Actions starting with 'append-' should attempt to format a block of text ('formatBlock') using a specific\n        // type of block element (ie append-blockquote, append-h1, append-pre, etc.)\n        match = appendAction.exec(action);\n        if (match) {\n            return MediumEditor.util.execFormatBlock(this.options.ownerDocument, match[1]);\n        }\n\n        if (action === 'fontSize') {\n            // TODO: Deprecate support for opts.size in 6.0.0\n            if (opts.size) {\n                MediumEditor.util.deprecated('.size option for fontSize command', '.value', '6.0.0');\n            }\n            cmdValueArgument = opts.value || opts.size;\n            return this.options.ownerDocument.execCommand('fontSize', false, cmdValueArgument);\n        }\n\n        if (action === 'fontName') {\n            // TODO: Deprecate support for opts.name in 6.0.0\n            if (opts.name) {\n                MediumEditor.util.deprecated('.name option for fontName command', '.value', '6.0.0');\n            }\n            cmdValueArgument = opts.value || opts.name;\n            return this.options.ownerDocument.execCommand('fontName', false, cmdValueArgument);\n        }\n\n        if (action === 'createLink') {\n            return this.createLink(opts);\n        }\n\n        if (action === 'image') {\n            var src = this.options.contentWindow.getSelection().toString().trim();\n            return this.options.ownerDocument.execCommand('insertImage', false, src);\n        }\n\n        /* Issue: https://github.com/yabwe/medium-editor/issues/595\n         * If the action is to justify the text */\n        if (justifyAction.exec(action)) {\n            var result = this.options.ownerDocument.execCommand(action, false, null),\n                parentNode = MediumEditor.selection.getSelectedParentElement(MediumEditor.selection.getSelectionRange(this.options.ownerDocument));\n            if (parentNode) {\n                cleanupJustifyDivFragments.call(this, MediumEditor.util.getTopBlockContainer(parentNode));\n            }\n\n            return result;\n        }\n\n        cmdValueArgument = opts && opts.value;\n        return this.options.ownerDocument.execCommand(action, false, cmdValueArgument);\n    }\n\n    /* If we've just justified text within a container block\n     * Chrome may have removed <br> elements and instead wrapped lines in <div> elements\n     * with a text-align property.  If so, we want to fix this\n     */\n    function cleanupJustifyDivFragments(blockContainer) {\n        if (!blockContainer) {\n            return;\n        }\n\n        var textAlign,\n            childDivs = Array.prototype.slice.call(blockContainer.childNodes).filter(function (element) {\n                var isDiv = element.nodeName.toLowerCase() === 'div';\n                if (isDiv && !textAlign) {\n                    textAlign = element.style.textAlign;\n                }\n                return isDiv;\n            });\n\n        /* If we found child <div> elements with text-align style attributes\n         * we should fix this by:\n         *\n         * 1) Unwrapping each <div> which has a text-align style\n         * 2) Insert a <br> element after each set of 'unwrapped' div children\n         * 3) Set the text-align style of the parent block element\n         */\n        if (childDivs.length) {\n            // Since we're mucking with the HTML, preserve selection\n            this.saveSelection();\n            childDivs.forEach(function (div) {\n                if (div.style.textAlign === textAlign) {\n                    var lastChild = div.lastChild;\n                    if (lastChild) {\n                        // Instead of a div, extract the child elements and add a <br>\n                        MediumEditor.util.unwrap(div, this.options.ownerDocument);\n                        var br = this.options.ownerDocument.createElement('BR');\n                        lastChild.parentNode.insertBefore(br, lastChild.nextSibling);\n                    }\n                }\n            }, this);\n            blockContainer.style.textAlign = textAlign;\n            // We're done, so restore selection\n            this.restoreSelection();\n        }\n    }\n\n    var initialContent = {};\n\n    MediumEditor.prototype = {\n        // NOT DOCUMENTED - exposed for backwards compatability\n        init: function (elements, options) {\n            this.options = mergeOptions.call(this, this.defaults, options);\n            this.origElements = elements;\n\n            if (!this.options.elementsContainer) {\n                this.options.elementsContainer = this.options.ownerDocument.body;\n            }\n\n            return this.setup();\n        },\n\n        setup: function () {\n            if (this.isActive) {\n                return;\n            }\n\n            addToEditors.call(this, this.options.contentWindow);\n            this.events = new MediumEditor.Events(this);\n            this.elements = [];\n\n            this.addElements(this.origElements);\n\n            if (this.elements.length === 0) {\n                return;\n            }\n\n            this.isActive = true;\n\n            // Call initialization helpers\n            initExtensions.call(this);\n            attachHandlers.call(this);\n        },\n\n        destroy: function () {\n            if (!this.isActive) {\n                return;\n            }\n\n            this.isActive = false;\n\n            this.extensions.forEach(function (extension) {\n                if (typeof extension.destroy === 'function') {\n                    extension.destroy();\n                }\n            }, this);\n\n            this.events.destroy();\n\n            this.elements.forEach(function (element) {\n                // Reset elements content, fix for issue where after editor destroyed the red underlines on spelling errors are left\n                if (this.options.spellcheck) {\n                    element.innerHTML = element.innerHTML;\n                }\n\n                // cleanup extra added attributes\n                element.removeAttribute('contentEditable');\n                element.removeAttribute('spellcheck');\n                element.removeAttribute('data-medium-editor-element');\n                element.classList.remove('medium-editor-element');\n                element.removeAttribute('role');\n                element.removeAttribute('aria-multiline');\n                element.removeAttribute('medium-editor-index');\n                element.removeAttribute('data-medium-editor-editor-index');\n\n                // Remove any elements created for textareas\n                if (element.getAttribute('medium-editor-textarea-id')) {\n                    cleanupTextareaElement(element);\n                }\n            }, this);\n            this.elements = [];\n            this.instanceHandleEditableKeydownEnter = null;\n            this.instanceHandleEditableInput = null;\n\n            removeFromEditors.call(this, this.options.contentWindow);\n        },\n\n        on: function (target, event, listener, useCapture) {\n            this.events.attachDOMEvent(target, event, listener, useCapture);\n\n            return this;\n        },\n\n        off: function (target, event, listener, useCapture) {\n            this.events.detachDOMEvent(target, event, listener, useCapture);\n\n            return this;\n        },\n\n        subscribe: function (event, listener) {\n            this.events.attachCustomEvent(event, listener);\n\n            return this;\n        },\n\n        unsubscribe: function (event, listener) {\n            this.events.detachCustomEvent(event, listener);\n\n            return this;\n        },\n\n        trigger: function (name, data, editable) {\n            this.events.triggerCustomEvent(name, data, editable);\n\n            return this;\n        },\n\n        delay: function (fn) {\n            var self = this;\n            return setTimeout(function () {\n                if (self.isActive) {\n                    fn();\n                }\n            }, this.options.delay);\n        },\n\n        serialize: function () {\n            var this$1 = this;\n\n            var i,\n                elementid,\n                content = {},\n                len = this.elements.length;\n\n            for (i = 0; i < len; i += 1) {\n                elementid = (this$1.elements[i].id !== '') ? this$1.elements[i].id : 'element-' + i;\n                content[elementid] = {\n                    value: this$1.elements[i].innerHTML.trim()\n                };\n            }\n            return content;\n        },\n\n        getExtensionByName: function (name) {\n            var extension;\n            if (this.extensions && this.extensions.length) {\n                this.extensions.some(function (ext) {\n                    if (ext.name === name) {\n                        extension = ext;\n                        return true;\n                    }\n                    return false;\n                });\n            }\n            return extension;\n        },\n\n        /**\n         * NOT DOCUMENTED - exposed as a helper for other extensions to use\n         */\n        addBuiltInExtension: function (name, opts) {\n            var extension = this.getExtensionByName(name),\n                merged;\n            if (extension) {\n                return extension;\n            }\n\n            switch (name) {\n                case 'anchor':\n                    merged = MediumEditor.util.extend({}, this.options.anchor, opts);\n                    extension = new MediumEditor.extensions.anchor(merged);\n                    break;\n                case 'anchor-preview':\n                    extension = new MediumEditor.extensions.anchorPreview(this.options.anchorPreview);\n                    break;\n                case 'autoLink':\n                    extension = new MediumEditor.extensions.autoLink();\n                    break;\n                case 'fileDragging':\n                    extension = new MediumEditor.extensions.fileDragging(opts);\n                    break;\n                case 'fontname':\n                    extension = new MediumEditor.extensions.fontName(this.options.fontName);\n                    break;\n                case 'fontsize':\n                    extension = new MediumEditor.extensions.fontSize(opts);\n                    break;\n                case 'keyboardCommands':\n                    extension = new MediumEditor.extensions.keyboardCommands(this.options.keyboardCommands);\n                    break;\n                case 'paste':\n                    extension = new MediumEditor.extensions.paste(this.options.paste);\n                    break;\n                case 'placeholder':\n                    extension = new MediumEditor.extensions.placeholder(this.options.placeholder);\n                    break;\n                default:\n                    // All of the built-in buttons for MediumEditor are extensions\n                    // so check to see if the extension we're creating is a built-in button\n                    if (MediumEditor.extensions.button.isBuiltInButton(name)) {\n                        if (opts) {\n                            merged = MediumEditor.util.defaults({}, opts, MediumEditor.extensions.button.prototype.defaults[name]);\n                            extension = new MediumEditor.extensions.button(merged);\n                        } else {\n                            extension = new MediumEditor.extensions.button(name);\n                        }\n                    }\n            }\n\n            if (extension) {\n                this.extensions.push(initExtension(extension, name, this));\n            }\n\n            return extension;\n        },\n\n        stopSelectionUpdates: function () {\n            this.preventSelectionUpdates = true;\n        },\n\n        startSelectionUpdates: function () {\n            this.preventSelectionUpdates = false;\n        },\n\n        checkSelection: function () {\n            var toolbar = this.getExtensionByName('toolbar');\n            if (toolbar) {\n                toolbar.checkState();\n            }\n            return this;\n        },\n\n        // Wrapper around document.queryCommandState for checking whether an action has already\n        // been applied to the current selection\n        queryCommandState: function (action) {\n            var fullAction = /^full-(.+)$/gi,\n                match,\n                queryState = null;\n\n            // Actions starting with 'full-' need to be modified since this is a medium-editor concept\n            match = fullAction.exec(action);\n            if (match) {\n                action = match[1];\n            }\n\n            try {\n                queryState = this.options.ownerDocument.queryCommandState(action);\n            } catch (exc) {\n                queryState = null;\n            }\n\n            return queryState;\n        },\n\n        execAction: function (action, opts) {\n            /*jslint regexp: true*/\n            var fullAction = /^full-(.+)$/gi,\n                match,\n                result;\n            /*jslint regexp: false*/\n\n            // Actions starting with 'full-' should be applied to to the entire contents of the editable element\n            // (ie full-bold, full-append-pre, etc.)\n            match = fullAction.exec(action);\n            if (match) {\n                // Store the current selection to be restored after applying the action\n                this.saveSelection();\n                // Select all of the contents before calling the action\n                this.selectAllContents();\n                result = execActionInternal.call(this, match[1], opts);\n                // Restore the previous selection\n                this.restoreSelection();\n            } else {\n                result = execActionInternal.call(this, action, opts);\n            }\n\n            // do some DOM clean-up for known browser issues after the action\n            if (action === 'insertunorderedlist' || action === 'insertorderedlist') {\n                MediumEditor.util.cleanListDOM(this.options.ownerDocument, this.getSelectedParentElement());\n            }\n\n            this.checkSelection();\n            return result;\n        },\n\n        getSelectedParentElement: function (range) {\n            if (range === undefined) {\n                range = this.options.contentWindow.getSelection().getRangeAt(0);\n            }\n            return MediumEditor.selection.getSelectedParentElement(range);\n        },\n\n        selectAllContents: function () {\n            var currNode = MediumEditor.selection.getSelectionElement(this.options.contentWindow);\n\n            if (currNode) {\n                // Move to the lowest descendant node that still selects all of the contents\n                while (currNode.children.length === 1) {\n                    currNode = currNode.children[0];\n                }\n\n                this.selectElement(currNode);\n            }\n        },\n\n        selectElement: function (element) {\n            MediumEditor.selection.selectNode(element, this.options.ownerDocument);\n\n            var selElement = MediumEditor.selection.getSelectionElement(this.options.contentWindow);\n            if (selElement) {\n                this.events.focusElement(selElement);\n            }\n        },\n\n        getFocusedElement: function () {\n            var focused;\n            this.elements.some(function (element) {\n                // Find the element that has focus\n                if (!focused && element.getAttribute('data-medium-focused')) {\n                    focused = element;\n                }\n\n                // bail if we found the element that had focus\n                return !!focused;\n            }, this);\n\n            return focused;\n        },\n\n        // Export the state of the selection in respect to one of this\n        // instance of MediumEditor's elements\n        exportSelection: function () {\n            var selectionElement = MediumEditor.selection.getSelectionElement(this.options.contentWindow),\n                editableElementIndex = this.elements.indexOf(selectionElement),\n                selectionState = null;\n\n            if (editableElementIndex >= 0) {\n                selectionState = MediumEditor.selection.exportSelection(selectionElement, this.options.ownerDocument);\n            }\n\n            if (selectionState !== null && editableElementIndex !== 0) {\n                selectionState.editableElementIndex = editableElementIndex;\n            }\n\n            return selectionState;\n        },\n\n        saveSelection: function () {\n            this.selectionState = this.exportSelection();\n        },\n\n        // Restore a selection based on a selectionState returned by a call\n        // to MediumEditor.exportSelection\n        importSelection: function (selectionState, favorLaterSelectionAnchor) {\n            if (!selectionState) {\n                return;\n            }\n\n            var editableElement = this.elements[selectionState.editableElementIndex || 0];\n            MediumEditor.selection.importSelection(selectionState, editableElement, this.options.ownerDocument, favorLaterSelectionAnchor);\n        },\n\n        restoreSelection: function () {\n            this.importSelection(this.selectionState);\n        },\n\n        createLink: function (opts) {\n            var this$1 = this;\n\n            var currentEditor = MediumEditor.selection.getSelectionElement(this.options.contentWindow),\n                customEvent = {},\n                targetUrl;\n\n            // Make sure the selection is within an element this editor is tracking\n            if (this.elements.indexOf(currentEditor) === -1) {\n                return;\n            }\n\n            try {\n                this.events.disableCustomEvent('editableInput');\n                // TODO: Deprecate support for opts.url in 6.0.0\n                if (opts.url) {\n                    MediumEditor.util.deprecated('.url option for createLink', '.value', '6.0.0');\n                }\n                targetUrl = opts.url || opts.value;\n                if (targetUrl && targetUrl.trim().length > 0) {\n                    var currentSelection = this.options.contentWindow.getSelection();\n                    if (currentSelection) {\n                        var currRange = currentSelection.getRangeAt(0),\n                            commonAncestorContainer = currRange.commonAncestorContainer,\n                            exportedSelection,\n                            startContainerParentElement,\n                            endContainerParentElement,\n                            textNodes;\n\n                        // If the selection is contained within a single text node\n                        // and the selection starts at the beginning of the text node,\n                        // MSIE still says the startContainer is the parent of the text node.\n                        // If the selection is contained within a single text node, we\n                        // want to just use the default browser 'createLink', so we need\n                        // to account for this case and adjust the commonAncestorContainer accordingly\n                        if (currRange.endContainer.nodeType === 3 &&\n                            currRange.startContainer.nodeType !== 3 &&\n                            currRange.startOffset === 0 &&\n                            currRange.startContainer.firstChild === currRange.endContainer) {\n                            commonAncestorContainer = currRange.endContainer;\n                        }\n\n                        startContainerParentElement = MediumEditor.util.getClosestBlockContainer(currRange.startContainer);\n                        endContainerParentElement = MediumEditor.util.getClosestBlockContainer(currRange.endContainer);\n\n                        // If the selection is not contained within a single text node\n                        // but the selection is contained within the same block element\n                        // we want to make sure we create a single link, and not multiple links\n                        // which can happen with the built in browser functionality\n                        if (commonAncestorContainer.nodeType !== 3 && commonAncestorContainer.textContent.length !== 0 && startContainerParentElement === endContainerParentElement) {\n                            var parentElement = (startContainerParentElement || currentEditor),\n                                fragment = this.options.ownerDocument.createDocumentFragment();\n\n                            // since we are going to create a link from an extracted text,\n                            // be sure that if we are updating a link, we won't let an empty link behind (see #754)\n                            // (Workaroung for Chrome)\n                            this.execAction('unlink');\n\n                            exportedSelection = this.exportSelection();\n                            fragment.appendChild(parentElement.cloneNode(true));\n\n                            if (currentEditor === parentElement) {\n                                // We have to avoid the editor itself being wiped out when it's the only block element,\n                                // as our reference inside this.elements gets detached from the page when insertHTML runs.\n                                // If we just use [parentElement, 0] and [parentElement, parentElement.childNodes.length]\n                                // as the range boundaries, this happens whenever parentElement === currentEditor.\n                                // The tradeoff to this workaround is that a orphaned tag can sometimes be left behind at\n                                // the end of the editor's content.\n                                // In Gecko:\n                                // as an empty <strong></strong> if parentElement.lastChild is a <strong> tag.\n                                // In WebKit:\n                                // an invented <br /> tag at the end in the same situation\n                                MediumEditor.selection.select(\n                                    this.options.ownerDocument,\n                                    parentElement.firstChild,\n                                    0,\n                                    parentElement.lastChild,\n                                    parentElement.lastChild.nodeType === 3 ?\n                                    parentElement.lastChild.nodeValue.length : parentElement.lastChild.childNodes.length\n                                );\n                            } else {\n                                MediumEditor.selection.select(\n                                    this.options.ownerDocument,\n                                    parentElement,\n                                    0,\n                                    parentElement,\n                                    parentElement.childNodes.length\n                                );\n                            }\n\n                            var modifiedExportedSelection = this.exportSelection();\n\n                            textNodes = MediumEditor.util.findOrCreateMatchingTextNodes(\n                                this.options.ownerDocument,\n                                fragment,\n                                {\n                                    start: exportedSelection.start - modifiedExportedSelection.start,\n                                    end: exportedSelection.end - modifiedExportedSelection.start,\n                                    editableElementIndex: exportedSelection.editableElementIndex\n                                }\n                            );\n                            // If textNodes are not present, when changing link on images\n                            // ex: <a><img src=\"http://image.test.com\"></a>, change fragment to currRange.startContainer\n                            // and set textNodes array to [imageElement, imageElement]\n                            if (textNodes.length === 0) {\n                                fragment = this.options.ownerDocument.createDocumentFragment();\n                                fragment.appendChild(commonAncestorContainer.cloneNode(true));\n                                textNodes = [fragment.firstChild.firstChild, fragment.firstChild.lastChild];\n                            }\n\n                            // Creates the link in the document fragment\n                            MediumEditor.util.createLink(this.options.ownerDocument, textNodes, targetUrl.trim());\n\n                            // Chrome trims the leading whitespaces when inserting HTML, which messes up restoring the selection.\n                            var leadingWhitespacesCount = (fragment.firstChild.innerHTML.match(/^\\s+/) || [''])[0].length;\n\n                            // Now move the created link back into the original document in a way to preserve undo/redo history\n                            MediumEditor.util.insertHTMLCommand(this.options.ownerDocument, fragment.firstChild.innerHTML.replace(/^\\s+/, ''));\n                            exportedSelection.start -= leadingWhitespacesCount;\n                            exportedSelection.end -= leadingWhitespacesCount;\n\n                            this.importSelection(exportedSelection);\n                        } else {\n                            this.options.ownerDocument.execCommand('createLink', false, targetUrl);\n                        }\n\n                        if (this.options.targetBlank || opts.target === '_blank') {\n                            MediumEditor.util.setTargetBlank(MediumEditor.selection.getSelectionStart(this.options.ownerDocument), targetUrl);\n                        } else {\n                            MediumEditor.util.removeTargetBlank(MediumEditor.selection.getSelectionStart(this.options.ownerDocument), targetUrl);\n                        }\n\n                        if (opts.buttonClass) {\n                            MediumEditor.util.addClassToAnchors(MediumEditor.selection.getSelectionStart(this.options.ownerDocument), opts.buttonClass);\n                        }\n                    }\n                }\n                // Fire input event for backwards compatibility if anyone was listening directly to the DOM input event\n                if (this.options.targetBlank || opts.target === '_blank' || opts.buttonClass) {\n                    customEvent = this.options.ownerDocument.createEvent('HTMLEvents');\n                    customEvent.initEvent('input', true, true, this.options.contentWindow);\n                    for (var i = 0, len = this.elements.length; i < len; i += 1) {\n                        this$1.elements[i].dispatchEvent(customEvent);\n                    }\n                }\n            } finally {\n                this.events.enableCustomEvent('editableInput');\n            }\n            // Fire our custom editableInput event\n            this.events.triggerCustomEvent('editableInput', customEvent, currentEditor);\n        },\n\n        cleanPaste: function (text) {\n            this.getExtensionByName('paste').cleanPaste(text);\n        },\n\n        pasteHTML: function (html, options) {\n            this.getExtensionByName('paste').pasteHTML(html, options);\n        },\n\n        setContent: function (html, index) {\n            index = index || 0;\n\n            if (this.elements[index]) {\n                var target = this.elements[index];\n                target.innerHTML = html;\n                this.checkContentChanged(target);\n            }\n        },\n\n        getContent: function (index) {\n            index = index || 0;\n\n            if (this.elements[index]) {\n                return this.elements[index].innerHTML.trim();\n            }\n            return null;\n        },\n\n        checkContentChanged: function (editable) {\n            editable = editable || MediumEditor.selection.getSelectionElement(this.options.contentWindow);\n            this.events.updateInput(editable, { target: editable, currentTarget: editable });\n        },\n\n        resetContent: function (element) {\n            // For all elements that exist in the this.elements array, we can assume:\n            // - Its initial content has been set in the initialContent object\n            // - It has a medium-editor-index attribute which is the key value in the initialContent object\n\n            if (element) {\n                var index = this.elements.indexOf(element);\n                if (index !== -1) {\n                    this.setContent(initialContent[element.getAttribute('medium-editor-index')], index);\n                }\n                return;\n            }\n\n            this.elements.forEach(function (el, idx) {\n                this.setContent(initialContent[el.getAttribute('medium-editor-index')], idx);\n            }, this);\n        },\n\n        addElements: function (selector) {\n            // Convert elements into an array\n            var elements = createElementsArray(selector, this.options.ownerDocument, true);\n\n            // Do we have elements to add now?\n            if (elements.length === 0) {\n                return false;\n            }\n\n            elements.forEach(function (element) {\n                // Initialize all new elements (we check that in those functions don't worry)\n                element = initElement.call(this, element, this.id);\n\n                // Add new elements to our internal elements array\n                this.elements.push(element);\n\n                // Trigger event so extensions can know when an element has been added\n                this.trigger('addElement', { target: element, currentTarget: element }, element);\n            }, this);\n        },\n\n        removeElements: function (selector) {\n            // Convert elements into an array\n            var elements = createElementsArray(selector, this.options.ownerDocument),\n                toRemove = elements.map(function (el) {\n                    // For textareas, make sure we're looking at the editor div and not the textarea itself\n                    if (el.getAttribute('medium-editor-textarea-id') && el.parentNode) {\n                        return el.parentNode.querySelector('div[medium-editor-textarea-id=\"' + el.getAttribute('medium-editor-textarea-id') + '\"]');\n                    } else {\n                        return el;\n                    }\n                });\n\n            this.elements = this.elements.filter(function (element) {\n                // If this is an element we want to remove\n                if (toRemove.indexOf(element) !== -1) {\n                    this.events.cleanupElement(element);\n                    if (element.getAttribute('medium-editor-textarea-id')) {\n                        cleanupTextareaElement(element);\n                    }\n                    // Trigger event so extensions can clean-up elements that are being removed\n                    this.trigger('removeElement', { target: element, currentTarget: element }, element);\n                    return false;\n                }\n                return true;\n            }, this);\n        }\n    };\n\n    MediumEditor.getEditorFromElement = function (element) {\n        var index = element.getAttribute('data-medium-editor-editor-index'),\n            win = element && element.ownerDocument && (element.ownerDocument.defaultView || element.ownerDocument.parentWindow);\n        if (win && win._mediumEditors && win._mediumEditors[index]) {\n            return win._mediumEditors[index];\n        }\n        return null;\n    };\n}());\n\n(function () {\n    // summary: The default options hash used by the Editor\n\n    MediumEditor.prototype.defaults = {\n        activeButtonClass: 'medium-editor-button-active',\n        buttonLabels: false,\n        delay: 0,\n        disableReturn: false,\n        disableDoubleReturn: false,\n        disableExtraSpaces: false,\n        disableEditing: false,\n        autoLink: false,\n        elementsContainer: false,\n        contentWindow: window,\n        ownerDocument: document,\n        targetBlank: false,\n        extensions: {},\n        spellcheck: true\n    };\n})();\n\nMediumEditor.parseVersionString = function (release) {\n    var split = release.split('-'),\n        version = split[0].split('.'),\n        preRelease = (split.length > 1) ? split[1] : '';\n    return {\n        major: parseInt(version[0], 10),\n        minor: parseInt(version[1], 10),\n        revision: parseInt(version[2], 10),\n        preRelease: preRelease,\n        toString: function () {\n            return [version[0], version[1], version[2]].join('.') + (preRelease ? '-' + preRelease : '');\n        }\n    };\n};\n\nMediumEditor.version = MediumEditor.parseVersionString.call(this, ({\n    // grunt-bump looks for this:\n    'version': '5.21.1'\n}).version);\n\n    return MediumEditor;\n}()));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 3 */
/***/ function(module, exports) {

"use strict";
eval("\"use strict\";\n/**\n * For Loop\n */\nexports.forEach = function (array, callback, scope) {\n    for (var i = 0; i < array.length; i++)\n        callback.call(scope, i, array[i]);\n};\n/**\n * Pop array by key name\n *\n * @param data\n * @param key\n * @returns any[]\n */\nexports.popByKey = function (data, key, defaults) {\n    if (!data.hasOwnProperty(key))\n        return defaults;\n    var value = data[key];\n    delete data[key];\n    return value;\n};\n/**\n * Extend Object\n *\n * @param defaults\n * @param object\n * @returns {any}\n */\nexports.extend = function (defaults, object) {\n    for (var i in object) {\n        if (object.hasOwnProperty(i)) {\n            defaults[i] = object[i];\n        }\n    }\n    return defaults;\n};\n/**\n * Convert String to CamelCase\n *\n * @param str\n * @returns {string}\n */\nexports.toCamelCase = function (str) {\n    return str.replace(/^([A-Z])|[\\s-_](\\w)/g, function (match, p1, p2, offset) {\n        if (p2)\n            return p2.toUpperCase();\n        return p1.toLowerCase();\n    });\n};\nexports.captalize = function (str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n};\n/**\n * Firefox have an issue to submit form if its not appended to the body\n * @param form\n */\nexports.submitForm = function (form) {\n    document.body.appendChild(form);\n    form.submit();\n};\nexports.requireAll = function (requireContext) {\n    return requireContext.keys().map(requireContext);\n};\n//# sourceMappingURL=Helpers.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL3R5cGVzY3JpcHQvSGVscGVycy5qcz8yMDZkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBGb3IgTG9vcFxuICovXG5leHBvcnRzLmZvckVhY2ggPSBmdW5jdGlvbiAoYXJyYXksIGNhbGxiYWNrLCBzY29wZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspXG4gICAgICAgIGNhbGxiYWNrLmNhbGwoc2NvcGUsIGksIGFycmF5W2ldKTtcbn07XG4vKipcbiAqIFBvcCBhcnJheSBieSBrZXkgbmFtZVxuICpcbiAqIEBwYXJhbSBkYXRhXG4gKiBAcGFyYW0ga2V5XG4gKiBAcmV0dXJucyBhbnlbXVxuICovXG5leHBvcnRzLnBvcEJ5S2V5ID0gZnVuY3Rpb24gKGRhdGEsIGtleSwgZGVmYXVsdHMpIHtcbiAgICBpZiAoIWRhdGEuaGFzT3duUHJvcGVydHkoa2V5KSlcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRzO1xuICAgIHZhciB2YWx1ZSA9IGRhdGFba2V5XTtcbiAgICBkZWxldGUgZGF0YVtrZXldO1xuICAgIHJldHVybiB2YWx1ZTtcbn07XG4vKipcbiAqIEV4dGVuZCBPYmplY3RcbiAqXG4gKiBAcGFyYW0gZGVmYXVsdHNcbiAqIEBwYXJhbSBvYmplY3RcbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmV4cG9ydHMuZXh0ZW5kID0gZnVuY3Rpb24gKGRlZmF1bHRzLCBvYmplY3QpIHtcbiAgICBmb3IgKHZhciBpIGluIG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICBkZWZhdWx0c1tpXSA9IG9iamVjdFtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdHM7XG59O1xuLyoqXG4gKiBDb252ZXJ0IFN0cmluZyB0byBDYW1lbENhc2VcbiAqXG4gKiBAcGFyYW0gc3RyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnRzLnRvQ2FtZWxDYXNlID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvXihbQS1aXSl8W1xccy1fXShcXHcpL2csIGZ1bmN0aW9uIChtYXRjaCwgcDEsIHAyLCBvZmZzZXQpIHtcbiAgICAgICAgaWYgKHAyKVxuICAgICAgICAgICAgcmV0dXJuIHAyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIHJldHVybiBwMS50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xufTtcbmV4cG9ydHMuY2FwdGFsaXplID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59O1xuLyoqXG4gKiBGaXJlZm94IGhhdmUgYW4gaXNzdWUgdG8gc3VibWl0IGZvcm0gaWYgaXRzIG5vdCBhcHBlbmRlZCB0byB0aGUgYm9keVxuICogQHBhcmFtIGZvcm1cbiAqL1xuZXhwb3J0cy5zdWJtaXRGb3JtID0gZnVuY3Rpb24gKGZvcm0pIHtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pO1xuICAgIGZvcm0uc3VibWl0KCk7XG59O1xuZXhwb3J0cy5yZXF1aXJlQWxsID0gZnVuY3Rpb24gKHJlcXVpcmVDb250ZXh0KSB7XG4gICAgcmV0dXJuIHJlcXVpcmVDb250ZXh0LmtleXMoKS5tYXAocmVxdWlyZUNvbnRleHQpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUhlbHBlcnMuanMubWFwXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHJlc291cmNlcy9hc3NldHMvdHlwZXNjcmlwdC9IZWxwZXJzLmpzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 4 */
/***/ function(module, exports) {

"use strict";
eval("\"use strict\";\nvar Plugins = (function () {\n    function Plugins() {\n        this.exposes = {};\n    }\n    Plugins.prototype.install = function () {\n    };\n    return Plugins;\n}());\nexports.Plugins = Plugins;\n//# sourceMappingURL=Plugins.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL3R5cGVzY3JpcHQvUGx1Z2lucy9QbHVnaW5zLmpzPzNiMjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUGx1Z2lucyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUGx1Z2lucygpIHtcbiAgICAgICAgdGhpcy5leHBvc2VzID0ge307XG4gICAgfVxuICAgIFBsdWdpbnMucHJvdG90eXBlLmluc3RhbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICByZXR1cm4gUGx1Z2lucztcbn0oKSk7XG5leHBvcnRzLlBsdWdpbnMgPSBQbHVnaW5zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGx1Z2lucy5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gcmVzb3VyY2VzL2Fzc2V0cy90eXBlc2NyaXB0L1BsdWdpbnMvUGx1Z2lucy5qcyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Plugins_1 = __webpack_require__(4);\nvar Helpers_1 = __webpack_require__(3);\nwindow['dreamsark'].exposes({\n    MediumEditor: __webpack_require__(2)\n});\nvar MediumEditorTables = __webpack_require__(1);\nvar Medium = (function (_super) {\n    __extends(Medium, _super);\n    function Medium(app, element, options) {\n        _super.call(this);\n        this.defaults = {\n            disableExtraSpaces: true,\n            buttonLabels: 'fontawesome',\n            toolbar: {\n                buttons: [\n                    'bold', 'italic', 'underline', 'anchor', 'h2', 'h3', 'quote', 'table'\n                ]\n            },\n            extensions: {\n                table: new MediumEditorTables()\n            }\n        };\n        this.instance = new MediumEditor(element, Helpers_1.extend(this.defaults, options));\n    }\n    return Medium;\n}(Plugins_1.Plugins));\nexports.Medium = Medium;\n/**\n * Auto install itself\n */\nwindow['dreamsark'].install({\n    Medium: Medium\n});\n//# sourceMappingURL=Medium.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL3R5cGVzY3JpcHQvUGx1Z2lucy9NZWRpdW0uanM/YmE3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIFBsdWdpbnNfMSA9IHJlcXVpcmUoXCIuL1BsdWdpbnNcIik7XG52YXIgSGVscGVyc18xID0gcmVxdWlyZShcIi4uL0hlbHBlcnNcIik7XG53aW5kb3dbJ2RyZWFtc2FyayddLmV4cG9zZXMoe1xuICAgIE1lZGl1bUVkaXRvcjogcmVxdWlyZShcIm1lZGl1bS1lZGl0b3JcIilcbn0pO1xudmFyIE1lZGl1bUVkaXRvclRhYmxlcyA9IHJlcXVpcmUoXCJtZWRpdW0tZWRpdG9yLXRhYmxlc1wiKTtcbnZhciBNZWRpdW0gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNZWRpdW0sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWVkaXVtKGFwcCwgZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIGRpc2FibGVFeHRyYVNwYWNlczogdHJ1ZSxcbiAgICAgICAgICAgIGJ1dHRvbkxhYmVsczogJ2ZvbnRhd2Vzb21lJyxcbiAgICAgICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgICAgICBidXR0b25zOiBbXG4gICAgICAgICAgICAgICAgICAgICdib2xkJywgJ2l0YWxpYycsICd1bmRlcmxpbmUnLCAnYW5jaG9yJywgJ2gyJywgJ2gzJywgJ3F1b3RlJywgJ3RhYmxlJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgICAgICAgICAgdGFibGU6IG5ldyBNZWRpdW1FZGl0b3JUYWJsZXMoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmluc3RhbmNlID0gbmV3IE1lZGl1bUVkaXRvcihlbGVtZW50LCBIZWxwZXJzXzEuZXh0ZW5kKHRoaXMuZGVmYXVsdHMsIG9wdGlvbnMpKTtcbiAgICB9XG4gICAgcmV0dXJuIE1lZGl1bTtcbn0oUGx1Z2luc18xLlBsdWdpbnMpKTtcbmV4cG9ydHMuTWVkaXVtID0gTWVkaXVtO1xuLyoqXG4gKiBBdXRvIGluc3RhbGwgaXRzZWxmXG4gKi9cbndpbmRvd1snZHJlYW1zYXJrJ10uaW5zdGFsbCh7XG4gICAgTWVkaXVtOiBNZWRpdW1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWVkaXVtLmpzLm1hcFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyByZXNvdXJjZXMvYXNzZXRzL3R5cGVzY3JpcHQvUGx1Z2lucy9NZWRpdW0uanMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }
/******/ ]);