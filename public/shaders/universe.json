{
  "id": 484,
  "name": "New Composed Shader",
  "fragment": "#define TAU 6.28318530718\n#define MAX_ITER 5\n\nprecision highp float;\nprecision highp int;\nuniform vec2 Test_Universe1453230164894_36_resolution;\nuniform float time;\nuniform vec2 Tiling_Caustic1453230173701_46_resolution;\nuniform vec3 backgroundColor;\nuniform vec3 color;\nuniform float speed;\nuniform float brightness;\nvarying vec2 Test_Universe1453230164894_36_vUv;\nvarying vec2 Tiling_Caustic1453230173701_46_vUv;\nvec4 Test_Universe1453230164894_36_main() \n{\n    vec4 Test_Universe1453230164894_36_gl_FragColor = vec4(0.0);\n    float timeScaled = (time + 29.) * 60.0;\n    float s = 0.0, v = 0.0;\n    vec2 uv = (Test_Universe1453230164894_36_vUv.xy / Test_Universe1453230164894_36_resolution.xy) * 2.0 - 1.0;\n    float t = time * 0.005;\n    uv.x = (uv.x * Test_Universe1453230164894_36_resolution.x / Test_Universe1453230164894_36_resolution.y) + sin(t) * 0.5;\n    float si = sin(t + 1.0);\n    float co = cos(t);\n    uv *= mat2(co, si, -si, co);\n    vec3 col = vec3(0.0);\n    vec3 init = vec3(0.25, 0.25 + sin(timeScaled * 0.001) * 0.4, floor(timeScaled) * 0.0008);\n    for (int r = 0;\n r < 50; r++) \n    {\n        vec3 p = init + s * vec3(uv, 0.143);\n        p.z = mod(p.z, 2.0);\n        for (int i = 0;\n i < 10; i++) p = abs(p * 2.04) / dot(p, p) - 0.75;\n        v += length(p * p) * smoothstep(0.0, 0.5, 0.9 - s) * .002;\n        col += vec3(v * 0.8, 1.1 - s * 0.5, .7 + v * 0.5) * v * 0.013;\n        s += .01;\n    }\n    Test_Universe1453230164894_36_gl_FragColor = vec4(col, 1.0);\n    return Test_Universe1453230164894_36_gl_FragColor *= 1.0;\n}\nvec4 Tiling_Caustic1453230173701_46_main() \n{\n    vec4 Tiling_Caustic1453230173701_46_gl_FragColor = vec4(0.0);\n    vec2 uv = Tiling_Caustic1453230173701_46_vUv * Tiling_Caustic1453230173701_46_resolution;\n    vec2 p = mod(uv * TAU, TAU) - 250.0;\n    vec2 i = vec2(p);\n    float c = 1.0;\n    float inten = 0.005;\n    for (int n = 0;\n n < MAX_ITER; n++) \n    {\n        float t = time * speed * (1.0 - (3.5 / float(n + 1)));\n        i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n        c += 1.0 / length(vec2(p.x / (sin(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n    }\n    c /= float(MAX_ITER);\n    c = 1.17 - pow(c, brightness);\n    vec3 rgb = vec3(pow(abs(c), 8.0));\n    Tiling_Caustic1453230173701_46_gl_FragColor = vec4(rgb * color + backgroundColor, 1.0);\n    return Tiling_Caustic1453230173701_46_gl_FragColor *= 1.0;\n}\nvoid main() \n{\n    gl_FragColor = (Test_Universe1453230164894_36_main() + Tiling_Caustic1453230173701_46_main());}\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 Test_Universe1453230164894_36_vPosition;\nvarying vec3 Test_Universe1453230164894_36_vNormal;\nvarying vec2 Test_Universe1453230164894_36_vUv;\nvarying vec2 Test_Universe1453230164894_36_vUv2;\nvarying vec3 Tiling_Caustic1453230173701_46_vPosition;\nvarying vec3 Tiling_Caustic1453230173701_46_vNormal;\nvarying vec2 Tiling_Caustic1453230173701_46_vUv;\nvarying vec2 Tiling_Caustic1453230173701_46_vUv2;\nvec4 Test_Universe1453230164894_36_main() \n{\n    vec4 Test_Universe1453230164894_36_gl_Position = vec4(0.0);\n    Test_Universe1453230164894_36_vNormal = normal;\n    Test_Universe1453230164894_36_vUv = uv;\n    Test_Universe1453230164894_36_vUv2 = uv2;\n    Test_Universe1453230164894_36_vPosition = position;\n    Test_Universe1453230164894_36_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    return Test_Universe1453230164894_36_gl_Position *= 1.0;\n}\nvec4 Tiling_Caustic1453230173701_46_main() \n{\n    vec4 Tiling_Caustic1453230173701_46_gl_Position = vec4(0.0);\n    Tiling_Caustic1453230173701_46_vNormal = normal;\n    Tiling_Caustic1453230173701_46_vUv = uv;\n    Tiling_Caustic1453230173701_46_vUv2 = uv2;\n    Tiling_Caustic1453230173701_46_vPosition = position;\n    Tiling_Caustic1453230173701_46_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    return Tiling_Caustic1453230173701_46_gl_Position *= 1.0;\n}\nvoid main() \n{\n    gl_Position = Test_Universe1453230164894_36_main() + Tiling_Caustic1453230173701_46_main();}\n",
  "uniforms": {
    "cameraPosition": {
      "type": "v3",
      "glslType": "vec3"
    },
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "Test_Universe1453230164894_36_resolution": {
      "value": {
        "x": "1",
        "y": "1"
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "speed": {
      "value": "0.5",
      "type": "f",
      "glslType": "float"
    },
    "color": {
      "value": {
        "r": 1,
        "g": 1,
        "b": 1
      },
      "type": "c",
      "glslType": "vec3"
    },
    "backgroundColor": {
      "value": {
        "r": "0",
        "g": "0",
        "b": "0"
      },
      "type": "c",
      "glslType": "vec3"
    },
    "brightness": {
      "value": "1.5",
      "type": "f",
      "glslType": "float"
    },
    "Tiling_Caustic1453230173701_46_resolution": {
      "value": {
        "x": 1,
        "y": 1
      },
      "type": "v2",
      "glslType": "vec2"
    }
  },
  "url": "http://shaderfrog.com/app/view/484",
  "user": {
    "username": "milewski",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}